<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无邪の博客</title>
  
  
  <link href="https://amazingdl.github.io/atom.xml" rel="self"/>
  
  <link href="https://amazingdl.github.io/"/>
  <updated>2020-11-15T02:32:44.127Z</updated>
  <id>https://amazingdl.github.io/</id>
  
  <author>
    <name>AmazingDL</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MyBatis的简单使用</title>
    <link href="https://amazingdl.github.io/2020/11/12/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/MyBatis/MyBatis/"/>
    <id>https://amazingdl.github.io/2020/11/12/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/MyBatis/MyBatis/</id>
    <published>2020-11-12T12:30:25.000Z</published>
    <updated>2020-11-15T02:32:44.127Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Mybatis框架概述"><a href="#一、Mybatis框架概述" class="headerlink" title="一、Mybatis框架概述"></a>一、Mybatis框架概述</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p><strong>ORM</strong>：将关系数据库中表中的记录映射成为对象，以对象的形式展现，程序员可以把对数据库的操作转化为对对象的操作。 因此ORM的目的是为了方便开发人员以面向对象的思想来实现对数据库的操作。 </p><p>ORM 采用元数据来描述对象-关系映射细节： 元数据通常采用 XML 格式，并且存放在专门的对象-关系映射文件中。</p><p>MyBatis就一个持久层框架ORM，用于程序与数据库之间的交互。</p><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。</p><p>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</p><p>MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p><p>在进行web开发时，通常会通过Spring整合MyBatis，所以MyBatis就全权交给Spring管理。</p><h3 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2 持久化"></a>1.2 持久化</h3><p><strong>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</strong></p><ul><li>即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</li><li>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</li><li>在生活中 : 将鲜肉冷藏，吃的时候再解冻的方法也是。将水果做成罐头的方法也是。</li></ul><p><strong>为什么需要持久化服务呢？那是由于内存本身的缺陷引起的</strong></p><ul><li>内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。</li><li>内存过于昂贵，与硬盘、光盘等外存相比，内存的价格要高2~3个数量级，而且维持成本也高，至少需要一直供电吧。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。</li></ul><h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a>1.3 持久层</h3><p><strong>什么是持久层？</strong></p><ul><li>完成持久化工作的代码块 .  —-&gt;  dao层 【DAO (Data Access Object)  数据访问对象】</li><li>大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种<strong>关系数据库</strong>来完成。</li><li>不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现.</li><li>与系统其他部分相对而言，这个层面应该具有一个较为清晰和严格的逻辑边界</li></ul><h3 id="1-4-MyBatis特点"><a href="#1-4-MyBatis特点" class="headerlink" title="1.4 MyBatis特点"></a>1.4 MyBatis特点</h3><ol><li>Mybatis就是帮助程序猿将数据存入数据库中 , 和从数据库中取数据 .</li><li>传统的jdbc操作 , 有很多重复代码块 .比如 : 数据取出时的封装 , 数据库的建立连接等等… , 通过框架可以减少重复代码,提高开发效率 .</li><li>MyBatis 是一个半自动化的<strong>ORM框架 (Object Relationship Mapping) –&gt;对象关系映射</strong></li><li>所有的事情，不用Mybatis依旧可以做到，只是用了它，所有实现会更加简单！<strong>技术没有高低之分，只有使用这个技术的人有高低之别</strong></li><li>MyBatis的优点<ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件就可以了，易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供xml标签，支持编写动态sql。</li></ul></li></ol><h3 id="1-5-相关环境"><a href="#1-5-相关环境" class="headerlink" title="1.5 相关环境"></a>1.5 相关环境</h3><p><strong>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- myBatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MySQL链接包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>数据库</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`phone`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`value`</span> <span class="built_in">int</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>)  <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="keyword">default</span> <span class="keyword">charset</span> = utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`phone`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">3999</span>, <span class="string">&#x27;一加八&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`phone`</span> <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">5999</span>, <span class="string">&#x27;华为p40&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`phone`</span> <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3699</span>, <span class="string">&#x27;小米10&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`phone`</span> <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">3899</span>, <span class="string">&#x27;魅族17&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`phone`</span> <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">5999</span>, <span class="string">&#x27;三星s20&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="二、JDBC案例"><a href="#二、JDBC案例" class="headerlink" title="二、JDBC案例"></a>二、JDBC案例</h2><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;<span class="comment">//编号</span></span><br><span class="line">    <span class="keyword">private</span> Integer value;<span class="comment">//价格</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名称</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(Integer id, Integer value, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get和set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Phone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection connection=<span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement stmt=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet result=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;134679dinglei&quot;</span>;</span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<span class="comment">//加载驱动类，并抛出异常</span></span><br><span class="line">            <span class="comment">//获取链接</span></span><br><span class="line">            connection= DriverManager.getConnection(url,username,password);</span><br><span class="line"></span><br><span class="line">            String sql=<span class="string">&quot;select * from phone where id=?&quot;</span>;</span><br><span class="line">            <span class="comment">//执行SQL语句</span></span><br><span class="line">            stmt=connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//填充占位符，第一个参数是表示第几个占位符，第二个参数表示填充的值</span></span><br><span class="line">            stmt.setInt(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取结果集</span></span><br><span class="line">            result=stmt.executeQuery();</span><br><span class="line"></span><br><span class="line">            Phone phone=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历结构集</span></span><br><span class="line">            <span class="keyword">while</span> (result.next())&#123;</span><br><span class="line">                phone=<span class="keyword">new</span> Phone(result.getInt(<span class="string">&quot;id&quot;</span>),result.getInt(<span class="string">&quot;value&quot;</span>)</span><br><span class="line">                ,result.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(phone);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭连接，ResultSet-&gt;PreparedStatement-&gt;Connection</span></span><br><span class="line">            <span class="keyword">if</span>(result!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                result.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                connection.close();;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="三、自定义框架"><a href="#三、自定义框架" class="headerlink" title="三、自定义框架"></a>三、自定义框架</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p><img src="/2020/11/12/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/MyBatis/MyBatis/1.jpg"></p><h3 id="3-2-Configuration类"><a href="#3-2-Configuration类" class="headerlink" title="3.2 Configuration类"></a>3.2 Configuration类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义配置文件对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String driver;<span class="comment">//驱动类</span></span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//链接地址</span></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 封装Mapper的每个SQL语句</span></span><br><span class="line"><span class="comment">     * Map集合键，通过namespace+&quot;.&quot;+id 锁定唯一SQL语句</span></span><br><span class="line"><span class="comment">     * Map集合值，Mapper对象，封装结果集pojo和SQL语句</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Mapper&gt; map = <span class="keyword">new</span> HashMap&lt;String, Mapper&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Mapper&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Mapper&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get、set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Configuration&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;driver=&#x27;&quot;</span> + driver + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, url=&#x27;&quot;</span> + url + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-Mapper类"><a href="#3-3-Mapper类" class="headerlink" title="3.3 Mapper类"></a>3.3 Mapper类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义映射文件对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sql;<span class="comment">//sql语句</span></span><br><span class="line">    <span class="keyword">private</span> String resultType;<span class="comment">//返回值类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//get、set方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Mapper&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;sql=&#x27;&quot;</span> + sql + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, resultType=&#x27;&quot;</span> + resultType + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-SqlSession类"><a href="#3-4-SqlSession类" class="headerlink" title="3.4 SqlSession类"></a>3.4 SqlSession类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC的操作，框架中是必须的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSession</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//xml配置文件对象</span></span><br><span class="line">    <span class="keyword">private</span> Configuration configuration ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfiguration</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(String sqlId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建返回结果对象</span></span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过配置对象的属性加载驱动类</span></span><br><span class="line">        Class.forName(configuration.getDriver());</span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        Connection con =</span><br><span class="line">                DriverManager.getConnection(configuration.getUrl(),configuration.getUsername(),configuration.getPassword());</span><br><span class="line">        <span class="comment">// 配置文件对象，获取唯一SQL语句</span></span><br><span class="line">        String sql = configuration.getMap().get(sqlId).getSql();</span><br><span class="line">        </span><br><span class="line">        PreparedStatement pst = con.prepareStatement(sql);</span><br><span class="line">        ResultSet rs = pst.executeQuery();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从结果集中获取元数据</span></span><br><span class="line">        ResultSetMetaData metaData = rs.getMetaData();</span><br><span class="line">        <span class="comment">//集合存储列名</span></span><br><span class="line">        List&lt;String&gt; cloumnNameList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= metaData.getColumnCount(); i++)&#123;</span><br><span class="line">            cloumnNameList.add(metaData.getColumnName(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//配置文件，获取结果集封装的pojo对象的全限定名</span></span><br><span class="line">        String resultType = configuration.getMap().get(sqlId).getResultType();</span><br><span class="line">        Class clazz = Class.forName(resultType);</span><br><span class="line">        <span class="comment">//反射获取方法</span></span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//反射创建对象</span></span><br><span class="line">            obj = clazz.newInstance();</span><br><span class="line">            <span class="comment">//遍历集合，获取列名</span></span><br><span class="line">            <span class="keyword">for</span>(String columnName : cloumnNameList)&#123;</span><br><span class="line">                Object columnValue = rs.getObject(columnName);</span><br><span class="line">                System.out.println(columnValue);</span><br><span class="line">                <span class="comment">//遍历方法数组</span></span><br><span class="line">                <span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">                    <span class="comment">//取出方法名字</span></span><br><span class="line">                    String methodName = method.getName();</span><br><span class="line">                    <span class="comment">//判断列名是否与 set+方法名字相同</span></span><br><span class="line">                    <span class="keyword">if</span>(methodName.equalsIgnoreCase(<span class="string">&quot;set&quot;</span>+columnName))&#123;</span><br><span class="line">                        <span class="comment">//反射调用set方法，存储列值</span></span><br><span class="line">                        method.invoke(obj,columnValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//对象存储集合</span></span><br><span class="line">            list.add((T) obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-SqlSessionFactory类"><a href="#3-5-SqlSessionFactory类" class="headerlink" title="3.5 SqlSessionFactory类"></a>3.5 SqlSessionFactory类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  返回SqlSession接口实现类对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionImpl <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSessionImpl sqlSession = <span class="keyword">new</span> SqlSessionImpl();</span><br><span class="line">        sqlSession.setConfiguration(configuration);</span><br><span class="line">        <span class="keyword">return</span>  sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfiguration</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-SqlSessionFactoryBuilder类"><a href="#3-6-SqlSessionFactoryBuilder类" class="headerlink" title="3.6 SqlSessionFactoryBuilder类"></a>3.6 SqlSessionFactoryBuilder类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义SqlSessionFactory工厂构建者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回SqlSessionFactory工厂对象</span></span><br><span class="line"><span class="comment">     * 接收字节输入流</span></span><br><span class="line"><span class="comment">     * 用户传递流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">builder</span><span class="params">(InputStream inputStream)</span></span>&#123;</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactory();</span><br><span class="line">        <span class="comment">//获取配置文件对象</span></span><br><span class="line">        Configuration configuration = loadXmlConfig(inputStream);</span><br><span class="line">        <span class="comment">//configuration传递到SqlSessionFactory工厂</span></span><br><span class="line">        sqlSessionFactory.setConfiguration(configuration);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载全局配置文件，并封装到MyBatis的配置类中并返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream xml文件输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">loadXmlConfig</span><span class="params">(InputStream inputStream)</span></span>&#123;</span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将输入流封装为一个文档对象</span></span><br><span class="line">            Document document = saxReader.read(inputStream);</span><br><span class="line">            <span class="comment">//获取根节点</span></span><br><span class="line">            Element rootElement = document.getRootElement();</span><br><span class="line">            <span class="comment">// xpath表达式，解析property</span></span><br><span class="line">            List&lt;Element&gt; list = rootElement.selectNodes(<span class="string">&quot;//property&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(list!=<span class="keyword">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//遍历集合</span></span><br><span class="line">                <span class="keyword">for</span>(Element element : list)&#123;</span><br><span class="line">                    <span class="comment">//属性值</span></span><br><span class="line">                    String name = element.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    String value = element.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    <span class="comment">//判断name属性值，进行configuration对象封装</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="string">&quot;driver&quot;</span>.equalsIgnoreCase(name))</span><br><span class="line">                        configuration.setDriver(value);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;url&quot;</span>.equalsIgnoreCase(name))</span><br><span class="line">                        configuration.setUrl(value);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;username&quot;</span>.equalsIgnoreCase(name))</span><br><span class="line">                        configuration.setUsername(value);</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;password&quot;</span>.equalsIgnoreCase(name))</span><br><span class="line">                        configuration.setPassword(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析mapper标签，并遍历</span></span><br><span class="line">            List&lt;Element&gt; mapperList = rootElement.selectNodes(<span class="string">&quot;//mapper&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(mapperList!=<span class="keyword">null</span> &amp;&amp; mapperList.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(Element mapper : mapperList)&#123;</span><br><span class="line">                    <span class="comment">//获取xml文件路径</span></span><br><span class="line">                    String mapperPath = mapper.attributeValue(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">                    loadSqlConfig(mapperPath,configuration);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载Mapper配置文件内容，并封装到配置对象的map中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapperPath mapper映射文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configuration 配置对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadSqlConfig</span><span class="params">(String mapperPath,Configuration configuration)</span></span>&#123;</span><br><span class="line">        InputStream inputStream = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(mapperPath);</span><br><span class="line">        SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        Document document = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            document = saxReader.read(inputStream);</span><br><span class="line">            Element rootElement = document.getRootElement();</span><br><span class="line">            <span class="comment">//根标签namespace属性</span></span><br><span class="line">            String namespace = rootElement.attributeValue(<span class="string">&quot;namespace&quot;</span>);</span><br><span class="line">            List&lt;Element&gt; selectList = rootElement.selectNodes(<span class="string">&quot;//select&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(selectList!=<span class="keyword">null</span> &amp;&amp; selectList.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(Element element : selectList)&#123;</span><br><span class="line">                    <span class="comment">//标签体，获取SQL语句</span></span><br><span class="line">                    String sql = element.getText();</span><br><span class="line">                    <span class="comment">//属性resultType获取pojo对象</span></span><br><span class="line">                    String resultType = element.attributeValue(<span class="string">&quot;resultType&quot;</span>);</span><br><span class="line">                    <span class="comment">//select标签id属性</span></span><br><span class="line">                    String id = element.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                    Mapper mapper = <span class="keyword">new</span> Mapper();</span><br><span class="line">                    <span class="comment">//封装Mapper对象</span></span><br><span class="line">                    mapper.setSql(sql);</span><br><span class="line">                    mapper.setResultType(resultType);</span><br><span class="line">                    <span class="comment">//封装配置文件对象</span></span><br><span class="line">                    <span class="comment">//根标签namespace属性值+.+id属性值</span></span><br><span class="line">                    configuration.getMap().put(namespace+<span class="string">&quot;.&quot;</span>+id,mapper);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-7-mybatis-config配置文件"><a href="#3-7-mybatis-config配置文件" class="headerlink" title="3.7 mybatis-config配置文件"></a>3.7 mybatis-config配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>serverTimezone=UTC<span class="symbol">&amp;amp;</span>allowPublicKeyRetrieval=true<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;134679dinglei&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;test/PhoneMapper.xml&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-8-phoneMapper配置文件"><a href="#3-8-phoneMapper配置文件" class="headerlink" title="3.8 phoneMapper配置文件"></a>3.8 phoneMapper配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPhoneList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Phone&quot;</span>&gt;</span></span><br><span class="line">        select * from phone</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-9-测试"><a href="#3-9-测试" class="headerlink" title="3.9 测试"></a>3.9 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(<span class="string">&quot;test\\mybatis-config.xml&quot;</span>);</span><br><span class="line">        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;Phone&gt; list = sqlSession.selectList(<span class="string">&quot;test.queryPhoneList&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(list!=<span class="keyword">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Phone user : list)&#123;</span><br><span class="line">                System.out.println(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、MyBatis入门案例"><a href="#四、MyBatis入门案例" class="headerlink" title="四、MyBatis入门案例"></a>四、MyBatis入门案例</h2><p>①全局配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置MyBatis环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;134679dinglei&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②Mapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wuxie.mybatis.dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryAllUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.加载MyBatis-config.xml全局配置文件</span></span><br><span class="line">    String location = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(location);</span><br><span class="line">    <span class="comment">//2.通过配置文件创建SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.通过SqlSessionFactory获取SqlSession对象</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.通过SqlSession对象获取对应的Mapper对象</span></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.通过Mapper对象实现对数据库的操作</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.queryAllUser();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(User user:users)&#123;</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.关闭SqlSession对象</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、MyBatis中的增删改查"><a href="#五、MyBatis中的增删改查" class="headerlink" title="五、MyBatis中的增删改查"></a>五、MyBatis中的增删改查</h2><h3 id="5-1-Select标签"><a href="#5-1-Select标签" class="headerlink" title="5.1 Select标签"></a>5.1 Select标签</h3><h4 id="5-1-1-标签常见属性"><a href="#5-1-1-标签常见属性" class="headerlink" title="5.1.1 标签常见属性"></a>5.1.1 标签常见属性</h4><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">在命名空间中唯一的标识符，可以被用来引用这条语句，与对应的Mapper接口中的方法名一致。</td></tr><tr><td align="center">parameterType</td><td align="center">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td align="center">resultType</td><td align="center">期望从这条语句中返回结果的类全限定名或别名。，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td align="center">resultMap</td><td align="center">对外部 resultMap 的命名引用。结果映射是 MyBatis最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td align="center">flushCache</td><td align="center">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td></tr><tr><td align="center">useCache</td><td align="center">将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td></tr><tr><td align="center">timeout</td><td align="center">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td align="center">statementType</td><td align="center">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement(调用存储过程与函数)，默认值：PREPARED。</td></tr><tr><td align="center">databaseId</td><td align="center">如果配置了数据库厂商标识（databaseIdProvider），MyBatis  会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td></tr></tbody></table><h4 id="5-1-2-查询单个结果集"><a href="#5-1-2-查询单个结果集" class="headerlink" title="5.1.2 查询单个结果集"></a>5.1.2 查询单个结果集</h4><p>①Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"><span class="function">User <span class="title">queryUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②Mapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user.toString());</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><h4 id="5-1-3-查询多个结果集"><a href="#5-1-3-查询多个结果集" class="headerlink" title="5.1.3 查询多个结果集"></a>5.1.3 查询多个结果集</h4><p>①Mapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②Mapper接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line"></span><br><span class="line">    List<span class="tag">&lt;<span class="name">User</span>&gt;</span> queryAllUser();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果查询的结果为多个类型为resultType的对象，那么MyBatis会自动封装到list集合中</span></span><br><span class="line">List&lt;User&gt; users = mapper.queryAllUser();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(User user:users)&#123;</span><br><span class="line">    System.out.println(user.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><h3 id="5-2-增删改"><a href="#5-2-增删改" class="headerlink" title="5.2 增删改"></a>5.2 增删改</h3><h4 id="5-2-1-标签常见属性"><a href="#5-2-1-标签常见属性" class="headerlink" title="5.2.1 标签常见属性"></a>5.2.1 标签常见属性</h4><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">在命名空间中唯一的标识符，可以被用来引用这条语句，同样与Mapper接口的方法名相同。</td></tr><tr><td align="center">parameterType</td><td align="center">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。</td></tr><tr><td align="center">flushCache</td><td align="center">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td></tr><tr><td align="center">timeout</td><td align="center">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td align="center">statementType</td><td align="center">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="center">useGeneratedKeys</td><td align="center">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td align="center">keyProperty</td><td align="center">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（unset）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td align="center">keyColumn</td><td align="center">（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td align="center">databaseId</td><td align="center">如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。</td></tr></tbody></table><h4 id="5-2-2-测试"><a href="#5-2-2-测试" class="headerlink" title="5.2.2 测试"></a>5.2.2 测试</h4><p>注意：<strong>增、删、改操作需要提交事务</strong></p><p>mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user(name,gender,age) values(#&#123;name&#125;,#&#123;gender&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">    update user set name=#&#123;name&#125;,gender=#&#123;gender&#125;,age=#&#123;age&#125;</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserById&quot;</span>&gt;</span></span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mappper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoSelectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//testInsert();</span></span><br><span class="line">        <span class="comment">//testUpdate();</span></span><br><span class="line">       testDelete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = userMapper.deleteUserById(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">3</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;李世民&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">40</span>);</span><br><span class="line">        user.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = userMapper.updateUser(user);</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-传递多个参数"><a href="#5-3-传递多个参数" class="headerlink" title="5.3 传递多个参数"></a>5.3 传递多个参数</h3><p>当SQL语句需要传递多个参数时，又不至于封装到一个实体类对象时，可将多个参数以键值对的方式存入map中，然后将map作为参数传递给SQL语句。</p><p>当然也可不通过map传递，通过注解@Param实现，这样Mapper映射文件在使用参数时，就可以直接通过#{}获取即可。</p><p>案例：<strong>根据年龄和性别查询用户</strong></p><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方式，使用@Param注解对每个参数进行唯一标识</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectUserByAgeAndGender</span><span class="params">(<span class="meta">@Param(&quot;age&quot;)</span>Integer age,<span class="meta">@Param(&quot;gender&quot;)</span>String gender)</span></span>;</span><br><span class="line"><span class="comment">//第二种方式，通过Map对需要的参数进行封装</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectUserByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByAgeAndGender&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where age=#&#123;age&#125; and gender=#&#123;gender&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where age=#&#123;age&#125; and gender=#&#123;gender&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>,<span class="number">22</span>);</span><br><span class="line">    map.put(<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = userMapper.selectUserByMap(map);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = mapper.selectUserByAgeAndGender(<span class="number">22</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-与-的区别"><a href="#5-4-与-的区别" class="headerlink" title="5.4 #{}与${}的区别"></a>5.4 #{}与${}的区别</h3><p><strong>正常的使用</strong></p><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectUserByKeyword</span><span class="params">(String keyword)</span></span>;</span><br></pre></td></tr></table></figure><p>mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserByKeyword&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user where name like concat(&quot;%&quot;,#&#123;value&#125;,&quot;%&quot;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; userList = userMapper.selectUserByKeyword(<span class="string">&quot;李&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(User user:userList)&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><p><strong>注意：在编写mybatis的映射语句时，尽量采用“#{xxx}”这样的格式。若不得不使用“${xxx}”这样的参数，要手工地做好过滤工作，来防止sql注入攻击。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getNameByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">SELECT name FROM user where id = #&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getNameByUserId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">SELECT name FROM user where id = $&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当userId=34;drop table user;时</p><p>第一种方式打印的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = ?</span><br></pre></td></tr></table></figure><p>不管输入何种userID，他的sql语句都是这样的。这就得益于mybatis在底层实现时使用预编译语句。数据库在执行该语句时，直接使用预编译的语句，然后用传入的userId替换占位符？就去运行了。不存在先替换占位符？再进行编译的过程，因此SQL注入也就没有了生存的余地了。</p><p>那么mybatis是如何做到sql预编译的呢？其实框架底层使用的正是PreparedStatement类。PreparedStaement类不但能够避免SQL注入，因为已经预编译，当N次执行同一条sql语句时只需要将参数传入即可，节约了(N-1)次的编译时间，从而能够提高效率。</p><p>第二种方式打印的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">34</span>;<span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>此时就直接执行上面的SQL语句。</p><p><strong>案例</strong>：当 SQL 语句中的元数据（如表名或列名）是动态生成的时候，字符串替换将会非常有用。</p><p>常规写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where name = #&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findByName</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where email = #&#123;email&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findByEmail</span><span class="params">(<span class="meta">@Param(&quot;email&quot;)</span> String email)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其它的 &quot;findByXxx&quot; 方法</span></span><br></pre></td></tr></table></figure><p>使用${}优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user where $&#123;column&#125; = #&#123;value&#125;&quot;)</span></span><br><span class="line"><span class="function">User <span class="title">findByColumn</span><span class="params">(<span class="meta">@Param(&quot;column&quot;)</span> String column, <span class="meta">@Param(&quot;value&quot;)</span> String value)</span></span>;</span><br></pre></td></tr></table></figure><p>此时其中 <code>$&#123;column&#125;</code> 会被直接替换，而 <code>#&#123;value&#125;</code> 会使用 <code>?</code> 预处理。这样，就能完成同样的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User userOfId1 = userMapper.findByColumn(<span class="string">&quot;id&quot;</span>, <span class="number">1L</span>);</span><br><span class="line">User userOfNameKid = userMapper.findByColumn(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;kid&quot;</span>);</span><br><span class="line">User userOfEmail = userMapper.findByColumn(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;noone@nowhere.com&quot;</span>);</span><br></pre></td></tr></table></figure><p>同样的这种方式也会引起SQL注入的 。</p><h2 id="六、结果处理"><a href="#六、结果处理" class="headerlink" title="六、结果处理"></a>六、结果处理</h2><h3 id="5-1-结果映射"><a href="#5-1-结果映射" class="headerlink" title="5.1 结果映射"></a>5.1 结果映射</h3><h4 id="5-1-1-自动映射"><a href="#5-1-1-自动映射" class="headerlink" title="5.1.1 自动映射"></a>5.1.1 自动映射</h4><p>resultMap元素是 MyBatis 中最重要最强大的元素。它可以让你从 90%的 JDBC ResultSets数据提取代码中解放出来，并在一些情形下允许你进行一些          JDBC 不支持的操作。实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份resultMap能够代替实现同等功能的数千行代码。ResultMap          的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p><p>在Mybatis的结果映射当中，通过ORM关系映射，数据库中的表对应Java中的实体类，字段对应属性；当用户查询表中的一条记录时，Mybatis的结果映射，会将记录的每个字段的值赋值给与其相同名字的属性。</p><p>同样的在Java中通常使用驼峰命名法，在数据库中通常使用下滑线来分割多个单词，通过在全局配置文件中配置，可以将对应的字段与属性一一匹配。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">select id , name , pwd</span><br><span class="line">    from user</span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述语句只是简单地将所有的列映射到 <code>HashMap</code> 的键上，这由 <code>resultType</code> 属性指定。虽然在大部分情况下都够用，但是 HashMap 不是一个很好的模型。你的程序更可能会使用 JavaBean 或 POJO（Plain Old Java Objects，普通老式 Java 对象）作为模型。</p><h4 id="5-1-2-ResultMap"><a href="#5-1-2-ResultMap" class="headerlink" title="5.1.2 ResultMap"></a>5.1.2 ResultMap</h4><p>①概述</p><p><code>resultMap</code> 元素有很多子元素和一个值得深入探讨的结构。下面是<code>resultMap</code> 元素的概念视图</p><ul><li>constructor：用于在实例化类时，注入结果到构造方法中            <ul><li>idArg ：ID 参数；标记出作为 ID 的结果可以帮助提高整体性能</li><li>arg：将被注入到构造方法的一个普通结果</li></ul></li><li>id ：一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能</li><li>result ：注入到字段或 JavaBean 属性的普通结果</li><li>association ：一个复杂类型的关联；许多结果将包装成这种类型            <ul><li>嵌套结果映射： 关联可以是resultMap元素，或是对其它结果映射的引用</li></ul></li><li>collection： 一个复杂类型的集合            <ul><li>嵌套结果映射 ：集合可以是 resultMap元素，或是对其它结果映射的引用</li></ul></li><li>discriminator ：使用结果值来决定使用哪个resultMap<ul><li>case ：基于某些值的结果映射                <ul><li>嵌套结果映射 ： case 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射</li></ul></li></ul></li></ul><p>②ResultMap标签</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">当前命名空间中的一个唯一标识，用于标识一个结果映射。</td></tr><tr><td align="center">type</td><td align="center">类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。</td></tr><tr><td align="center">autoMapping</td><td align="center">如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。</td></tr></tbody></table><p>Id 和 Result 的属性</p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">property</td><td align="center">映射到列结果的字段或属性。如果 JavaBean  有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。无论是哪一种情形，你都可以使用常见的点式分隔形式进行复杂属性导航。比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。</td></tr><tr><td align="center">column</td><td align="center">数据库中的列名，或者是列的别名。一般情况下，这和传递给resultSet.getString(columnName)`方法的参数一样。</td></tr><tr><td align="center">javaType</td><td align="center">一个 Java 类的全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。</td></tr><tr><td align="center">jdbcType</td><td align="center">JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可以为空值的列指定这个类型。</td></tr><tr><td align="center">typeHandler</td><td align="center">我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。这个属性值是一个类型处理器实现类的全限定名，或者是类型别名。</td></tr></tbody></table><p>支持的 JDBC 类型</p><table><thead><tr><th align="center">BIT</th><th align="center">FLOAT</th><th align="center">CHAR</th><th align="center">TIMESTAMP</th><th align="center">OTHER</th><th align="center">UNDEFINED</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">REAL</td><td align="center">VARCHAR</td><td align="center">BINARY</td><td align="center">BLOB</td><td align="center">NVARCHAR</td></tr><tr><td align="center">SMALLINT</td><td align="center">DOUBLE</td><td align="center">LONGVARCHAR</td><td align="center">VARBINARY</td><td align="center">CLOB</td><td align="center">NCHAR</td></tr><tr><td align="center">INTEGER</td><td align="center">NUMERIC</td><td align="center">DATE</td><td align="center">LONGVARBINARY</td><td align="center">BOOLEAN</td><td align="center">NCLOB</td></tr><tr><td align="center">BIGINT</td><td align="center">DECIMAL</td><td align="center">TIME</td><td align="center">NULL</td><td align="center">CURSOR</td><td align="center">ARRAY</td></tr></tbody></table><h4 id="5-1-3-测试"><a href="#5-1-3-测试" class="headerlink" title="5.1.3 测试"></a>5.1.3 测试</h4><p>简单的使用，只是处理属性名与字段名不一致的情况</p><p>当然id和result标签还有其他的属性，比如jdbType和javaType；resultMap标签也有其他的子标签。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-一对多与多对一"><a href="#5-2-一对多与多对一" class="headerlink" title="5.2 一对多与多对一"></a>5.2 一对多与多对一</h3><h4 id="5-2-1-多对一"><a href="#5-2-1-多对一" class="headerlink" title="5.2.1 多对一"></a>5.2.1 多对一</h4><ul><li>多个学生对应一个老师</li><li>如果对于学生这边，就是一个<code>多对一</code>的现象，即从学生这边关联一个老师！</li></ul><p>①数据库环境</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`teacher`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;无邪老师&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">`tid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`fktid`</span> (<span class="string">`tid`</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> <span class="string">`fktid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`tid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`teacher`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小张&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小李&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>②Mapper接口</p><p>Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取所有学生及对应老师的信息</span></span><br><span class="line"><span class="comment">* 每个学生都有一个老师，通过数据表中的tid获取老师的信息。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>③Mapper配置文件</p><p>StudentMapper.xml</p><p>方式一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">     <span class="comment">&lt;!-- association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名。</span></span><br><span class="line"><span class="comment"> select查询，将结果映射到属性teacher上--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Teacher&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;selectTeacherForStudent&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class="line"><span class="comment">   association中column多参数配置：</span></span><br><span class="line"><span class="comment">       column=&quot;&#123;key=value,key=value&#125;&quot;</span></span><br><span class="line"><span class="comment">       其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectTeacherForStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from teacher where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select student.id sid,student.name sname,tid,teacher.name tname</span><br><span class="line">    from student join teacher on teacher.id=student.tid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>④测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">    StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; students = studentMapper.getStudents();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(Student student:students)&#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-一对多"><a href="#5-2-2-一对多" class="headerlink" title="5.2.2 一对多"></a>5.2.2 一对多</h4><p>查询一个老师的信息及其所有的学生信息。</p><p>①Mapper接口</p><p>Teacher</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">getTeacherById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②配置文件</p><p>方式一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wuxie.mybatis.dao.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     思路:</span></span><br><span class="line"><span class="comment">         1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">         2. 对查询出来的操作做结果集映射</span></span><br><span class="line"><span class="comment">             1. 集合的话，使用collection！</span></span><br><span class="line"><span class="comment">                 JavaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">                 JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">                 ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">      select s.id sid, s.name sname , t.name tname, t.id tid</span><br><span class="line">      from student s,teacher t</span><br><span class="line">      where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wuxie.mybatis.dao.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        select * from student where tid = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">    TeacherMapper teacherMapper = sqlSession.getMapper(TeacherMapper.class);</span><br><span class="line"></span><br><span class="line">    Teacher teacher = teacherMapper.getTeacherById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(teacher);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-3-总结"><a href="#5-2-3-总结" class="headerlink" title="5.2.3 总结"></a>5.2.3 总结</h4><p>1、关联-association</p><p>2、集合-collection</p><p>3、所以association是用于一对一和多对一，比如多个学生一个老师，多个员工一个部门；而collection是用于一对多的关系，一个学校多个学生等。</p><p>4、JavaType和ofType都是用来指定对象类型的</p><ul><li>JavaType是用来指定pojo中属性的类型</li><li>ofType指定的是映射到list集合属性中pojo的类型。</li></ul><p>5、对应一些关联查询可使用resultMap进行手动映射。</p><h2 id="七、动态SQL"><a href="#七、动态SQL" class="headerlink" title="七、动态SQL"></a>七、动态SQL</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL  语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis  之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3  替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><p>数据库环境</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blog`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">    <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">    <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">    <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="string">`views`</span> <span class="built_in">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addBlog</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure><p>mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Blog&quot;</span>&gt;</span></span><br><span class="line">       insert into blog(id,title,author,create_time,views)</span><br><span class="line">       values (#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">Blog blog1 = <span class="keyword">new</span> Blog();</span><br><span class="line">blog1.setId(<span class="number">1</span>);</span><br><span class="line">blog1.setTitle(<span class="string">&quot;SSM整合篇&quot;</span>);</span><br><span class="line">blog1.setAuthor(<span class="string">&quot;无邪&quot;</span>);</span><br><span class="line">blog1.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">blog1.setViews(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">mapper.addBlog(blog1);</span><br><span class="line"></span><br><span class="line">blog1.setId(<span class="number">2</span>);</span><br><span class="line">blog1.setTitle(<span class="string">&quot;Java如此简单&quot;</span>);</span><br><span class="line">mapper.addBlog(blog1);</span><br><span class="line"></span><br><span class="line">blog1.setId(<span class="number">3</span>);</span><br><span class="line">blog1.setTitle(<span class="string">&quot;Spring如此简单&quot;</span>);</span><br><span class="line">mapper.addBlog(blog1);</span><br><span class="line"></span><br><span class="line">blog1.setId(<span class="number">4</span>);</span><br><span class="line">blog1.setTitle(<span class="string">&quot;微服务如此简单&quot;</span>);</span><br><span class="line">mapper.addBlog(blog1);</span><br><span class="line"></span><br><span class="line">sqlSession.commit();</span><br><span class="line"></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><h3 id="7-2-if标签"><a href="#7-2-if标签" class="headerlink" title="7.2 if标签"></a>7.2 if标签</h3><p>①Mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogIf</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><p>②Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        根据作者名字和博客名字来查询博客！</span></span><br><span class="line"><span class="comment">        如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</span></span><br><span class="line"><span class="comment">但如何title为空时，拼接后的sql语句就会出现语法错误，但此时可在if标签前添加一个判断条件，然后每一个if标签都先写一个and关键字</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">        title like concat(&quot;%&quot;,#&#123;title&#125;,&quot;%&quot;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">        and author=#&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSession();</span><br><span class="line"></span><br><span class="line">        BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;无邪&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;简单&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.queryBlogIf(map);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Blog blog:blogs)&#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-3-choose标签"><a href="#7-3-choose标签" class="headerlink" title="7.3 choose标签"></a>7.3 choose标签</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><p>choose标签包含两个子标签：when标签（即相当于switch的case）和otherwise标签（相当于switch的default）。</p><p>还是上面的例子，但是策略变为：传入了 “title” 就按 “title” 查找，传入了 “author” 就按 “author”  查找的情形。若两者都没有传入，就返回标记为 featured 的 BLOG。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            AND title like #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">            AND author_name like #&#123;author.name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            AND featured = 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-trim、where标签"><a href="#7-4-trim、where标签" class="headerlink" title="7.4 trim、where标签"></a>7.4 trim、where标签</h3><p>前面提到的，当if标签的条件为false时，就会造成SQL语句的语法错误。</p><p>where元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where元素也会将它们去除。</p><p>此时的where关键字也需省略，即where标签提供了where关键字。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">            title like concat(&quot;%&quot;,#&#123;title&#125;,&quot;%&quot;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">            and author=#&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果where元素与你期望的不太一样，你也可以通过自定义 <strong>trim</strong> 元素来定制where 元素的功能。比如，和 where元素等价的自定义 trim 元素为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p>prefixOverrides 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有 prefixOverrides 属性中指定的内容，并且插入 prefix 属性中指定的内容。</p><h3 id="7-5-set标签"><a href="#7-5-set标签" class="headerlink" title="7.5 set标签"></a>7.5 set标签</h3><p>用于动态更新语句的类似解决方案叫做 set。</p><p>set元素可以用于动态包含需要更新的列，忽略其它不更新的列。</p><p>当参数对象中的某个属性为null时，就代表这个字段无需修改，使用set标签，也需省略关键字set</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAuthorIfNecessary&quot;</span>&gt;</span></span><br><span class="line">  update Author</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password != null&quot;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;bio != null&quot;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span></span></span><br></pre></td></tr></table></figure><h3 id="7-6-foreach标签"><a href="#7-6-foreach标签" class="headerlink" title="7.6 foreach标签"></a>7.6 foreach标签</h3><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       collection:指定输入对象中的集合属性</span></span><br><span class="line"><span class="comment">       item:每次遍历生成的对象</span></span><br><span class="line"><span class="comment">       open:开始遍历时的拼接字符串</span></span><br><span class="line"><span class="comment">       close:结束时拼接的字符串</span></span><br><span class="line"><span class="comment">       separator:遍历对象之间需要拼接的字符串</span></span><br><span class="line"><span class="comment">       select * from blog where 1=1 and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span>  <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">          id=#&#123;id&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-7-总结"><a href="#7-7-总结" class="headerlink" title="7.7 总结"></a>7.7 总结</h3><p>其实动态 sql 语句的编写往往就是一个拼接的问题，为了保证拼接准确，我们最好首先要写原生的 sql 语句出来，然后在通过 mybatis 动态sql 对照着改，防止出错。多在实践中使用才是熟练掌握它的技巧。</p><h2 id="八、全局配置文件"><a href="#八、全局配置文件" class="headerlink" title="八、全局配置文件"></a>八、全局配置文件</h2><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><p>Mybatis全局配置文件的子标签</p><ol><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置）</li><li>environment（环境变量）</li><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ol><p>注意：<strong>元素节点的顺序！在配置文件中配置的顺序不对会报错</strong> </p><h3 id="8-2-environments标签"><a href="#8-2-environments标签" class="headerlink" title="8.2 environments标签"></a>8.2 environments标签</h3><h4 id="8-2-1-概述"><a href="#8-2-1-概述" class="headerlink" title="8.2.1 概述"></a>8.2.1 概述</h4><p>案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置MyBatis的多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定）</p><p>因此可包含多个environment子标签，不同的运行环境，使用的数据连接池属性也各不相同，不如开发时和上线后使用的数据库肯定是不一样的。</p><h4 id="8-2-2-environment标签"><a href="#8-2-2-environment标签" class="headerlink" title="8.2.2 environment标签"></a>8.2.2 environment标签</h4><ul><li><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p></li><li><p>数据源是必须配置的。</p></li><li><p>有三种内建的数据源类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type&#x3D;&quot;[UNPOOLED|POOLED|JNDI]&quot;）</span><br></pre></td></tr></table></figure></li><li><p>unpooled：这个数据源的实现只是每次被请求时打开和关闭连接。</p></li><li><p><strong>pooled</strong>：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来 , 这是一种使得并发 Web 应用快速响应请求的流行处理方式。</p></li><li><p>jndi：这个数据源的实现是为了能在如 Spring 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。</p></li><li><p>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等….</p></li><li><p>详情：点击查看官方文档</p></li><li><p>这两种事务管理器类型都不需要设置任何属性。</p></li><li><p>具体的一套环境，通过设置id进行区别，id保证唯一！</p></li><li><p>子元素节点：transactionManager - [ 事务管理器 ]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 语法 --&gt;</span><br><span class="line">&lt;transactionManager type&#x3D;&quot;[ JDBC | MANAGED ]&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li><li><p>子元素节点：数据源（dataSource）</p></li></ul><h3 id="8-3-mappers标签"><a href="#8-3-mappers标签" class="headerlink" title="8.3 mappers标签"></a>8.3 mappers标签</h3><ul><li>映射器 : 定义映射SQL语句文件</li><li>既然 MyBatis 的行为其他元素已经配置完了，我们现在就要定义 SQL 映射语句了。但是首先我们需要告诉 MyBatis 到哪里去找到这些语句。Java 在自动查找这方面没有提供一个很好的方法，所以最佳的方式是告诉 MyBatis 到哪里去找映射文件。你可以使用相对于类路径的资源引用， 或完全限定资源定位符（包括 <code>file:///</code> 的 URL），或类名和包名等。映射器是MyBatis中最核心的组件之一，在MyBatis 3之前，只支持xml映射器，即：所有的SQL语句都必须在xml文件中配置。而从MyBatis 3开始，还支持接口映射器，这种映射器方式允许以Java代码的方式注解定义SQL语句，非常简洁。</li><li>总而言之，该标签的作用就是讲Mapper接口相应的Mapper配置文件一一对应。</li></ul><p><strong>引入资源方式</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">将包内的映射器接口实现全部注册为映射器</span></span><br><span class="line"><span class="comment">但是需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-4-Properties优化"><a href="#8-4-Properties优化" class="headerlink" title="8.4 Properties优化"></a>8.4 Properties优化</h3><p>数据库这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。</p><p>①建立相应的properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>②引入properties文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 也可这样使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dev_user&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;F2Fa3!33TYyg&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-5-typeAliases优化"><a href="#8-5-typeAliases优化" class="headerlink" title="8.5 typeAliases优化"></a>8.5 typeAliases优化</h3><p>类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.wuxie.entity.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当这样配置时，<code>User</code>可以用在任何使用<code>com.wuxie.entity.User</code>的地方。</p><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wuxie.entity&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每一个在包 <code>com.wuxie.entity</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p><h3 id="8-6-setting"><a href="#8-6-setting" class="headerlink" title="8.6 setting"></a>8.6 setting</h3><p>常用的设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 是否允许单个语句返回多结果集（需要数据库驱动支持）  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 指定发现自动映射目标未知列（或未知属性类型）的行为。</span></span><br><span class="line"><span class="comment">    NONE: 不做任何反应</span></span><br><span class="line"><span class="comment">    WARNING: 输出警告日志（&#x27;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#x27; 的日志等级必须设置为 WARN）</span></span><br><span class="line"><span class="comment">    FAILING: 映射失败 (抛出 SqlSessionException)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 设置超时时间，它决定数据库驱动等待数据库响应的秒数。  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。 。  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--  指定对象的哪些方法触发一次延迟加载。   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-7-其他配置"><a href="#8-7-其他配置" class="headerlink" title="8.7 其他配置"></a>8.7 其他配置</h3><p><strong>类型处理器</strong></p><ul><li>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。</li><li>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。【了解即可】</li></ul><p><strong>对象工厂</strong></p><ul><li>MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。</li><li>默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过有参构造方法来实例化。</li><li>如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现。【了解即可】</li></ul><h2 id="九、缓存"><a href="#九、缓存" class="headerlink" title="九、缓存"></a>九、缓存</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><p>1、什么是缓存 [ Cache ]？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul><p>2、为什么使用缓存？</p><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul><p>3、什么样的数据能使用缓存？</p><ul><li>经常查询并且不经常改变的数据。</li></ul><h3 id="9-2-Mybatis缓存"><a href="#9-2-Mybatis缓存" class="headerlink" title="9.2 Mybatis缓存"></a>9.2 Mybatis缓存</h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存：<code>一级缓存</code>和<code>二级缓存</code></p></li><li><ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li></ul></li></ul><p>一级缓存也叫本地缓存：</p><ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库。</li></ul><h3 id="9-3-测试"><a href="#9-3-测试" class="headerlink" title="9.3 测试"></a>9.3 测试</h3><p>①加入日志</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加入日志，输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>②测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User user = userMapper.queryUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;第二次查询&quot;</span>);</span><br><span class="line"></span><br><span class="line">User user2 = userMapper.queryUserById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user2);</span><br></pre></td></tr></table></figure><p>③效果</p><p><img src="/2020/11/12/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/MyBatis/MyBatis/2.png"></p><p>以上情况使用的是一级缓存，默认开启。</p><h3 id="9-4-一级缓存失效的情况"><a href="#9-4-一级缓存失效的情况" class="headerlink" title="9.4 一级缓存失效的情况"></a>9.4 一级缓存失效的情况</h3><p>一级缓存是SqlSession级别的缓存，是一直开启的，我们关闭不了它；</p><p>一级缓存失效情况：没有使用到当前的一级缓存，效果就是，还需要再向数据库中发起一次查询请求。</p><p>①SqlSession不同时，一级缓存会失效，同样的请求会从数据库在查询一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   SqlSession session2 = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   UserMapper mapper2 = session2.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   User user2 = mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">   session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：<strong>每个sqlSession中的缓存相互独立</strong></p><p>②SqlSession相同，查询条件不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   UserMapper mapper2 = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   User user2 = mapper2.queryUserById(<span class="number">2</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察结果：发现发送了两条SQL语句！很正常的理解</p><p>结论：<strong>当前缓存中，不存在这个数据</strong></p><p>③SqlSession相同，两次查询之间执行了增删改操作！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line"></span><br><span class="line">   HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">   map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;kuangshen&quot;</span>);</span><br><span class="line">   map.put(<span class="string">&quot;id&quot;</span>,<span class="number">4</span>);</span><br><span class="line">   mapper.updateUser(map);</span><br><span class="line"></span><br><span class="line">   User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line"></span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：<strong>因为增删改操作可能会对当前数据产生影响</strong></p><p>④SqlSession相同，手动清除一级缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line"></span><br><span class="line">   session.clearCache();<span class="comment">//手动清除缓存</span></span><br><span class="line"></span><br><span class="line">   User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line"></span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-5-二级缓存"><a href="#9-5-二级缓存" class="headerlink" title="9.5 二级缓存"></a>9.5 二级缓存</h3><h4 id="9-5-1-概述"><a href="#9-5-1-概述" class="headerlink" title="9.5.1 概述"></a>9.5.1 概述</h4><ul><li><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</p></li><li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</p></li><li><p>工作机制</p></li><li><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul></li></ul><h4 id="9-5-2-使用步骤"><a href="#9-5-2-使用步骤" class="headerlink" title="9.5.2 使用步骤"></a>9.5.2 使用步骤</h4><p>①全局配置文件中开启缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>②去每个mapper.xml中配置使用二级缓存，这个配置非常简单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag"> <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</span><br></pre></td></tr></table></figure><p>③测试，所有的实体类先实现序列化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   SqlSession session2 = MybatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   UserMapper mapper2 = session2.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">   User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   session.close();</span><br><span class="line"></span><br><span class="line">   User user2 = mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">   System.out.println(user2);</span><br><span class="line">   System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">   session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论</p></blockquote><ul><li>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据</li><li>查出的数据都会被默认先放在一级缓存中</li><li>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中</li></ul><h3 id="9-6-缓存原理图"><a href="#9-6-缓存原理图" class="headerlink" title="9.6 缓存原理图"></a>9.6 缓存原理图</h3><p><img src="/2020/11/12/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/MyBatis/MyBatis/3.jpg"></p><h3 id="9-7-EhCache"><a href="#9-7-EhCache" class="headerlink" title="9.7 EhCache"></a>9.7 EhCache</h3><p>第三方缓存实现–EhCache: 查看百度百科</p><p>Ehcache是一种广泛使用的java分布式缓存，用于通用缓存；</p><p>要在应用程序中使用Ehcache，需要引入依赖的jar包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.mybatis.caches&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在mapper.xml中使用对应的缓存即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span> = <span class="string">“org.acme.FooMapper”</span> &gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span> = <span class="string">“org.mybatis.caches.ehcache.EhcacheCache”</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写ehcache.xml文件，如果在加载时未找到/ehcache.xml资源或出现问题，则将使用默认配置。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;ehcache xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">        xsi:noNamespaceSchemaLocation=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="line">        updateCheck=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">   &lt;!--</span><br><span class="line">      diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span><br><span class="line">      user.home – 用户主目录</span><br><span class="line">      user.dir – 用户当前工作目录</span><br><span class="line">      java.io.tmpdir – 默认临时文件路径</span><br><span class="line">    --&gt;</span><br><span class="line">   &lt;diskStore path=<span class="string">&quot;./tmpdir/Tmp_EhCache&quot;</span>/&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;defaultCache</span><br><span class="line">           eternal=<span class="string">&quot;false&quot;</span></span><br><span class="line">           maxElementsInMemory=<span class="string">&quot;10000&quot;</span></span><br><span class="line">           overflowToDisk=<span class="string">&quot;false&quot;</span></span><br><span class="line">           diskPersistent=<span class="string">&quot;false&quot;</span></span><br><span class="line">           timeToIdleSeconds=<span class="string">&quot;1800&quot;</span></span><br><span class="line">           timeToLiveSeconds=<span class="string">&quot;259200&quot;</span></span><br><span class="line">           memoryStoreEvictionPolicy=<span class="string">&quot;LRU&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;cache</span><br><span class="line">           name=<span class="string">&quot;cloud_user&quot;</span></span><br><span class="line">           eternal=<span class="string">&quot;false&quot;</span></span><br><span class="line">           maxElementsInMemory=<span class="string">&quot;5000&quot;</span></span><br><span class="line">           overflowToDisk=<span class="string">&quot;false&quot;</span></span><br><span class="line">           diskPersistent=<span class="string">&quot;false&quot;</span></span><br><span class="line">           timeToIdleSeconds=<span class="string">&quot;1800&quot;</span></span><br><span class="line">           timeToLiveSeconds=<span class="string">&quot;1800&quot;</span></span><br><span class="line">           memoryStoreEvictionPolicy=<span class="string">&quot;LRU&quot;</span>/&gt;</span><br><span class="line">   &lt;!--</span><br><span class="line">      defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span><br><span class="line">    --&gt;</span><br><span class="line">   &lt;!--</span><br><span class="line">     name:缓存名称。</span><br><span class="line">     maxElementsInMemory:缓存最大数目</span><br><span class="line">     maxElementsOnDisk：硬盘最大缓存个数。</span><br><span class="line">     eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span><br><span class="line">     overflowToDisk:是否保存到磁盘，当系统当机时</span><br><span class="line">     timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=<span class="keyword">false</span>对象不是永久有效时使用，可选属性，默认值是<span class="number">0</span>，也就是可闲置时间无穷大。</span><br><span class="line">     timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=<span class="keyword">false</span>对象不是永久有效时使用，默认是<span class="number">0.</span>，也就是对象存活时间无穷大。</span><br><span class="line">     diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The <span class="keyword">default</span> value is <span class="keyword">false</span>.</span><br><span class="line">     diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是<span class="number">30</span>MB。每个Cache都应该有自己的一个缓冲区。</span><br><span class="line">     diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是<span class="number">120</span>秒。</span><br><span class="line">     memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span><br><span class="line">     clearOnFlush：内存数量最大时是否清除。</span><br><span class="line">     memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span><br><span class="line">     FIFO，first in first out，这个是大家最熟的，先进先出。</span><br><span class="line">     LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span><br><span class="line">     LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span><br><span class="line">  --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ehcache&gt;</span><br></pre></td></tr></table></figure><h2 id="十、分页"><a href="#十、分页" class="headerlink" title="十、分页"></a>十、分页</h2><h3 id="10-1-PageHelper"><a href="#10-1-PageHelper" class="headerlink" title="10.1 PageHelper"></a>10.1 PageHelper</h3><p>MyBatis分页插件，分页插件支持任何复杂的单表、多表分页。</p><p>官网地址：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p><h3 id="10-2-PageHelper的简单使用"><a href="#10-2-PageHelper的简单使用" class="headerlink" title="10.2 PageHelper的简单使用"></a>10.2 PageHelper的简单使用</h3><p>①PageHelper依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.pagehelper&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;pagehelper&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;最新版本&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>②全局配置文件配置插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用下面的方式配置参数，后面会有所有的参数介绍 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;param1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">PageHelper提供的参数很多，具体详见官网，这里简单介绍几个常用的；</span></span><br><span class="line"><span class="comment">reasonable：分页合理化参数，默认值为false。当该参数设置为 true 时，pageNum&lt;=0 时会查询第一页， pageNum&gt;pages（超过总数时），会查询最后一页。默认false 时，直接根据参数进行查询；</span></span><br><span class="line"><span class="comment">helperDialect：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。 你可以配置helperDialect属性来指定分页插件使用哪种方言；配置时，可以使用下面的缩写值oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix,h2,sqlserver2012,derby</span></span><br><span class="line"><span class="comment">特别注意：使用 SqlServer2012 数据库时，需要手动指定为 sqlserver2012，否则会使用 SqlServer2005 的方式进行分页</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reasonable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>③使用</p><p>PageHelper的使用方式有很多，不同的使用场景有不同的使用方式，这里只介绍一种。</p><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Phone&gt; <span class="title">selectAllPhones</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>mapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllPhones&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wuxie.mybatis.entity.Phone&quot;</span>&gt;</span></span><br><span class="line">    select * from phone</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PhoneMapper phoneMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneService</span><span class="params">(PhoneMapper phoneMapper)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phoneMapper=phoneMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageInfo <span class="title">getPhoneByPage</span><span class="params">(<span class="keyword">int</span> pageNum,<span class="keyword">int</span> pageSize)</span></span>&#123;</span><br><span class="line">        <span class="comment">//开启分页，第一个参数页数，第二个参数页大小</span></span><br><span class="line">        PageHelper.startPage(pageNum,pageSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询所有记录，此时分页插件会进行分页</span></span><br><span class="line">        List&lt;Phone&gt; phones = phoneMapper.selectAllPhones();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//封装分页信息，这个类封装了大量的关于分页的信息，包括分页查询结果，当前页码，总页数，总记录数等信息</span></span><br><span class="line">        PageInfo&lt;Phone&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;Phone&gt;(phones);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Reader reader = Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">SqlSession session=sqlSessionFactory.openSession();<span class="comment">//相当于开启事务</span></span><br><span class="line"></span><br><span class="line">PhoneMapper mapper = session.getMapper(PhoneMapper.class);</span><br><span class="line"></span><br><span class="line">PhoneService phoneService = <span class="keyword">new</span> PhoneService(mapper);</span><br><span class="line"></span><br><span class="line">PageInfo pageInfo = phoneService.getPhoneByPage(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(pageInfo);</span><br></pre></td></tr></table></figure><p><img src="/2020/11/12/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/MyBatis/MyBatis/4.png"></p><h2 id="十一、使用注解开发"><a href="#十一、使用注解开发" class="headerlink" title="十一、使用注解开发"></a>十一、使用注解开发</h2><h3 id="11-1-环境搭建"><a href="#11-1-环境搭建" class="headerlink" title="11.1 环境搭建"></a>11.1 环境搭建</h3><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Integer views;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get、set等方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BlogMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在mybatis-config注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/PhoneMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.wuxie.mybatis.mapper.BlogMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-2-Insert"><a href="#11-2-Insert" class="headerlink" title="11.2 @Insert"></a>11.2 @Insert</h3><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into &quot; +</span></span><br><span class="line"><span class="meta">        &quot;blog(id,title,author,create_time,views) &quot; +</span></span><br><span class="line"><span class="meta">        &quot;values(#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;) &quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addBlog</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    reader = Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">SqlSession session=sqlSessionFactory.openSession();<span class="comment">//相当于开启事务</span></span><br><span class="line"></span><br><span class="line">BlogMapper blogMapper = session.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">blogMapper.addBlog(<span class="keyword">new</span> Blog(<span class="number">5</span>,<span class="string">&quot;测试&quot;</span>,<span class="string">&quot;AmazingDL&quot;</span>,<span class="keyword">new</span> Date(),<span class="number">256</span>));</span><br><span class="line"></span><br><span class="line">session.commit();<span class="comment">//提交事务，对数据库进行增删改时一定要提交事务</span></span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure><h3 id="11-3-Update"><a href="#11-3-Update" class="headerlink" title="11.3 @Update"></a>11.3 @Update</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;&lt;script&gt;&quot; +</span></span><br><span class="line"><span class="meta">        &quot;update blog&quot; +</span></span><br><span class="line"><span class="meta">        &quot;&lt;set&gt;&quot; +</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=\&quot;title != null\&quot;&gt;title=#&#123;title&#125;,&lt;/if&gt;&quot; +</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=\&quot;author != null\&quot;&gt;author=#&#123;author&#125;,&lt;/if&gt;&quot; +</span></span><br><span class="line"><span class="meta">        &quot;&lt;if test=\&quot;views != null\&quot;&gt;views=#&#123;views&#125;,&lt;/if&gt;&quot; +</span></span><br><span class="line"><span class="meta">        &quot;&lt;/set&gt;&quot; +</span></span><br><span class="line"><span class="meta">        &quot;where id = #&#123;id&#125;&quot;+</span></span><br><span class="line"><span class="meta">        &quot;&lt;/script&gt;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateBlog</span><span class="params">(Blog blog)</span></span>;</span><br></pre></td></tr></table></figure><p>说明：这里是用来动态SQL，其他的动态SQL标签与此类似。</p><h3 id="11-4-Delete"><a href="#11-4-Delete" class="headerlink" title="11.4 @Delete"></a>11.4 @Delete</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from blog where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteBlogById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="11-5-Select"><a href="#11-5-Select" class="headerlink" title="11.5 @Select"></a>11.5 @Select</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from blog&quot;)</span></span><br><span class="line"><span class="function">Blog <span class="title">selectBlogs</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="11-6-Results"><a href="#11-6-Results" class="headerlink" title="11.6 @Results"></a>11.6 @Results</h3><p>环境搭建与上面类似，这里就不赘述了。</p><p><strong>一对多结果查询</strong></p><p>TeacherMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 说明：</span></span><br><span class="line"><span class="comment">     *  1.<span class="doctag">@Result</span>的id定义之后，可在通过<span class="doctag">@ResultMap</span>使用该结果映射</span></span><br><span class="line"><span class="comment">     *  2.这里演示的一对多查询，查询结果可以懒加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from teacher where id =#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id = &quot;teacherResult&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true, column = &quot;id&quot;, property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;name&quot;,property = &quot;name&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;id&quot;,property = &quot;students&quot;,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.wuxie.mybatis.mapper.StudentMapper.queryStudentsByTeacherId&quot;,</span></span><br><span class="line"><span class="meta">                            fetchType = FetchType.LAZY))//调用其他接口的查询方法</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">Teacher <span class="title">queryTeacherById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from teacher&quot;)</span></span><br><span class="line">    <span class="meta">@ResultMap(&quot;teacherResult&quot;)</span><span class="comment">//使用上面定义的结果映射</span></span><br><span class="line">    <span class="function">List&lt;Teacher&gt; <span class="title">queryAllTeachers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StudentMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from student where tid = #&#123;teacherId&#125;&quot;)</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">queryStudentsByTeacherId</span><span class="params">(Integer teacherId)</span></span>;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    reader = Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">SqlSession session=sqlSessionFactory.openSession();<span class="comment">//相当于开启事务</span></span><br><span class="line"></span><br><span class="line">TeacherMapper teacherMapper = session.getMapper(TeacherMapper.class);</span><br><span class="line"></span><br><span class="line">List&lt;Teacher&gt; list = teacherMapper.queryAllTeachers();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Teacher teacher : list)&#123;</span><br><span class="line">    System.out.println(teacher);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure><p><strong>一对一查询</strong></p><p>StudentMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from student where id = #&#123;studentId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">    @Result(id = true,column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;name&quot;,property = &quot;name&quot;),</span></span><br><span class="line"><span class="meta">    @Result(column = &quot;tid&quot;,property = &quot;teacher&quot;,</span></span><br><span class="line"><span class="meta">            one = @One(</span></span><br><span class="line"><span class="meta">                select = &quot;com.wuxie.mybatis.mapper.TeacherMapper.queryTeacherById&quot;,</span></span><br><span class="line"><span class="meta">                fetchType = FetchType.LAZY</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">           )</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function">Student <span class="title">queryStudentById</span><span class="params">(Integer studentId)</span></span>;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    reader = Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SqlSessionFactory sqlSessionFactory=<span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">SqlSession session=sqlSessionFactory.openSession();<span class="comment">//相当于开启事务</span></span><br><span class="line"></span><br><span class="line">StudentMapper studentMapper = session.getMapper(StudentMapper.class);</span><br><span class="line"></span><br><span class="line">Student student = studentMapper.queryStudentById(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(student);</span><br><span class="line"></span><br><span class="line">session.commit();</span><br><span class="line">session.close();</span><br></pre></td></tr></table></figure><h2 id="十二、结束语"><a href="#十二、结束语" class="headerlink" title="十二、结束语"></a>十二、结束语</h2><p>以上内容就是MyBatis的简单介绍，主要还是对数据的操作。</p><p>参考文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>]]></content>
    
    
    <summary type="html">什么是框架？什么优势ORM框架？MyBatis就是一个很好的例子，从基本的增删改查到复杂的结果映射处理，都是MyBatis提供给我们强大的功能。</summary>
    
    
    
    <category term="Java" scheme="https://amazingdl.github.io/categories/Java/"/>
    
    
    <category term="框架" scheme="https://amazingdl.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据结构(三)——二叉树</title>
    <link href="https://amazingdl.github.io/2020/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://amazingdl.github.io/2020/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-11-06T23:20:47.000Z</published>
    <updated>2020-11-12T08:11:45.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、树形结构"><a href="#一、树形结构" class="headerlink" title="一、树形结构"></a>一、树形结构</h2><blockquote><p>什么是树？树是n(n&gt;=0)个结点的有限集！</p></blockquote><p>在任意一个非空树中，有以下特点：</p><ol><li>有且仅有一个特定的称为根的结点；</li><li>当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集，其中每一个集合本身又是一颗数，并且称为根的子树。</li></ol><p>树的结构示意图如下：<br><img src="/2020/11/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E5%8F%89%E6%A0%91/binaryTree01.jpg"></p><blockquote><p>相关概念</p></blockquote><p><strong>结点</strong>：树的结点包含一个数据元素及若干个指向其子树的分支，结点拥有的子树数称为结点的度，如上图中的A结点的度为9，B结点的度为3；</p><p>其中度为0的结点称为<strong>叶子结点</strong>，度不为0的称为<strong>分支结点</strong>；</p><p>树的度是树内各结点的度的最大值，如上图树的度为9。</p><p>在树中，结点之间的关系类似于人类族谱之间的关系。</p><p>如B、C、D结点称为A结点的孩子；B结点称为E、F、G结点的双亲。</p><p>E、F、G结点之间互称兄弟。</p><p>一个结点的祖先节点是从根结点到该结点所经分支上的所有结点。</p><p>反之，以某结点为根的子树中的任一结点都称为该结点的子孙。</p><blockquote><p>森林</p></blockquote><p>森林是m(m&gt;=0)棵互不相交的树的集合，对于树的每个结点而言，其子树的集合即为森林。</p><h2 id="二、二叉树的简单介绍"><a href="#二、二叉树的简单介绍" class="headerlink" title="二、二叉树的简单介绍"></a>二、二叉树的简单介绍</h2><p>二叉树是另一种树形结构，它的特点是每个结点至多只有两棵子树，并且，二叉树的子树有左右之分，其次序不能任意颠倒。</p><p>二叉树的链式存储结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeNode</span></span>&#123;</span><br><span class="line">    Object data;</span><br><span class="line">    BinaryTreeNode left;</span><br><span class="line">    BinaryTreeNode right;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryTreeNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BinaryTreeNode</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BinaryTreeNode</span><span class="params">(Object data, BinaryTreeNode left, BinaryTreeNode right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line"><span class="keyword">this</span>.right = right;</span><br><span class="line"><span class="keyword">this</span>.left = left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉树的遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的二叉树工具类，包括二叉树的遍历和重建</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AmazingDL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序遍历二叉树，根左右</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderTraverse</span><span class="params">(BinaryTreeNode node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.print(node.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">preOrderTraverse(node.left);</span><br><span class="line">preOrderTraverse(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中序遍历二叉树，左根右</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">middleOrderTraverse</span><span class="params">(BinaryTreeNode node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">middleOrderTraverse(node.left);</span><br><span class="line">System.out.print(node.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">middleOrderTraverse(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后序遍历二叉树，左右根</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nextOrderTraverse</span><span class="params">(BinaryTreeNode node)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nextOrderTraverse(node.left);</span><br><span class="line">nextOrderTraverse(node.right);</span><br><span class="line">System.out.print(node.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryTreeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BinaryTreeNode root = buildSimpleBinaryTree();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;先序遍历序列&quot;</span>); </span><br><span class="line">BinaryTreeUtil.preOrderTraverse(root);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;中序遍历序列&quot;</span>); </span><br><span class="line">BinaryTreeUtil.middleOrderTraverse(root);</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;后序遍历序列&quot;</span>); </span><br><span class="line">BinaryTreeUtil.nextOrderTraverse(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BinaryTreeNode <span class="title">buildSimpleBinaryTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BinaryTreeNode root = <span class="keyword">new</span> BinaryTreeNode();</span><br><span class="line">root.data=<span class="string">&quot;A&quot;</span>;</span><br><span class="line">root.left = <span class="keyword">new</span> BinaryTreeNode(<span class="string">&quot;B&quot;</span>,<span class="keyword">new</span> BinaryTreeNode(<span class="string">&quot;D&quot;</span>,<span class="keyword">new</span> BinaryTreeNode(<span class="string">&quot;G&quot;</span>),<span class="keyword">new</span> BinaryTreeNode(<span class="string">&quot;H&quot;</span>)),<span class="keyword">new</span> BinaryTreeNode(<span class="string">&quot;F&quot;</span>));</span><br><span class="line">root.right = <span class="keyword">new</span> BinaryTreeNode(<span class="string">&quot;C&quot;</span>,<span class="keyword">null</span>,<span class="keyword">new</span> BinaryTreeNode(<span class="string">&quot;I&quot;</span>,<span class="keyword">new</span> BinaryTreeNode(<span class="string">&quot;J&quot;</span>),<span class="keyword">new</span> BinaryTreeNode(<span class="string">&quot;K&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重建二叉树：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重构二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BinaryTreeNode <span class="title">rebuildBinaryTree</span><span class="params">(<span class="keyword">int</span>[] preArray,<span class="keyword">int</span>[] middleArray)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preArray==<span class="keyword">null</span>||middleArray==<span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取rootValue在middleArray的下标</span></span><br><span class="line">    <span class="keyword">int</span> rootIndexInMiddleArray = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//左子树节点的数量</span></span><br><span class="line">    <span class="keyword">int</span> leftCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//右子树节点的数量</span></span><br><span class="line">    <span class="keyword">int</span> rightCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取根节点在中序遍历序列的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;middleArray.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(preArray[<span class="number">0</span>]==middleArray[i]) &#123;</span><br><span class="line">            rootIndexInMiddleArray = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        leftCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rightCount = middleArray.length-leftCount-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取左子树的前序遍历序列和中序遍历序列</span></span><br><span class="line">    <span class="keyword">int</span>[] leftInPreArray = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span>[] leftInMiddleArray = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(rootIndexInMiddleArray!=<span class="number">0</span>) &#123;</span><br><span class="line">        leftInPreArray = Arrays.copyOfRange(preArray, <span class="number">1</span> ,leftCount+<span class="number">1</span>);<span class="comment">//范围复制数组，前闭后开</span></span><br><span class="line">        leftInMiddleArray = Arrays.copyOfRange(middleArray,<span class="number">0</span>, rootIndexInMiddleArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取右子树的前序遍历序列和中序遍历序列</span></span><br><span class="line">    <span class="keyword">int</span>[] rightInPreArray = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span>[] rightInMiddleArray = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(rootIndexInMiddleArray!=middleArray.length-<span class="number">1</span>) &#123;</span><br><span class="line">        rightInPreArray = Arrays.copyOfRange(preArray, leftCount+<span class="number">1</span>, preArray.length);</span><br><span class="line">        rightInMiddleArray = Arrays.copyOfRange(middleArray, rootIndexInMiddleArray+<span class="number">1</span>, middleArray.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建根节点，根本思想就是将一个树分为若干个子树去重构，当一个结点构成一颗树时，就返回</span></span><br><span class="line">    BinaryTreeNode root = <span class="keyword">new</span> BinaryTreeNode();</span><br><span class="line">    root.value = preArray[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(leftInMiddleArray==<span class="keyword">null</span> &amp;&amp; rightInMiddleArray == <span class="keyword">null</span>) &#123;</span><br><span class="line">        root.leftChild = <span class="keyword">null</span>;</span><br><span class="line">        root.rightChild = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(leftInMiddleArray==<span class="keyword">null</span>) &#123;</span><br><span class="line">        root.leftChild = <span class="keyword">null</span>;</span><br><span class="line">        root.rightChild = rebuildBinaryTree(rightInPreArray,rightInMiddleArray);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(rightInMiddleArray == <span class="keyword">null</span>) &#123;</span><br><span class="line">        root.rightChild = <span class="keyword">null</span>;</span><br><span class="line">        root.leftChild = rebuildBinaryTree(leftInPreArray,leftInMiddleArray);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        root.leftChild = rebuildBinaryTree(leftInPreArray,leftInMiddleArray);</span><br><span class="line">        root.rightChild = rebuildBinaryTree(rightInPreArray,rightInMiddleArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、赫夫曼树及其应用"><a href="#三、赫夫曼树及其应用" class="headerlink" title="三、赫夫曼树及其应用"></a>三、赫夫曼树及其应用</h2>]]></content>
    
    
    <summary type="html">树形结构是一类重要的非线性结构。其中以树和二叉树最为常用，直观来看，树是以分支关系定义的层次结构。树结构在客观世界中广泛存在，比如各种社会组织结构和人类社会的族谱等都可以用树来形象表示。本篇博客主要是关于二叉树的简单使用。</summary>
    
    
    
    <category term="数据结构" scheme="https://amazingdl.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://amazingdl.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>消息队列之RabbitMQ的简单使用</title>
    <link href="https://amazingdl.github.io/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/"/>
    <id>https://amazingdl.github.io/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/</id>
    <published>2020-11-01T06:27:46.000Z</published>
    <updated>2020-11-12T12:21:06.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、消息队列概述"><a href="#一、消息队列概述" class="headerlink" title="一、消息队列概述"></a>一、消息队列概述</h2><p>MQ全称为Message Queue，消息队列是应用程序和应用程序之间的通信方法。</p><p>RabbitMQ是一个Erlang开发的AMQP（Advanced Message Queuing Protocol ）的开源实现。</p><h3 id="1-1-为什么使用MQ"><a href="#1-1-为什么使用MQ" class="headerlink" title="1.1 为什么使用MQ"></a>1.1 为什么使用MQ</h3><p>在项目中，可将一些无需即时返回且耗时的操作提取出来，进行异步处理，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而提高了系统的吞吐量。</p><p>开发中消息队列通常有如下应用场景：</p><p>**(1) 异步提速: **</p><p>​    任务异步处理将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。</p><p>**(2) 应用解耦: **</p><p>​    应用程序解耦合，MQ充当中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合</p><p>**(3) 削峰填谷: **</p><p>​    在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见；如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用MQ能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</p><p>**(4) 可恢复性: **</p><p>​    系统的一部分组件失效时，不会影响到整个系统。MQ降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</p><p><strong>(5) 排序保证：</strong></p><p>​     消息队列可以控制数据处理的顺序，因为消息队列本身使用的是队列这个数据结构，<code>FIFO</code>(先进选出)，在一些场景数据处理的顺序很重要，比如商品下单顺序等。</p><h3 id="1-2-消息队列产品"><a href="#1-2-消息队列产品" class="headerlink" title="1.2. 消息队列产品"></a>1.2. 消息队列产品</h3><p>市场上常见的消息队列有如下：</p><ul><li>ActiveMQ：基于JMS实现, 比较均衡, 不是最快的, 也不是最稳定的.</li><li>ZeroMQ：基于C语言开发, 目前最好的队列系统.</li><li>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好, 数据基本上不会丢失</li><li>RocketMQ：基于JMS，阿里巴巴产品, 目前已经捐献给apahce, 还在孵化器中孵化.</li><li>Kafka：类似MQ的产品；分布式消息系统，高吞吐量, 目前最快的消息服务器, 不保证数据完整性.</li></ul><h3 id="1-3-AMQP-和-JMS"><a href="#1-3-AMQP-和-JMS" class="headerlink" title="1.3. AMQP 和 JMS"></a>1.3. AMQP 和 JMS</h3><blockquote><p>Dubbo协议：Dubbo 缺省协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。</p><p>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。</p><p>AMQP协议：即Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p></blockquote><p>MQ是消息通信的模型；实现MQ的大致有两种主流方式：AMQP、JMS。</p><h4 id="1-3-1-AMQP"><a href="#1-3-1-AMQP" class="headerlink" title="1.3.1. AMQP"></a>1.3.1. AMQP</h4><p>AMQP，即Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。</p><h4 id="1-3-2-JMS"><a href="#1-3-2-JMS" class="headerlink" title="1.3.2. JMS"></a>1.3.2. JMS</h4><p>JMS即Java消息服务（JavaMessage Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p><h4 id="1-3-3-AMQP-与-JMS-区别"><a href="#1-3-3-AMQP-与-JMS-区别" class="headerlink" title="1.3.3. AMQP 与 JMS 区别"></a>1.3.3. AMQP 与 JMS 区别</h4><p>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。JMS规定了两种消息模式；而AMQP的消息模式更加丰富.</p><table><thead><tr><th></th><th>JMS</th><th align="center">AMQP</th></tr></thead><tbody><tr><td>定义</td><td>Java api</td><td align="center">Wire-protocol</td></tr><tr><td>跨语言</td><td>否</td><td align="center">是</td></tr><tr><td>跨平台</td><td>否</td><td align="center">是</td></tr></tbody></table><h3 id="1-4-RabbitMQ"><a href="#1-4-RabbitMQ" class="headerlink" title="1.4. RabbitMQ"></a>1.4. RabbitMQ</h3><p>RabbitMQ是由erlang语言开发，基于AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列，它是一种应用程序之间的通信方法，<strong>消息队列在分布式系统开发中应用非常广泛。</strong></p><p>RabbitMQ官方地址：<a href="http://www.rabbitmq.com/">http://www.rabbitmq.com/</a></p><p>RabbitMQ提供了6种模式：Hello Word简单模式，work工作模式，Publish/Subscribe发布与订阅模式，Routing路由模式，Topics主题模式(通配符模式)，RPC远程调用模式（远程调用，不太算MQ；不作介绍）</p><p>官网对应模式介绍：<a href="https://www.rabbitmq.com/getstarted.html">https://www.rabbitmq.com/getstarted.html</a></p><p><strong>应用场景：</strong></p><p><strong>1、双十一商品秒杀/抢票功能实现</strong></p><p>我们在双11的时候，当我们凌晨大量的秒杀和抢购商品，然后去结算的时候，就会发现，界面会提醒我们，让我们稍等，以及一些友好的图片文字提醒。而不是像前几年的时代，动不动就页面卡死，报错等来呈现给用户。</p><p><strong>2、积分兑换(积分可用于多平台)</strong></p><p>积分兑换模块，有一个公司多个部门都要用到这个模块，这时候就可以通过消息队列解耦这个特性来实现。 各部门系统做各部门的事，但是他们都可以用这个积分系统进行商品的兑换等。其他模块与积分模块完全解耦。</p><p><strong>3、大平台用户注册</strong></p><p>发送邮件、用户大数据分析操作等 基于同步变异步功能实现</p><p>用户注册真实操作步骤：</p><ol><li>用户注册选择的兴趣标签，根据用户的属性，行为进行用户分析，计算出推荐内容</li><li>注册后可能需要发送邮件给用户</li><li>发送短信给用户</li><li>发送给用户指南的系统通知</li><li>…等等</li></ol><p><strong>正常情况注册，不出现高并发，假如有大量的用户注册，发生了高并发，就会出现如下情况</strong>：</p><p>邮件接口承受不住，或是分析信息时的大量计算使 cpu 满载，这将会出现虽然用户数据记录很快的添加到数据库中了，但是却卡在发邮件或分析信息时的情况，导致请求的响应时间大幅增长，甚至出现超时，这就有点不划算了。面对这种情况一般也是将这些操作放入消息队列（生产者消费者模型），消息队列慢慢的进行处理，同时可以很快的完成注册请求，不会影响用户使用其他功能。</p><h3 id="1-5-相关定义："><a href="#1-5-相关定义：" class="headerlink" title="1.5 相关定义："></a>1.5 相关定义：</h3><p>1.Message</p><p>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。</p><p>2.Publisher</p><p>消息的生产者，也是一个向交换器发布消息的客户端应用程序。</p><p>3.Exchange </p><p>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。<br>4.Binding </p><p>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。<br>5.Queue</p><p>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。 </p><p>6.Connection </p><p>网络连接，比如一个TCP连接。 </p><p>7.Channel </p><p>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内地虚拟连接，AMQP  命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP  都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</p><p>8.Consumer </p><p>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</p><p>9.Virtual Host </p><p>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个  mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP  概念的基础，必须在连接时指定，RabbitMQ 默认的 vhost 是 / 。 </p><p>10.Broker </p><p>表示消息队列服务器实体。</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq01.png"></p><p>==<strong>由Exchange、Queue、RoutingKey三个才能决定一个消息从Exchange到Queue的唯一的线路。</strong>==</p><h2 id="二、Spring-Boot整合RabbitMQ"><a href="#二、Spring-Boot整合RabbitMQ" class="headerlink" title="二、Spring Boot整合RabbitMQ"></a>二、Spring Boot整合RabbitMQ</h2><p>在spring boot项目中，只需要引入start-amqp起步依赖，即可整合RabbitMQ成功；我们基于SpringBoot封装的RabbitTemplate模板对象，可以非常方便的发送消息，接收消息(使用注解)。</p><p>amqp的官方GitHub地址：<a href="https://github.com/spring-projects/spring-amqp">https://github.com/spring-projects/spring-amqp</a></p><p>一般在开发过程中，我们有两个角色：</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq02.png"></p><p><strong>相关依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--amqp协议的起步依赖坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>相关配置</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rabbitmq主机地址和端口号</span></span><br><span class="line"><span class="meta">spring.rabbitmq.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="meta">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户和密码</span></span><br><span class="line"><span class="meta">spring.rabbitmq.username</span>=<span class="string">wuxie</span></span><br><span class="line"><span class="meta">spring.rabbitmq.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置虚拟主机，作用把消息队列进行权限划分，不同部门拥有同一个消息队列的不同虚拟主机</span></span><br><span class="line"><span class="meta">spring.rabbitmq.virtual-host</span>=<span class="string">/amazingdl</span></span><br></pre></td></tr></table></figure><blockquote><p>常见队列、交换机并绑定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过Java代码创建交换机、消息队列，并绑定交换机与消息队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建消息队列</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">orderQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第一个参数：消息队列名</span></span><br><span class="line"><span class="comment">         * 第二个参数：是否持久化</span></span><br><span class="line"><span class="comment">         * 第三个参数：是否独占</span></span><br><span class="line"><span class="comment">         * 第四个参数：是否自动删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;order.test&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建交换机，路由交换机，这里还有其他类型的交换机，不同的工作模式有不同交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">orderExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第一个参数：交换机名成</span></span><br><span class="line"><span class="comment">         * 第二个参数：是否持久化</span></span><br><span class="line"><span class="comment">         * 第三个参数：是否自动删除</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">&quot;order_test_exchange&quot;</span>,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换机与消息队列的绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">exchangeBindingQueue</span><span class="params">(Queue orderQueue,DirectExchange orderExchange)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BindingBuilder.bind(队列对象).to(交换机对象).with(路由键)</span></span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(orderQueue).to(orderExchange).with(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、消息队列的五种工作模式"><a href="#三、消息队列的五种工作模式" class="headerlink" title="三、消息队列的五种工作模式"></a>三、消息队列的五种工作模式</h2><h3 id="3-1-简单模式"><a href="#3-1-简单模式" class="headerlink" title="3.1 简单模式"></a>3.1 简单模式</h3><blockquote><p>什么是简单模式</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq03.png"></p><p>在上图的模型中，有以下概念：</p><p>**P：生产者: **  也就是要发送消息的程序</p><p><strong>C：消费者：</strong>消息的接受者，会一直等待消息到来。</p><p><strong>queue：</strong>消息队列，图中红色部分。可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。</p><blockquote><p>创建simple_queue消息队列，可通过图形化界面操作，也可通过Java代码</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq04.png"></p><blockquote><p>生产者发送消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数一：消息队列的名称</span></span><br><span class="line"><span class="comment">         * 参数二：消息队列的内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;simple_queue&quot;</span>,<span class="string">&quot;你好，这是消息队列提供者!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者接收消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单模式下的监听者，监听队列中是否有消息，如果有消息，触发接收方法，打印消息</span></span><br><span class="line"><span class="comment"> * 注入Spring容器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple_queue&quot;)</span><span class="comment">//当前监听器的监听队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleConsumerListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">simpleConsumerHandler</span><span class="params">(String msg)</span></span>&#123;<span class="comment">//参数为消息的内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;监听的内容：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-工作队列模式"><a href="#3-2-工作队列模式" class="headerlink" title="3.2 工作队列模式"></a>3.2 工作队列模式</h3><p>Work Queues与入门程序的简单模式相比，多了一个或一些消费端，多个消费端共同消费同一个队列中的消息。<strong>应用场景：对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度。</strong></p><p><strong>在一个队列中如果有多个消费者，那么消费者之间对于同一个消息的关系是竞争的关系。</strong></p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq05.png"></p><blockquote><p>创建work_queue队列</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq06.png"></p><blockquote><p>生产者发送消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工作模式消息队列，一个生产者，多个消费者竞争消费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkQueueTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            rabbitTemplate.convertAndSend(<span class="string">&quot;work_queue&quot;</span>,<span class="string">&quot;这是第&quot;</span>+i+<span class="string">&quot;条消息&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者接收消</p></blockquote><p>第一个消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;work_queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkConsumerListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听消息的回调方法，处理监听消息</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgHandler</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;msgHandler【1】接收到的消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;work_queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkConsumerListener2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgHandler2</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;msgHandler【2】接收到的消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-发布、订阅模式"><a href="#3-3-发布、订阅模式" class="headerlink" title="3.3 发布、订阅模式"></a>3.3 发布、订阅模式</h3><p>发布订阅模式： </p><p>​    1、每个消费者监听自己的队列。 </p><p>​    2、生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息</p><p>【广播消息：一次性将消息发送给所有消费者，每个消费者收到消息均一致】</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq07.png"></p><blockquote><p>创建两个队列</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq08.png"></p><blockquote><p>创建交换机</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq09.png"></p><blockquote><p>绑定交换机</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq10.png"></p><blockquote><p>生产者发送消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布订阅模式</span></span><br><span class="line"><span class="comment"> * 一个生产者，多个消费者，每个消费者接收的内容相同，发布订阅模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutQueueTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数一：设置交换机</span></span><br><span class="line"><span class="comment">     * 参数二：设置路由键，广播模式默认不设置路由键，为空字符串</span></span><br><span class="line"><span class="comment">     * 参数三：设置消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;fanout_exchange&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;你好，这是广播模式发布者&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者接收消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布订阅模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout_queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumerListener1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听消息的回调方法，处理监听消息</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgHandler</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;msgHandler【1】接收到的消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout_queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumerListener2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听消息的回调方法，处理监听消息</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgHandler</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;msgHandler【2】接收到的消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-路由模式"><a href="#3-4-路由模式" class="headerlink" title="3.4 路由模式"></a>3.4 路由模式</h3><p>路由模式特点：</p><p>队列与交换机的绑定，不能是任意绑定了，而是要指定一个RoutingKey（路由key）消息的发送方在向 Exchange发送消息时，也必须指定消息的RoutingKey。Exchange不再把消息交给每一个绑定的队列，而是根据消息的Routing Key进行判断，只有队列的Routingkey与消息的Routing key完全一致，才会接收到消息。</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq11.png"></p><p>图解：</p><p>P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。</p><p>X：Exchange（交换机），接收生产者的消息，然后把消息递交给与routing key完全匹配的队列</p><p>C1：消费者，其所在队列指定了需要routing key 为 error 的消息</p><p>C2：消费者，其所在队列指定了需要routing key 为 info、error、warning 的消息</p><p>【有选择性的接收消息】</p><blockquote><p>创建routing_queue1和routing_queue2队列</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq12.png"></p><blockquote><p>创建交换机routing_exchange</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq13.png"></p><blockquote><p>绑定消息队列</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq14.png"></p><blockquote><p>生产者发送消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 路由模式</span></span><br><span class="line"><span class="comment"> * 一个生产者，多个消费者，每个消费者通过路由键指定接收消息的队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingQueueTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数一：设置交换机</span></span><br><span class="line"><span class="comment">     * 参数二：设置路由键，广播模式默认不设置路由键，为空字符串</span></span><br><span class="line"><span class="comment">     * 参数三：设置消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;routing_exchange&quot;</span>,<span class="string">&quot;info&quot;</span>,<span class="string">&quot;你好，这是路由模式发布者，info信息&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;routing_exchange&quot;</span>,<span class="string">&quot;error&quot;</span>,<span class="string">&quot;你好，这是路由模式发布者，error信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者接收消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布订阅模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;routing_queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingConsumerListener1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听消息的回调方法，处理监听消息</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgHandler</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;msgHandler【1】接收到的消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;routing_queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoutingConsumerListener2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听消息的回调方法，处理监听消息</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgHandler</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;msgHandler【2】接收到的消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据路由键，交换机将消息发送到不同的队列，然后每个队列对应的消费者去消费。</p><h3 id="3-5-通配符模式"><a href="#3-5-通配符模式" class="headerlink" title="3.5 通配符模式"></a>3.5 通配符模式</h3><p><code>Topic</code>类型与<code>Direct</code>相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key的时候使用通配符！</p><p><code>Routingkey</code>: 一般都是有一个或多个单词组成，多个单词之间以”.”分割，例如：<code>item.insert</code></p><p>通配符规则：</p><p>#：匹配一个或多个词，多个词用点号分隔</p><p>*：匹配不多不少恰好1个词</p><p>举例：</p><p><strong>item.#：</strong> 能够匹配<code>item.insert.abc.bbc</code>或者<code>item.insert</code></p><p>*<em>item.<em>：</em></em>只能匹配<code>item.insert</code></p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq15.png"></p><blockquote><p>创建队列topic_queue1和topic_queue2</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq16.png"></p><blockquote><p>创建交换机</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq17.png"></p><blockquote><p>绑定消息队列</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq18.png"></p><blockquote><p>生产者发送消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通配符模式</span></span><br><span class="line"><span class="comment"> * 一个生产者，多个消费者，每个消费者通过路由键指定接收消息的队列，路由键是有通配符规定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicQueueTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数一：设置交换机</span></span><br><span class="line"><span class="comment">     * 参数二：设置路由键，广播模式默认不设置路由键，为空字符串</span></span><br><span class="line"><span class="comment">     * 参数三：设置消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;topic_exchange&quot;</span>,<span class="string">&quot;item.insert.abc&quot;</span>,<span class="string">&quot;你好，这是路由模式发布者，item.*接收信息&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;topic_exchange&quot;</span>,<span class="string">&quot;item.insert&quot;</span>,<span class="string">&quot;你好，这是路由模式发布者，item.#接收信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>消费者接收消息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发布订阅模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic_queue1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConsumerListener1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听消息的回调方法，处理监听消息</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgHandler</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;msgHandler【1】接收到的消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;topic_queue2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConsumerListener2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听消息的回调方法，处理监听消息</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgHandler</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;msgHandler【2】接收到的消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据路由通配符的匹配规则，不同的消息会进入不同的队列，然后由绑定该队列的消费者接收。</p><h3 id="3-6-总结"><a href="#3-6-总结" class="headerlink" title="3.6 总结"></a>3.6 总结</h3><p>工作模式：</p><p>**1、简单模式 HelloWorld : ** 一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p><p><strong>2、工作队列模式 Work Queue:</strong>  一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p><p><strong>3、发布订阅模式 Publish/subscribe: **需要设置类型为</strong>==fanout==**的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息广播发送到绑定的队列</p><p><strong>4、路由模式 Routing: ** 需要设置类型为</strong>==direct==**的交换机，交换机和队列进行绑定，并且指定routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><p><strong>5、通配符模式 Topic: ** 需要设置类型为==**topic</strong>==的交换机，交换机和队列进行绑定，并且指定通配符方式的routing key，当发送消息到交换机后，交换机会根据routing key将消息发送到对应的队列</p><h2 id="四、消息队列的高级特性"><a href="#四、消息队列的高级特性" class="headerlink" title="四、消息队列的高级特性"></a>四、消息队列的高级特性</h2><h3 id="4-1-生产者确认"><a href="#4-1-生产者确认" class="headerlink" title="4.1 生产者确认"></a>4.1 生产者确认</h3><p>在生产者向消息队列发送消息时，由于各种原因，可能会导致生产者向消息队列发送消息失败。</p><p>比如：</p><ul><li>第一，生产者发送消息给MQ失败，消息丢失；</li><li>第二，交换机路由到队列失败，路由键写错；</li></ul><p>在使用 RabbitMQ 的时候，作为消息发送方希望杜绝任何消息丢失或者投递失败场景。RabbitMQ 为我们提供了两种方式用来控制消息的投递可靠性模式。</p><ul><li><p>confirm 确认模式</p></li><li><p>return  退回模式</p></li></ul><p>rabbitmq 整个消息投递的路径为：</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq19.png"></p><ul><li><p>消息从生产者(producer)发送消息到交换机(exchange)，不论是否成功，都会执行一个确认回调方法confirmCallback 。</p></li><li><p>消息从交换机(exchange)到消息队列( queue )投递失败则会执行一个返回回调方法 returnCallback 。</p></li></ul><p>我们将利用这两个 callback 控制消息的可靠性投递</p><blockquote><p>确认模式</p></blockquote><p><strong>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当然这里也包含了一些其他相关的配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启生产者确认模式：(confirm),投递到交换机，不论失败或者成功都回调</span></span><br><span class="line"><span class="meta">spring.rabbitmq.publisher-confirms</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在2.2.0及之后该属性过期使用spring.rabbitmq.publisher-confirm-type属性配置代替</span></span><br><span class="line"><span class="comment"># 选择确认类型为交互</span></span><br><span class="line"><span class="comment"># NONE值是禁用发布确认模式，是默认值</span></span><br><span class="line"><span class="comment"># CORRELATED值是发布消息成功到交换器后会触发回调方法，如1示例</span></span><br><span class="line"><span class="comment"># SIMPLE值经测试有两种效果，其一效果和CORRELATED值一样会触发回调方法，其二在发布消息成功后使用rabbitTemplate调用waitForConfirms或waitForConfirmsOrDie方法等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是waitForConfirmsOrDie方法如果返回false则会关闭channel，则接下来无法发送消息到broker;</span></span><br><span class="line"><span class="meta">spring.rabbitmq.publisher-confirm-type</span>=<span class="string">correlated</span></span><br></pre></td></tr></table></figure><p><strong>确认回调类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者发送消息回调类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfirmCallback</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前类的对象创建完之后，执行的方法，post代表后，pre代表前</span></span><br><span class="line"><span class="comment">     * 然后将当前对象设置给rabbitTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置确认回调方法</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>::confirm);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确认回调方法，为了确定消息进入了交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> correlationData 封装消息相关的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ack 消息是否发送成功，true代表发送成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause 失败的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息成功进入了交互机&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息失败，消息原因：&quot;</span>+cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>发送消息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向消息队列发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> routingKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/direct/sendMsg&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMsg</span><span class="params">(String exchange,String routingKey,String msg)</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(exchange,routingKey,msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;消息已投递&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的消费者接收消息与前面相同</p><blockquote><p>回退模式</p></blockquote><p><strong>配置文件</strong></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启消息回退模式</span></span><br><span class="line"><span class="meta">spring.rabbitmq.publisher-returns</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p><strong>回调类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者发送消息回调类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageConfirmCallback</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span>,<span class="title">RabbitTemplate</span>.<span class="title">ReturnCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前类的对象创建完之后，执行的方法，post代表后，pre代表前</span></span><br><span class="line"><span class="comment">     * 然后将当前对象设置给rabbitTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置确认回调方法</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>::confirm);</span><br><span class="line">        <span class="comment">//设置回退回调方法</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="keyword">this</span>::returnedMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确认回调方法，为了确定消息进入了交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> correlationData 封装消息相关的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ack 消息是否发送成功，true代表发送成功</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause 失败的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ack)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息成功进入了交互机&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息失败，消息原因：&quot;</span>+cause);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调回调方法，为了确定消息进入了队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 发送的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replyCode 错误状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replyText 错误原因</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 交换机名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> routingKey 路由名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息失败，交互机路由队列错误&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息：&quot;</span>+message);</span><br><span class="line">        System.out.println(<span class="string">&quot;错误状态码：&quot;</span>+replyCode);</span><br><span class="line">        System.out.println(<span class="string">&quot;错误信息：&quot;</span>+replyText);</span><br><span class="line">        System.out.println(<span class="string">&quot;交互机：&quot;</span>+exchange);</span><br><span class="line">        System.out.println(<span class="string">&quot;路由键：&quot;</span>+routingKey);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时发送消息与接收消息与确认模式相同。</p><p>说明：</p><p>确认模式：</p><ul><li>设置publisher-confirms=”true”或 spring.rabbitmq.publisher-confirm-type=correlated 开启 确认模式。</li><li>实现RabbitTemplate.ConfirmCallback接口，重写confirm方法</li><li>特点：不论消息是否成功投递至交换机，都回调confirm方法，只有在发送失败时需要写业务代码进行处理。</li></ul><p>退回模式</p><ul><li>设置publisher-returns=”true” 开启 退回模式。</li><li>实现RabbitTemplate.ReturnCallback接口，重写returnedMessage方法</li><li>特点：消息进入交换机后，只有当从exchange路由到queue失败，才去回调returnedMessage方法；</li></ul><h3 id="4-2-消费者确认"><a href="#4-2-消费者确认" class="headerlink" title="4.2 消费者确认"></a>4.2 消费者确认</h3><p>为了达到消费者能百分百接收到请求，且业务执行过程中还不能出错！需要消费者手动确认。</p><p>ack指 <strong>Acknowledge</strong>，拥有确认的含义，是消费端收到消息的一种确认机制；</p><p>消息确认的三种类型：</p><ul><li><p>自动确认：acknowledge=”<strong>none</strong>“</p></li><li><p>手动确认：acknowledge=”<strong>manual</strong>“</p></li><li><p>根据异常情况确认：acknowledge=”<strong>auto</strong>“，（这种方式使用麻烦，不作讲解）</p></li></ul><p>其中自动确认是指，当消息一旦被Consumer接收到，则自动确认收到，并将相应 message 从 RabbitMQ 的消息缓存中移除。但是在实际业务处理中，很可能消息接收到，业务处理出现异常，那么该消息就会丢失。</p><p>如果设置了手动确认方式，则需要在业务处理成功后，调用<code>channel.basicAck()</code>，手动签收，如果出现异常，则调用<code>channel.basicNack()</code>方法，让其自动重新发送消息。</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq19.png"></p><p>自定义监听器涉及三个对象：三个对象必须注入Spring容器</p><ol><li>自定义监听器对象</li><li>自定义监听器的适配器Adaptor对象</li><li>监听器的容器对象</li></ol><blockquote><p>创建自定义监听器类CustomAckConsumerListener，实现ChannelAwareMessageListener接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义监听器，用于接收消息队列order.A发送的消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAckConsumerListener</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义监听器的监听方法，作用：监听消息队列发送过来的消息，然后执行当前方法</span></span><br><span class="line"><span class="comment">     * 监听器三要素：</span></span><br><span class="line"><span class="comment">     *      监听对象：消息队列</span></span><br><span class="line"><span class="comment">     *      事件源：消息</span></span><br><span class="line"><span class="comment">     *      执行操作：执行的操作onMessage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel 频道，就是在生产者、消费者与消息队列的连接中包含多个channel，详见消息队列结构图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1、获取消息队列中的消息</span></span><br><span class="line">        String messageBody = <span class="keyword">new</span> String(message.getBody(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取投递标签</span></span><br><span class="line">        MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> deliveryTag = messageProperties.getDeliveryTag();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//2、执行业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;执行正常的逻辑，消息的内容：&quot;</span>+messageBody);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟异常情况</span></span><br><span class="line"><span class="comment">//            if(messageBody.contains(&quot;苹果&quot;))&#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(&quot;苹果手机不能卖&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//可通过休眠，延时消费端限流的情况</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、正常，签收消息</span></span><br><span class="line">            <span class="comment">//第一个参数：投递标签</span></span><br><span class="line">            <span class="comment">//第二个参数：是否是批量签收，如果是true，将当前队列对应链接中的所有消息一次签收，false只签收当前消息</span></span><br><span class="line">            channel.basicAck(deliveryTag,<span class="keyword">false</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;手动签收&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//4、异常拒签消息，消息重回消息队列</span></span><br><span class="line">            <span class="comment">//第三个参数：是否从回队列</span></span><br><span class="line">            System.out.println(<span class="string">&quot;手动拒签，原因：&quot;</span>+e.getMessage());</span><br><span class="line">            channel.basicNack(deliveryTag,<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写监听器配置类ListenerConfiguration，配置自定义监听器绑定消息队列<code>order.A</code>并配置适配器实体类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义监听器的适配器对象，在配置类中@Bean的方法可直接自动注入Spring容器的对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageListenerAdapter <span class="title">messageListenerAdapter</span><span class="params">(CustomAckConsumerListener listener)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(listener);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听器容器对象</span></span><br><span class="line"><span class="comment">     * 设置链接工厂对象，链接放的是channel, ConnectionFactory 连接工厂</span></span><br><span class="line"><span class="comment">     * 设置自定义监听对象的适配器对象 MessageListenerAdapter</span></span><br><span class="line"><span class="comment">     * 设置绑定的消息对象 order.A</span></span><br><span class="line"><span class="comment">     * 设置手动签收模式 ackKnowledgeMode 手动签收 MANUAL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">simpleMessageListenerContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            MessageListenerAdapter messageListenerAdapter,</span></span></span><br><span class="line"><span class="function"><span class="params">            ConnectionFactory connectionFactory)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置自定义监听对象的适配器对象</span></span><br><span class="line">        container.setMessageListener(messageListenerAdapter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置链接工厂对象</span></span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定当前消息队列</span></span><br><span class="line">        container.setQueueNames(<span class="string">&quot;order.A&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置手动签收模式,MANUAL-手动签收；NONE-自动签收；AUTO-出现异常签收</span></span><br><span class="line">        container.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置消费端限流，限制每次只拉去一条消息，默认每次拉去250条</span></span><br><span class="line">        container.setPrefetchCount(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>如果想手动签收消息，那么需要自定义实现消息接收监听器，实现ChannelAwareMessageListener接口</li><li>设置AcknowledgeMode模式<ul><li>none：自动</li><li>auto：异常模式</li><li>manual：手动</li></ul></li><li>调用channel.basicAck方法签收消息</li><li>调用channel.basicNAck方法拒签消息</li></ul><h3 id="4-3-消费端限流"><a href="#4-3-消费端限流" class="headerlink" title="4.3 消费端限流"></a>4.3 消费端限流</h3><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq20.png"></p><p>如上图所示：</p><p><strong>第一种情况：</strong></p><ul><li>如果在A系统中需要维护相关的业务功能，可能需要将A系统的服务停止，那么这个时候消息的生产者还是一直会向MQ中发送待处理的消息，消费者此时服务已经关闭，导致大量的消息都会在MQ中累积。</li><li>如果当A系统成功启动后，消费者会一次性将MQ中累积的大量的消息拉取到自己的服务，导致服务在短时间内会处理大量的业务，可能会导致系统服务的崩溃。 所以消费端限流是非常有必要的。</li></ul><p><strong>第二种情况：</strong>当大量用户注册时，高并发请求过来，邮件接口只支持小量并发，这时消费端限流也非常必要；</p><p>消费端限流配置：设置监听器容器属性container.setPrefetchCount(1)；表示消费端每次从mq拉去1条消息来消费，直到手动确认消费完毕后，才会继续拉去下一条消息。</p><p>实现步骤：</p><p>在自定义消息监听器配置类ListenerConfiguration类中，配置每次拉取消息1条<code>container.setPrefetchCount(1);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入消息监听器容器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connectionFactory 连接工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageListenerAdapter 自定义的消息监听器适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">simpleMessageListenerContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ConnectionFactory connectionFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">        MessageListenerAdapter messageListenerAdapter)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//简单的消息监听器容器对象</span></span><br><span class="line">    SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer();</span><br><span class="line">    <span class="comment">//绑定消息队列</span></span><br><span class="line">    container.setQueueNames(<span class="string">&quot;order.A&quot;</span>);</span><br><span class="line">    <span class="comment">//设置连接工厂对象</span></span><br><span class="line">    container.setConnectionFactory(connectionFactory);</span><br><span class="line">    <span class="comment">//设置消息监听器适配器</span></span><br><span class="line">    container.setMessageListener(messageListenerAdapter);</span><br><span class="line">    <span class="comment">//设置手动确认消息：NONE(不确认消息)，MANUAL(手动确认消息)，AUTO(自动确认消息)</span></span><br><span class="line">    container.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置消费端限流，每次拉取消息多少条，默认是250条</span></span><br><span class="line">    container.setPrefetchCount(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明</p><ul><li>消费端自定义消息监听器绑定消息队列时，设置每次拉取消息1条setPrefetchCount(1);</li><li>注意，如果想进行消费端限流，那么消息必须手动确认，AcknowledgeMode为MANUAL</li></ul><h3 id="4-4-TTL"><a href="#4-4-TTL" class="headerlink" title="4.4 TTL"></a>4.4 TTL</h3><p>TTL 全称 Time To Live（存活时间/过期时间）。当消息到达存活时间后，还没有被消费，会被自动清除。</p><p>RabbitMQ可以对消息设置过期时间，也可以对整个队列（Queue）设置过期时间。</p><p><strong>注意：给单个消息设置过期时间没实际意义。</strong></p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq21.png"></p><p>在RabbitMQ管理控制台中，新增消息队列<code>order</code>，并设置消息失效时间为5秒</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq22.png"></p><p>也可在发送消息时，设置过期时间</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq23.png"></p><p>说明：</p><ul><li>设置队列过期时间使用参数：x-message-ttl，单位：ms(毫秒)，会对整个队列消息统一过期。</li><li>由于队列是先进先出的，所以如果设置单个消息的过期时间并没有实际意义<ul><li>例如：设置消息A的过期时间为10秒，消息B的过期时间为5秒，但是先将消息A发送至队列，那么只有等消息A被消费或者到期移除后才会将消息B消费或者到期移除。</li></ul></li></ul><h3 id="4-5-死信队列"><a href="#4-5-死信队列" class="headerlink" title="4.5 死信队列"></a>4.5 死信队列</h3><p>死信队列：当消息成为Dead message后，可以被重新发送到另一个交换机，这个交换机就是Dead Letter Exchange（死信交换机 简写：DLX）。</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq24.png"></p><p><strong>消息成为死信的三种情况：</strong></p><ol><li><p>队列消息长度到达限制；</p></li><li><p>消费者拒接消息(basicNack)，并且不把消息重新放回源队列，requeue=false；</p></li><li><p>源队列存在消息过期设置，消息到达超时时间未被消费；</p></li></ol><p><strong>设置死信队列绑定死信交换机：</strong></p><p>给队列设置参数： x-dead-letter-exchange 和 x-dead-letter-routing-key</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq25.png"></p><p><strong>案例目标</strong>：演示消息队列中消息超时失效</p><blockquote><p>实现步骤：</p></blockquote><ol><li><p>在RabbitMQ管理控制台中，创建死信队列<code>deadQueue</code></p></li><li><p>在RabbitMQ管理控制台中，创建死信交换机<code>deadExchange</code></p></li><li><p>死信队列绑定死信交换机，路由键为<code>order.dead</code></p></li><li><p>消息队列order.B绑定死信交换机</p></li><li><p>向消息队列<code>order.B</code>中发送消息【消息队列order.B中的消息失效时间为5秒】</p></li><li><p>在RabbitMQ管理控制台中，将消息队列<code>order.B</code>绑定到交换机<code>order_exchange</code>上</p></li><li><p>等待5秒，消息队列order.B中的消息进入死信队列</p></li></ol><blockquote><p>创建deadqueue</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq26.png"></p><blockquote><p>创建deadExchange</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq27.png"></p><blockquote><p>死信队列绑定死信交换机，路由键为dead</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq28.png"></p><blockquote><p>创建队列order.B，并绑定死信交换机</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq29.png"></p><blockquote><p>队列order.B绑定交换机并发送消息</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq30.png"></p><blockquote><p>结果</p></blockquote><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq31.png"></p><p>说明：</p><ol><li><p>死信交换机和死信队列和普通的没有区别</p></li><li><p>当消息成为死信后，如果该队列绑定了死信交换机，则消息会被死信交换机重新路由到死信队列</p></li><li><p>消息成为死信的三种情况：</p><ul><li><p>队列消息长度到达限制；</p></li><li><p>消费者拒接消费消息，并且不重回队列；</p></li><li><p>原队列存在消息过期设置，消息到达超时时间未被消费；</p></li></ul></li></ol><h3 id="4-6-延迟队列"><a href="#4-6-延迟队列" class="headerlink" title="4.6 延迟队列"></a>4.6 延迟队列</h3><p><strong>什么是延迟队列？即消息进入队列后不会立即被消费，只有到达指定时间后，才会被消费。</strong></p><p>需求场景：</p><ol><li>下单后，30分钟未支付，取消订单，回滚车票。</li><li>新用户注册成功7天后，发送短信问好。</li></ol><p>实现方法：</p><ol><li>定时器</li><li>延迟队列</li></ol><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq32.png"></p><p>注意：在RabbitMQ中并未提供延迟队列功能。</p><p>但是可以使用：<strong>TTL+死信队列</strong> 组合实现延迟队列的效果。</p><p><img src="/2020/11/01/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/RabbitMQ/rabbitmq33.png"></p><h2 id="五、结束语"><a href="#五、结束语" class="headerlink" title="五、结束语"></a>五、结束语</h2><p>通过上面的学习，能够在项目中简单的使用消息队列。</p>]]></content>
    
    
    <summary type="html">MQ全称为Message Queue，消息队列是应用程序和应用程序之间的通信方法。在项目中，可将一些无需即时返回且耗时的操作提取出来，进行异步处理，而这种异步处理的方式大大的节省了服务器的请求响应时间，从而提高了系统的吞吐量</summary>
    
    
    
    <category term="中间件" scheme="https://amazingdl.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="消息队列" scheme="https://amazingdl.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据结构(二)——栈和队列</title>
    <link href="https://amazingdl.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>https://amazingdl.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</id>
    <published>2020-10-28T00:50:50.000Z</published>
    <updated>2020-11-06T23:56:50.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h2><blockquote><p>什么是栈？</p></blockquote><p><strong>栈</strong>是限定仅在表尾进行插入或删除操作的线性表。因此，对于栈来说，表尾端被称为<strong>栈顶</strong>，表头端被称为<strong>栈底</strong>，不含元素的空表称为<strong>空栈</strong>。</p><p>在栈中，出栈的第一个元素是栈顶元素，即栈的修改是按后进先出的原则进行的，因此栈又称为后进先出的线性表。</p><p>其结构示意图如下：</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/image01.jpg"></p><blockquote><p>顺序栈的表示和实现</p></blockquote><p>和线性表类似，栈也有两种存储表示方法：顺序栈和链栈。</p><p>顺序栈，即栈的顺序存储结构是利用一组地址连续的存储单元依次存放自栈底到栈顶的数据元素，同时附设指针top指示栈顶元素在顺序栈中的位置。</p><p>其结构实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] data;<span class="comment">//存储栈内容的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top;<span class="comment">//栈顶指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> base;<span class="comment">//栈底指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//栈的元素个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>data用于存放栈的元素，当data数组长度不够时，需要扩容；</li><li>base是指向栈底的下标，top是指向栈顶的下标，非空栈的栈顶指针始终在栈顶元素的下一个位置上；</li><li>元素每次入栈时，top需要自增1，base不需改变；</li><li>元素每次出栈时，top需要自减1，当top与base相等时，栈为空；</li></ol><p>栈的入栈示意图：</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/image02.jpg"></p><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顺序栈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AmazingDL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_LENGTH = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建默认长度的栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SequenceStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(DEFAULT_LENGTH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建指定长度的栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SequenceStack</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">elementData = <span class="keyword">new</span> Object[length];</span><br><span class="line">base = <span class="number">0</span>;</span><br><span class="line">top = <span class="number">0</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入栈，如果栈满就提醒栈满，无法扩容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(top!=elementData.length) &#123;</span><br><span class="line">elementData[top] = data;</span><br><span class="line">top++;</span><br><span class="line">size++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈满，无法添加&quot;</span>+data+<span class="string">&quot;元素了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出栈</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(top==base) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈空，没有元素出栈&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object result = elementData[--top];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否为空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.base==<span class="keyword">this</span>.top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="keyword">this</span>.size;i++) &#123;</span><br><span class="line">System.out.print(elementData[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>链栈的表示</p></blockquote><p>链栈，与顺序栈的操作类似，指示栈的每个元素使用一个结点表示，结点之间的操作与单链表的操作类似；</p><p>栈顶指针指向栈顶结点，不设置栈底指针，当栈顶指针为null时，栈为空，第一个元素入栈时，创建一个结点，且栈顶指针指向该结点；</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/image03.jpg"></p><p>链栈的删除元素示意图：</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/image04.jpg"></p><p>链栈的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> StackNode  top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">StackNode node = <span class="keyword">new</span> StackNode();</span><br><span class="line">node.data = data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当栈为空栈时，第一个入栈的元素即为栈顶元素</span></span><br><span class="line"><span class="keyword">if</span>(top == <span class="keyword">null</span>) &#123;</span><br><span class="line">node.prev = <span class="keyword">null</span>;</span><br><span class="line">top = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.prev = top;</span><br><span class="line">top = node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(top==<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StackNode result = top;</span><br><span class="line"></span><br><span class="line">top = top.prev;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.top==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//略</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackNode</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Object data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//每个结点的指针域指向前一个结点，栈底结点的指针域为null</span></span><br><span class="line">StackNode prev;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、栈的相关案例"><a href="#二、栈的相关案例" class="headerlink" title="二、栈的相关案例"></a>二、栈的相关案例</h2><p>通过栈实现十进制数N和其他进制数之间的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    System.out.print(<span class="string">&quot;请输入一个十进制整数：&quot;</span>);</span><br><span class="line">    Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> number = scan.nextInt();</span><br><span class="line">    System.out.print(<span class="string">&quot;请输入要转换的进制：&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;将十进制数&quot;</span>+number+<span class="string">&quot;转换为&quot;</span>+n+<span class="string">&quot;进制数&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    LinkedStack stack = <span class="keyword">new</span> LinkedStack();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(number&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//每次取余</span></span><br><span class="line">        stack.push(<span class="keyword">new</span> Integer(number%n));</span><br><span class="line">        <span class="comment">//将商继续进行转换</span></span><br><span class="line">        number = number/n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历栈</span></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">        sb.append(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、队列"><a href="#三、队列" class="headerlink" title="三、队列"></a>三、队列</h2><blockquote><p>什么是队列？</p></blockquote><p>和栈相反，<strong>队列</strong>是一种先进先出的线性表，它只允许在表的一端进行元素插入操作，而在另一端进行元素的删除操作。</p><p>与现实生活中的排队一致，最早进入队列的元素最早离开，即先进先出。</p><p>在队列中，允许插入的一端叫做<strong>队尾</strong>，允许删除的一端则成为<strong>队头</strong>。</p><p>队列结构示意图：</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/image05.png"></p><blockquote><p>链队列的表示和实现</p></blockquote><p>用链表表示的队列称为<strong>链队列</strong>，一个链队列显然需要两个分别指向队头和队尾的指针才能唯一确定。</p><p>在设计队列时，也可给链队列添加一个头结点，并令头指针指向头结点，由此，空的链队列的判断条件就是头指针和尾指针均指向头结点。</p><p>链队列结构示意图：</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/image06.jpg"></p><p>链队列的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AmazingDL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> QueueNode front;<span class="comment">//队首</span></span><br><span class="line"><span class="keyword">private</span> QueueNode rear;<span class="comment">//队尾</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.front = <span class="keyword">new</span> QueueNode();<span class="comment">//头结点，不存储任何元素</span></span><br><span class="line"><span class="keyword">this</span>.rear = <span class="keyword">this</span>.front;<span class="comment">//空队列，队首指针和队尾指针均指向头结点</span></span><br><span class="line">        <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">QueueNode node = <span class="keyword">new</span> QueueNode();</span><br><span class="line">node.data = data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.rear.next = node;</span><br><span class="line"><span class="keyword">this</span>.rear = node;</span><br><span class="line"><span class="keyword">this</span>.size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">DeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Object result = <span class="keyword">this</span>.front.next.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.front = <span class="keyword">this</span>.front.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.size--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.rear == <span class="keyword">this</span>.front;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueNode</span> </span>&#123;</span><br><span class="line">Object data;</span><br><span class="line">QueueNode next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>循环队列——队列的顺序表示和实现</p></blockquote><p>与顺序栈类似，在队列的顺序存储结构中，除了用一组地址连续的存储单元依次存放从队列头到队列为的元素之外，还需设置front和rear分别指向队列头元素及队列尾元素的位置。</p><p>在顺序队列的表示中，为了方便起见，初始化建空队列时，令front=rear=0。</p><p>每当插入新的队尾元素时，尾指针自增1；每当删除队列头元素时，头指针自增1。</p><p>因此，在非空队列中，头指针始终只想队列头元素，而尾指针始终指向队列尾元素的下一个位置。</p><p>队列表示示意图：</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/image07.png"></p><p>在顺序队列中，当队尾指针等于数组长度时，继续插入元素就会出现数组越界异常，然而此时又不宜如顺序栈那样，进行存储在分配扩大数组空间，因为队列的实际可用空间并未占满。</p><p><strong>循环队列</strong>：将顺序队列臆造为一个环状空间，如下图所示：</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/image09.jpg"></p><p>由于队列的特殊结构，队列的长度一般都是可以确定的，在循环队列下亦是如此。</p><p>所以判断一个队列空间是空还是满就很重要了，当队列满了的时候，就告诉外界无法添加元素。</p><p>在元素入列或元素出列时，front和rear都是在不断增加的，但队列的长度时固定的，所以可通过(front+1)%size和(rear+1)%size的方式获取入列元素和出列元素在数组中的下标。</p><p>然而在循环队列中，只通过front==rear是无法判断一个队列空间是空还是满。</p><p>此时有两种处理方法：</p><p>其一是另设一个标识位以区分队列是空还是满；</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/image08.jpg"></p><p>其二是少用一个空间元素，约定以“队列头指针在队列尾指针的下一位置上作为队列呈满状态的标志。</p><p>循环队列的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 循环队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AmazingDL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_LENGTH = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SequenceQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(DEFAULT_LENGTH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SequenceQueue</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">elementData = <span class="keyword">new</span> Object[length];</span><br><span class="line"><span class="keyword">this</span>.front = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.rear = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否已满</span></span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">this</span>.rear+<span class="number">1</span>) % <span class="keyword">this</span>.elementData.length  == <span class="keyword">this</span>.front) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">elementData[<span class="keyword">this</span>.rear] = data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.size++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当rear等于elementData.length-1时，需要对其加一后的数值进行处理，即通过取余，使得0&lt;=rear&lt;=elementData.length</span></span><br><span class="line"><span class="keyword">this</span>.rear = (<span class="keyword">this</span>.rear+<span class="number">1</span>) % <span class="keyword">this</span>.elementData.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">DeQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.front == <span class="keyword">this</span>.rear) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object result = <span class="keyword">this</span>.elementData[<span class="keyword">this</span>.front];</span><br><span class="line"></span><br><span class="line"><span class="comment">//当front等于elementData.length-1时，需要对其加一后的数值进行处理，即通过取余，使得0&lt;=front&lt;=elementData.length</span></span><br><span class="line"><span class="keyword">this</span>.front = (<span class="keyword">this</span>.front+<span class="number">1</span>) % <span class="keyword">this</span>.elementData.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、结束语"><a href="#四、结束语" class="headerlink" title="四、结束语"></a>四、结束语</h2><ol><li>在线性结构中，栈和队列的操作还是比较简单的，元素的增加和删除只能从某一端进行；</li><li>通过栈和队列的顺序存储结构和链式存储结构的实现，可以简单的认识一下这种特殊的线性结构。</li></ol>]]></content>
    
    
    <summary type="html">栈和队列是两种重要的线性结构。从数据结构角度来看，湛河队列也是线性表，其特殊性在于栈和队列的基本操作是线性表操作的子集；但从数据类型角度来看，它们是和线性表大不相同的两类重要的抽象数据类型。</summary>
    
    
    
    <category term="数据结构" scheme="https://amazingdl.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://amazingdl.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构(一)——线性表</title>
    <link href="https://amazingdl.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>https://amazingdl.github.io/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/</id>
    <published>2020-10-28T00:43:19.000Z</published>
    <updated>2020-11-06T23:56:45.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、数据结构和算法"><a href="#一、数据结构和算法" class="headerlink" title="一、数据结构和算法"></a>一、数据结构和算法</h2><blockquote><p>谈数据结构之前，先认识一下几个相关的概念：</p></blockquote><p><strong>数据</strong>：是对客观事物的符号表示，在计算机科学中是指所有能输入到计算机中并被计算机程序处理的符号的总称。</p><p>对于计算机而言，数据的含义极为广泛，如图像、声音等都可以通过编码而归于数据的范畴。</p><p><strong>数据元素</strong>：是数据的基本单位，在计算机程序中通常作为一个整体进行考虑和处理。有时，一个数据元素可由若干个数据项组成。</p><p>例如一个人的详细信息为一个数据元素，那么这个人的身高、年龄、性别都是一个数据项。</p><p><strong>数据对象</strong>：是性质相同的数据元素的集合，是一个数据的子集。</p><p>例如，字母字符数据对象是集合C={‘A’,’B’,……,’Z’}。</p><blockquote><p>那么什么是数据结构呢？</p></blockquote><p><strong>数据结构</strong>是相互之间存在一种或多种特定关系的数据元素的集合。</p><p>在任何问题中，数据元素都不是孤立存在的；</p><p>比如当我们取银行办理业务时，需要排队，此时每个需要办理业务的人对于某个窗口来说都是一个数据元素，这些人之间也存在着某种特定的关系，例如每个人只能从队列的末尾进，从队首出，且除了第一个人，其他每个人的前面都有且只有一个需要办理业务的人，这就是线性结构的一种特点，当然这种线性结构还存在着其他关系，这些数据元素相互之间的关系成为结构。</p><p><strong>数据结构的四种分类</strong>：</p><ol><li>集合：结构中的数据元素之间除了“同属于一个集合”的关系之外，别无其他关系；</li><li>线性结构：结构中的数据元素之间存在一个对一个的关系；</li><li>树形结构：结构中的数据元素之间存在一个对多个的关系；</li><li>图形结构或网状结构：结构中的数据元素之间存在多个对多个的关系。</li></ol><blockquote><p>数据结构的相关概念</p></blockquote><p><strong>逻辑结构</strong>：结构定义中的“关系”描述的是数据元素之间的逻辑关系；</p><p><strong>物理结构</strong>：数据结构在计算机上的实成为物理结构；</p><p><strong>元素或节点</strong>：在计算机中，我们可以用一个由若干位组合起来形成的一维串表示一个数据元素，这个位串成为元素或节点。当数据元素由若干数据项组成时，位串中对应于各个数据项的子位串称为数据域。</p><p><strong>顺序存储结构</strong>：顺序存储结构的特点是借助元素在存储器中的<code>相对位置</code>来表示数据元素之间的逻辑关系，比如数组。</p><p><strong>链式存储结构</strong>：链式存储结构的特点就是借助指向元素存储地址的<code>引用(或指针)</code>表示数据元素之间的逻辑关系。</p><blockquote><p>数据类型</p></blockquote><p>在高级程序语言的编写中，每个变量都有一个它所属的确定的数据类型，类型明显或隐含地规定了在程序执行期间变量所有可能取值的范围，以及在这些值上允许进行的操作。</p><p>因此<strong>数据类型</strong>是一个值的集合和定义在这个值上的一组操作的总称。比如整型变量，其值就是整数的集合，定义在其上的操作为加、减、乘、除等操作。</p><p><strong>原子数据类型</strong>：原子类型的值是不可分解的，比如Java中的基本数据类型int、char、double等。</p><p><strong>结构数据类型</strong>：结构类型的值是由若干成分按某种结构组成，因此是可以分解的，且它的成分可以是非结构的，也可以是结构的。比如数组，数组的元素可以int类型的，也可以是数组类型的(构成二维数组)。</p><blockquote><p>抽象数据类型</p></blockquote><p><strong>抽象数据类型</strong>是指一个数据模型以及定义在该模型上的一组操作，抽象数据类型的定义取决于它的一组逻辑特性，而与其在计算机内部如何表示和实现无关，即不论其内部结构如何变化，只要它的数学特性不变，都不影响其外部的使用。</p><p>抽象数据类型格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ADT 抽象数据类型名&#123;</span><br><span class="line">数据对象:&lt;数据对象的定义&gt;</span><br><span class="line">数据关系:&lt;数据关系的定义&gt;</span><br><span class="line">基本操作:&lt;基本操作的定义&gt;</span><br><span class="line">&#125;ADT 抽象数据类型名</span><br></pre></td></tr></table></figure><blockquote><p>算法</p></blockquote><p><strong>算法</strong>是对特定问题求解步骤的一种描述，它是指令的有限集合，其中一条指令表示一个或多个操作；</p><p>算法的五个特性：</p><ul><li><strong>有穷性</strong>：一个算法必须总是在执行有穷步后结束，且每一步都可在有穷时间内完成；</li><li><strong>确定性</strong>：算法中每一条指令必须有确切的含义，读者理解时不会产生二义性。并且，在任何条件下，算法只有唯一的一条执行路径，即对于相同的输入只能得出相同的输出；</li><li><strong>可行性</strong>：一个算法是能行的，计算法中描述的操作都是可以通过实现的基本运算执行有限次来实现的；</li><li><strong>输入</strong>：一个算法有零个或多个输入，这些输入取自于某个特定的对象的集合；</li><li><strong>输出</strong>：一个算法有一个或多个输出，这些输出是同输入有着某些特定关系的量。</li></ul><p>通常通过一个算法的<code>时间复杂度</code>和<code>空间复杂度</code>来描述一个算法的效率。</p><h2 id="二、线性表的类型定义"><a href="#二、线性表的类型定义" class="headerlink" title="二、线性表的类型定义"></a>二、线性表的类型定义</h2><blockquote><p>线性结构的特点</p></blockquote><p>在数据元素的非空有限集合中</p><ul><li>存在唯一的一个被称做“第一个”的数据元素；</li><li>存在唯一的一个被称做“最后一个”的数据元素；</li><li>除第一个之外，集合中的每个数据元素均只有一个前驱；</li><li>除最后一个之外，集合中的每个数据元素均只有一个后继。</li></ul><p>如果把食堂排队打饭的每个人看做一个数据元素，那么排队的这些人构成的集合属于线性结构。</p><blockquote><p>什么是线性表</p></blockquote><ul><li><p>线性表属于线性结构中的一种最常用且最简单的数据结构。</p></li><li><p>线性表中的每个数据元素的具体含义，在不同的情况下各不相同，他可以是一个数或一个符号，也可以是一页书，甚至更复杂的信息。</p></li><li><p>线性表中的数据元素可以是各种各样的，但同一线性表中的数据元素必定具有相同特性。</p></li></ul><p>另外，对于具有“一对一”逻辑关系的数据，我们一直在用“某一元素的左侧（前边）或右侧（后边）”这样不专业的词，其实线性表中有更准确的术语：</p><ul><li>某一元素的左侧相邻元素称为“直接前驱”，位于此元素左侧的所有元素都统称为“前驱元素”；</li><li>某一元素的右侧相邻元素称为“直接后继”，位于此元素右侧的所有元素都统称为“后继元素”；</li></ul><blockquote><p>常用算法</p></blockquote><p>①将存在于A表而不存在于B表的数据元素插入到表A中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">18</span>,<span class="number">25</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] result = Arrays.copyOf(arr2, arr1.length+arr2.length);<span class="comment">//复制并扩容数组2。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>; <span class="comment">//记录插入的元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;arr1.length;i++) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;arr2.length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr1[i]==arr2[j]) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;<span class="comment">//存在相同元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">            result[arr2.length+count]=arr1[i];</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;(arr2.length+count);i++) &#123;</span><br><span class="line">        System.out.print(result[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②已知线性表A和B中的数据元素按值非递减有序排列，现要求A和B合并为一个新的线性表C，且C的数据元素仍按值非递减有序排列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并两个有序数组到另外一个数组中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeList</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span>[] b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[a.length+b.length];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;<span class="comment">//记录数组a的下标</span></span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;<span class="comment">//记录数组b的下标</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;<span class="comment">//记录数组c的下标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x&lt;a.length &amp;&amp; y &lt; b.length) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[x]&lt;=b[y]) &#123;</span><br><span class="line">            c[k++] = a[x++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c[k++] = b[y++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此时还需要判断两个数组是否已经全部遍历完</span></span><br><span class="line">    <span class="keyword">while</span>(x&lt;a.length) &#123;</span><br><span class="line">        c[k++] = a[x++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(y&lt;b.length) &#123;</span><br><span class="line">        c[k++] = b[y++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(Arrays.toString(c));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、顺序表"><a href="#三、顺序表" class="headerlink" title="三、顺序表"></a>三、顺序表</h2><p>线性表的顺序表示指的是一组地址连续的存储单元依次存储线性表的数据元素。</p><p>以下是我参照java.util.ArrayList类，写出的一个简单的List，只包含一些简单的增删改查方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现自己的ArrayList，未使用泛型，使用Object存储元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AmazingDL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//容器</span></span><br><span class="line"><span class="keyword">private</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认数组长度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_LENGTH= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">elementData = <span class="keyword">new</span> Object[<span class="keyword">this</span>.DEFAULT_LENGTH];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(length&lt;<span class="number">0</span>) &#123;</span><br><span class="line">elementData = <span class="keyword">new</span> Object[<span class="keyword">this</span>.DEFAULT_LENGTH];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(length&gt;Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;数组长度异常&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">elementData = <span class="keyword">new</span> Object[length];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组扩容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> minCapacity 扩容后的最小长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(minCapacity&gt;Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;数组长度异常&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line"><span class="comment">//扩容1.5倍</span></span><br><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断扩容1.5倍后的大小是否仍能够满足需求</span></span><br><span class="line"><span class="keyword">if</span>(newCapacity-minCapacity&lt;<span class="number">0</span>) &#123;</span><br><span class="line">newCapacity = minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定索引下插入元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 插入的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 需要插入的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,Object target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入的元素的下标只能小于elementData.length且大于0，即列表的元素是连续的</span></span><br><span class="line"><span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;=elementData.length) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;下标越界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当元素个数等于数组长度时，数组扩容</span></span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">this</span>.size+<span class="number">1</span>)&gt;=elementData.length) &#123;</span><br><span class="line"><span class="keyword">this</span>.grow(<span class="keyword">this</span>.size+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当插入的索引等于size时，需移动元素，然后在index位置插入元素</span></span><br><span class="line"><span class="keyword">if</span>(index!=<span class="keyword">this</span>.size) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="keyword">this</span>.size;i&gt;=index;i--) &#123;</span><br><span class="line">elementData[i] = elementData[i-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当插入的索引等于size时，无需移动元素</span></span><br><span class="line">elementData[index]=target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.updateSize();<span class="comment">//更新元素个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除指定索引下的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.get(index)!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = index;i&lt;<span class="keyword">this</span>.size;i++) &#123;</span><br><span class="line">elementData[i] = elementData[i+<span class="number">1</span>];<span class="comment">//先赋值，后自增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.updateSize();<span class="comment">//更新元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.get(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index,Object target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.get(index)!=<span class="keyword">null</span>) &#123;</span><br><span class="line">elementData[index] = target;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;下标错误&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据索引查找元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index &lt;<span class="number">0</span> || index &gt;=<span class="keyword">this</span>.size) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> elementData[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="keyword">this</span>.elementData.length;i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(elementData[i]!=<span class="keyword">null</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.size = count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 没有元素即为空，返回true</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.size()==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuilder result = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="keyword">this</span>.size;i++) &#123;</span><br><span class="line">result.append(elementData[i].toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、单链表"><a href="#四、单链表" class="headerlink" title="四、单链表"></a>四、单链表</h2><p>与顺序存储结构不同的是，它不要求逻辑上相邻的元素在物理位置也相邻。因此对于链式存储结构的操作，增加和删除就不需要移动元素，但是每次查询和修改都需要遍历整个链式存储结构</p><blockquote><p>线性链表</p></blockquote><p>线性表的链式存储结构的特点是用一组任意的存储单元存储线性表的数据元素（这组存储单元可以是连续的，也可以是不连续的）。</p><p>为了表示每个数据元素与其直接后继元素之间的逻辑关系，每个数据元素除了存储本身的信息之外，还需存储一个指示其直接后继的信息，即直接后继的存储位置；这两部分信息组成数据元素的存储结构，称为<code>结点</code>。</p><p>结点中存储数据元素信息的域称为<code>数据域</code>，存储直接后继存储位置的域称为<code>指针域</code>。</p><p>链表的每个结点中只包含一个指针域，称为<strong>单链表</strong>。</p><p>单链表的结构如下图：</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/image01.png"></p><p><strong>头结点</strong>：单链表的第一个结点之前附设一个结点，称之为头结点；</p><p>头结点的数据域可以不存储任何信息，也可存储如线性表的长度等附加信息；</p><p>头结点的指针域存储的是头指针，指示链表的第一个结点的存储位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AmazingDL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node last;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.first = <span class="keyword">new</span> Node();</span><br><span class="line"><span class="keyword">this</span>.last = first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表末尾增加元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 元素的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结点</span></span><br><span class="line">Node element = <span class="keyword">new</span> Node();</span><br><span class="line">element.data = data;</span><br><span class="line"></span><br><span class="line">Node node = <span class="keyword">this</span>.first;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取最后一个结点，此时只要结点的next为null，该结点即为最后一个结点。</span></span><br><span class="line"><span class="keyword">while</span>(node.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.next = element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.last = element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定位置插入元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 索引；在列表中，索引从0开始，索引为0的表示头结点，</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;无法在头结点添加元素&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index &gt; <span class="keyword">this</span>.size()+<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;下标越界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结点</span></span><br><span class="line">Node element = <span class="keyword">new</span> Node();</span><br><span class="line">element.data = data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//索引比列表元素个数大1时，即在链表的末尾添加元素，直接调用add方法</span></span><br><span class="line"><span class="keyword">if</span>(index == <span class="keyword">this</span>.size()+<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.add(data);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取插入位置元素的前驱元素</span></span><br><span class="line">Node node = <span class="keyword">this</span>.getIndexPriorElement(index);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;插入位置的前驱元素内容&quot;</span>+node.data);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将element的next指向插入位置的元素</span></span><br><span class="line">element.next = node.next;</span><br><span class="line"><span class="comment">//将前驱元素的next指向element</span></span><br><span class="line">node.next = element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;无法删除头结点&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index &gt; <span class="keyword">this</span>.size()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;下标越界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取删除位置元素的前驱元素</span></span><br><span class="line">Node node = <span class="keyword">this</span>.getIndexPriorElement(index);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = node.next.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index == <span class="keyword">this</span>.size()) &#123;</span><br><span class="line">node.next = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.last = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.next = node.next.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;无法更新头结点元素&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index &gt; <span class="keyword">this</span>.size()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;下标越界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取修改位置元素</span></span><br><span class="line">Node node = <span class="keyword">this</span>.getIndexPriorElement(index).next;</span><br><span class="line"></span><br><span class="line">node.data = value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;无法获取头结点数据&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index &gt; <span class="keyword">this</span>.size()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;下标越界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取修改位置元素</span></span><br><span class="line">Node node = <span class="keyword">this</span>.getIndexPriorElement(index).next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> node.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//头结点不包含元素</span></span><br><span class="line">Node node = <span class="keyword">this</span>.first.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下一个结点为空时，循环结束</span></span><br><span class="line"><span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">size++;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.first.next==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//从第二个结点开始遍历，头结点不包含元素</span></span><br><span class="line">Node node = <span class="keyword">this</span>.first.next;</span><br><span class="line"><span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(node.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找到指定索引位置的前驱元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">getIndexPriorElement</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;头结点没有前驱元素&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">Node node = <span class="keyword">this</span>.first;</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到插入位置元素及其前驱元素</span></span><br><span class="line"><span class="keyword">while</span>(node.next.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(count == index) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取头结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">head</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">firstElement</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.first.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirstElementValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.first.next.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">last</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLastElementValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.last.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AmazingDL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">Node next;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>索引问题，上述案例中头结点的索引为0，第一个存储的元素的索引为1；</li><li>元素个数问题，对于元素个数可直接在类中添加size属性，只需在链表元素个数变化更新时即可，不用每次调用size方法就遍历整个链表，且size方法返回的是链表元素的个数，不是链表的结点数量；</li><li>节点数据域，数据域存储的信息可以是任何类型的，比如double、char、boolean等类型，也可是一个自定义类，甚至是一个链表；所以在设置节点的数据域时，可使用Object类型，也可以使用泛型提高代码重用性。</li><li>first属性表示第一个结点，即头结点；last属性表示最后一个结点。</li></ol><h2 id="五、双向链表"><a href="#五、双向链表" class="headerlink" title="五、双向链表"></a>五、双向链表</h2><p>双向链表的结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DNode</span></span>&#123;</span><br><span class="line">    Object data;<span class="comment">//数据信息</span></span><br><span class="line">    DNode prev;<span class="comment">//直接前驱元素</span></span><br><span class="line">    DNode next;<span class="comment">//直接后继元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>双向链表</strong>：双向链表的结点包含两个指针域，其一指向直接后继，其一指向直接前驱，通过这种方式，可使指针在链表上的移动更加方便，但也使用了更多的内存空间。</p><p>结构如下图</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/image04.png"></p><p>代码实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双向链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AmazingDL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuplexLinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DNode head;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化链表，创建头结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DuplexLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">head = <span class="keyword">new</span> DNode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//增加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="comment">//构建结点</span></span><br><span class="line">DNode element = <span class="keyword">new</span> DNode();</span><br><span class="line">element.data = data;</span><br><span class="line"></span><br><span class="line">DNode node = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(node.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node.next = element;</span><br><span class="line">element.prior = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index,String vlaue)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index &lt;= <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;索引不合法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建结点</span></span><br><span class="line">DNode element = <span class="keyword">new</span> DNode();</span><br><span class="line">element.data = vlaue;</span><br><span class="line"></span><br><span class="line">DNode node = <span class="keyword">this</span>.getNodeByIndex(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取直接前驱元素</span></span><br><span class="line">DNode priorNode = node.prior;</span><br><span class="line"></span><br><span class="line">element.next = node;</span><br><span class="line">node.prior = element;</span><br><span class="line"></span><br><span class="line">priorNode.next = element;</span><br><span class="line">element.prior = priorNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index &lt;= <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;索引不合法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DNode node = <span class="keyword">this</span>.getNodeByIndex(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取直接前驱元素</span></span><br><span class="line">DNode priorNode = node.prior;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取直接后继元素</span></span><br><span class="line">DNode nextNode = node.next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">priorNode.next = nextNode;</span><br><span class="line">nextNode.prior = priorNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> node.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> index,String value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index &lt;= <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;索引不合法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DNode node = <span class="keyword">this</span>.getNodeByIndex(index);</span><br><span class="line">node.data = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(index &lt;= <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;索引不合法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.getNodeByIndex(index).data;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//元素个数，头结点不算一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DNode node = head.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">size++;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> head.next==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">DNode node = head.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(node!=<span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.print(node.data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();<span class="comment">//换行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据索引获取指定位置结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DNode <span class="title">getNodeByIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index &gt; <span class="keyword">this</span>.size()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;索引越界&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">DNode node = head.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(node.next!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(count == index) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DNode</span></span>&#123;</span><br><span class="line">String data;<span class="comment">//数据域</span></span><br><span class="line">DNode prior;<span class="comment">//直接前驱</span></span><br><span class="line">DNode next;<span class="comment">//直接后继</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> DNode <span class="title">getPrior</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> prior;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrior</span><span class="params">(DNode prior)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.prior = prior;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> DNode <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(DNode next)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>链表只设置了头结点属性，用于获取链表的其他任何结点；</li><li>由于每个结点都包含了prior属性，所以在插入和删除上操作更加简明。</li></ol><h2 id="六、静态链表与循环链表"><a href="#六、静态链表与循环链表" class="headerlink" title="六、静态链表与循环链表"></a>六、静态链表与循环链表</h2><blockquote><p>静态链表</p></blockquote><p>静态链表结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">Object data;<span class="comment">//数据信息</span></span><br><span class="line">    <span class="keyword">int</span> cur;<span class="comment">//下一个结点的下标</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么是静态链表？就是借用顺序表存储带有指向下一个结点的“指针域”，这个“指针域”被称做游标，表示当前结点的直接后继结点的下标。通过下标可直接定位到直接后继结点。</p><p>通过使用这种结构，线性表的插入和删除就不需移动元素了，仅需要修改指针即可，但是数组仍然存在扩容问题，此时查询和修改可直接通过遍历数组即可。</p><p>此时逻辑上相邻的两个元素，物理上并不一定相邻。</p><p>具体的结果说明如下图：</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/image02.png"></p><p>说明：</p><ol><li>静态链表的存储与顺序表类似，数组的长度是固定的，当元素个数等于数组长度时，就需要扩容；</li><li>静态链表的插入和删除操作与单链表类似，查询和修改可简化为类似顺序表的操作。</li></ol><blockquote><p>循环链表</p></blockquote><p>循环链表是另一种形式的链式存储结构，它的特点是表中最后一个结点的指针域指向头结点，整个链表形成一个环；</p><p>通过这种结构，从表中任一结点出发均可找到表中其他结点。</p><p>其结构如下图</p><p><img src="/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8/image03.png"></p><p>说明：</p><ol><li>循环链表的操作和线性链表基本一致，差别仅在于算法中的循环条件不再试判断直接后继元素是否为null，而是判断是否等于头指针；</li><li>有时候，在循环链表中设立尾指针而不设头指针，可是某些操作简化，例如两个线性表的合并。</li></ol><h2 id="七、结束语"><a href="#七、结束语" class="headerlink" title="七、结束语"></a>七、结束语</h2><ol><li>数据结构是一门研究非数值计算的程序设计问题中计算的操作对象以及他们之间的关系和操作等的学科；</li><li>数据结构的学习我将从两方面记录，一个是数据结构的特点，一个就是针对这种数据结构的各种操作(增、删、改、查等)；</li><li>这篇博客是我对数据结构学习的记录，仅此而已；</li><li>本系列博客的参考书籍<a href="https://book.douban.com/subject/2162035/">https://book.douban.com/subject/2162035/</a> (《数据结构 C语言版》)。</li></ol>]]></content>
    
    
    <summary type="html">在数据元素的非空有限集合中，如果除了第一个数据元素和最后一个数据元素之外，每个数据元素只存在一个直接前驱元素和一个直接后继元素，那么这种数据结构就是线性结构；线性结构有很多，比如线性表、栈、队列等；现实生活中线性结构的案例也很多，比如食堂排队，所以学会线性结构的特点和操作是及其重要的。所以，这次就从线性表开始说起。</summary>
    
    
    
    <category term="数据结构" scheme="https://amazingdl.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="https://amazingdl.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch-分布式全文搜索引擎</title>
    <link href="https://amazingdl.github.io/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/"/>
    <id>https://amazingdl.github.io/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/</id>
    <published>2020-10-25T00:03:20.000Z</published>
    <updated>2020-11-12T08:13:42.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、搜索"><a href="#一、搜索" class="headerlink" title="一、搜索"></a>一、搜索</h2><h3 id="1-1-数据库搜索的问题"><a href="#1-1-数据库搜索的问题" class="headerlink" title="1.1 数据库搜索的问题"></a>1.1 数据库搜索的问题</h3><p>使用传统的数据库存储数据，那么会存在下述的问题：</p><p>在某些搜索业务场景下（如模糊搜索，海量数据搜索），效率极低,因为模糊搜索可能导致全表扫描。</p><p>而在海量数据下进行模糊搜索是企业中比较常见的业务需求  ， 所以只能通过全文搜索技术解决。</p><h3 id="1-2-什么是全文搜索"><a href="#1-2-什么是全文搜索" class="headerlink" title="1.2 什么是全文搜索"></a>1.2 什么是全文搜索</h3><p>全文检索是利用==<strong>倒排索引</strong>==技术对需要搜索的数据进行处理，然后提供快速匹配的技术。</p><p>其实全文检索还有另外一种专业定义，<strong>先创建索引然后对索引进行搜索的过程</strong>，就是全文检索。</p><h4 id="1-2-1-倒排索引"><a href="#1-2-1-倒排索引" class="headerlink" title="1.2.1 倒排索引"></a>1.2.1 倒排索引</h4><p>倒排索引是一种存储数据的方式，与传统查找有很大区别：</p><ul><li>传统查找：采用数据按行存储，查找时逐行扫描，或者根据索引查找，然后匹配搜索条件，效率较差。概括来讲是先找到文档，然后看是否匹配。查找一个10MB的word文档，大概需要3秒</li><li>倒排索引：首先对数据按列拆分存储，然后对文档中的数据分词，对词条进行索引，并记录词条在文档中出现的位置。这样查找时只要找到了词条，就找到了对应的文档。概括来讲是先找到词条，然后看看哪些文档包含这些词条。</li></ul><p>类似于生活中的字典，如果想要获取一个字的所有信息，可通过拼音或部首获取某个字的位置，然后直接在该位置获取目标的所有信息。</p><h4 id="1-2-2-搜索流程"><a href="#1-2-2-搜索流程" class="headerlink" title="1.2.2 搜索流程"></a>1.2.2 搜索流程</h4><ol><li>用户在搜索输入框输入相要搜索的内容，比如输入”华为手机“；</li><li>ElasticSearch获取搜索的信息并进行<code>分词</code>处理，会将输入的内容分词为”华为“和”手机“；</li><li>然后拿着这些拆分后的词去倒排索引列表中进行匹配，找到这些词对应的所有文档编号；</li><li>然后根据这些编号去文档列表中找到文档。</li></ol><h3 id="1-3-Lucene"><a href="#1-3-Lucene" class="headerlink" title="1.3 Lucene"></a>1.3 Lucene</h3><p>Lucene是免费开源用于全文检索的程序工具包（API），由Apache软件基金会支持和提供。目前主流的java搜索框架都是依赖Lucene，官网：<a href="http://lucene.apache.org/">http://lucene.apache.org</a></p><h2 id="二、分词器"><a href="#二、分词器" class="headerlink" title="二、分词器"></a>二、分词器</h2><p>Analyzer（分词器）的作用是把一段文本中的词按规则取出所包含的所有词</p><p>中文的分词比较复杂，因为不是一个字就是一个词，而且一个词在另外一个地方就可能不是一个词，如在“帽子和服装”中，“和服”就不是一个词。对于中文分词，通常有三种方式：单字分词、二分法分词、词典分词。</p><h3 id="2-1-单字分词"><a href="#2-1-单字分词" class="headerlink" title="2.1 单字分词"></a>2.1 单字分词</h3><p>就是按照中文一个字一个字地进行分词，效率比较低。如：“我们是中国人”，效果：“我”、“们”、“是”、“中”、“国”、“人”。（StandardAnalyzer就是这样）</p><h3 id="2-2-二分法分词"><a href="#2-2-二分法分词" class="headerlink" title="2.2 二分法分词"></a>2.2 二分法分词</h3><p>按两个字进行切分，把相邻的两个字组成词分解出来，效率也比较低。而且很多情况下分的词不对。如：“我们是中国人”，效果：“我们”、“们是”、“是中”、“中国”、“国人”。（CJKAnalyzer就是这样）</p><h3 id="2-3-词库分词-IKAnalyzer"><a href="#2-3-词库分词-IKAnalyzer" class="headerlink" title="2.3 词库分词(IKAnalyzer)"></a>2.3 词库分词(IKAnalyzer)</h3><p>按分词算法构造词，然后去匹配已建好的词库集合，如果匹配到就切分出来成为词语。通常词库分词被认为是最理想的中文分词算法。如：“我们是中国人”，效果为：“我们”、“中国人”，”中国”。（使用极易分词的MMAnalyzer。可以使用“极易分词”，或者是“庖丁分词”分词器、IKAnalyzer）。</p><p> 基本上可以把词全部分出来(经常用的分词器)</p><h3 id="2-4-停用词和扩展词"><a href="#2-4-停用词和扩展词" class="headerlink" title="2.4 停用词和扩展词"></a>2.4 停用词和扩展词</h3><p><strong>停用词</strong>：有些词在文本中出现的频率非常高。但对本文的语义产生不了多大的影响。例如英文的a、an、the、of等。或中文的”的、了、呢等”。这样的词称为停用词。停用词经常被过滤掉，不会被进行索引。在检索的过程中，如果用户的查询词中含有停用词，系统会自动过滤掉。停用词可以加快索引的速度，减少索引库文件的大小。</p><p><strong>扩展词</strong>：就是不想让哪些词被分开，让他们分成一个词。</p><blockquote><p>宏颜获水</p><p>我太难了</p><p>奥力给</p></blockquote><p>使用停用词和扩展词</p><p><strong>ext_stopword.dic</strong>为停用词的词库，词库里的词都被当作为停用词使用。</p><p><strong>ext_dict.dic</strong> 为扩用词的词库，词库里的词都被当作为扩用词使用</p><h2 id="三、ElasticSearch简介"><a href="#三、ElasticSearch简介" class="headerlink" title="三、ElasticSearch简介"></a>三、ElasticSearch简介</h2><h3 id="3-1-ElasticSearch概述"><a href="#3-1-ElasticSearch概述" class="headerlink" title="3.1 ElasticSearch概述"></a>3.1 ElasticSearch概述</h3><p>Elaticsearch，简称为es， es是一个开源的==<strong>高扩展的分布式全文检索引擎</strong>==，它可以近乎实时的检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。ES使用Java开发，Lucene作为其核心来实现所有索引和搜索的功能，但是它的<strong>目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</strong></p><p>面对海量数据，想要根据一些关键词搜索到想要的信息，只通过关系型数据库的查询来获取，不仅效率是非常低的，而且准确性也很低。</p><p>目前市面上也常使用ElasticSearch作为搜索引擎，比如：百度使用ElasticSearch作为文本数据分析，新浪使用ES 分析处理32亿条实时日志，阿里使用ES 构建挖财自己的日志采集和分析体系。</p><p>通过搜索引擎来获取用户想要搜索的信息并返回给用户。</p><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image01.png"></p><h3 id="3-2-ElasticSearch的使用场景"><a href="#3-2-ElasticSearch的使用场景" class="headerlink" title="3.2 ElasticSearch的使用场景"></a>3.2 ElasticSearch的使用场景</h3><p>ES使用场景一般分为2种情况：</p><h4 id="3-2-1-已经上线的系统"><a href="#3-2-1-已经上线的系统" class="headerlink" title="3.2.1 已经上线的系统"></a>3.2.1 已经上线的系统</h4><p>模块搜索功能使用数据库查询实现，但是已经出现性能问题，或者不满足产品的高亮相关度排序需求时。这种情况就会对系统的查询功能进行技术改造，转而使用全文检索，而es就是首选。改造业务流程如图：</p><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image02.png"></p><h4 id="3-2-2-系统新增加的模块"><a href="#3-2-2-系统新增加的模块" class="headerlink" title="3.2.2 系统新增加的模块"></a>3.2.2 系统新增加的模块</h4><p>产品一开始就要实现高亮相关度排序等全文检索的功能。针对这种情况，企业实现功能业务流程如图：</p><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image03.png"></p><h3 id="3-3-相关软件的安装的安装"><a href="#3-3-相关软件的安装的安装" class="headerlink" title="3.3 相关软件的安装的安装"></a>3.3 相关软件的安装的安装</h3><h4 id="3-2-1-ElasticSearch的安装"><a href="#3-2-1-ElasticSearch的安装" class="headerlink" title="3.2.1 ElasticSearch的安装"></a>3.2.1 ElasticSearch的安装</h4><p>本篇博客使用6.8.0版本，而目前ElasticSearch已经更新7.9版本，但大部分内容是相同的。</p><p>环境建议使用JDK1.8及以上。</p><p>Elasticsearch分为Linux和Window版本，基于我们主要学习的是Elasticsearch的Java客户端的使用，所以我们课程中使用的是安装较为简便的Window版本，项目上线后，公司的运维人员会安装Linux版的ES供我们连接使用。</p><p>Elasticsearch的官方地址：<a href="https://www.elastic.co/cn/downloads/past-releases">https://www.elastic.co/cn/downloads/past-releases</a></p><p><a href="https://elasticsearch.cn/download/">ElasticSearch中文社区下载地址</a>关于ElasticSearch的东西都可以在这里下载。</p><p>下载完毕后，解压压缩包，并点击bin目录下的elasticsearch.bat启动启。</p><p>启动成功后，访问localhost:9200，并显示以下内容，则安装成功</p><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image04.png"></p><h4 id="3-2-2-集成IK分词器"><a href="#3-2-2-集成IK分词器" class="headerlink" title="3.2.2 集成IK分词器"></a><strong>3.2.2 集成IK分词器</strong></h4><p>将解压后的压缩包放在ElasticSearch的plugins中</p><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image08.png"></p><p><strong>测试</strong></p><p>IK分词器有两种分词模式：ik_max_word和ik_smart模式。</p><ul><li>ik_max_word：会将文本做最细粒度的拆分</li><li>ik_smart：会做最粗粒度的拆分，智能拆分</li></ul><p>通过发送请求：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请求方式：POST</span><br><span class="line">请求url：http://127.0.0.1:9200/_analyze</span><br><span class="line">请求体：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;南京市长江大桥&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最细粒度的拆分结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;南京市&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;南京&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;市长&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;市&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;长江大桥&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;长江&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;大桥&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">6</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>智能拆分结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;南京市&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;长江大桥&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加扩展词典和停用词典</strong></p><p><strong>停用词</strong>：有些词在文本中出现的频率非常高。但对本文的语义产生不了多大的影响。例如英文的a、an、the、of等。或中文的”的、了、呢等”。这样的词称为停用词。停用词经常被过滤掉，不会被进行索引。在检索的过程中，如果用户的查询词中含有停用词，系统会自动过滤掉。停用词可以加快索引的速度，减少索引库文件的大小。</p><p><strong>扩展词</strong>：就是不想让哪些词被分开，让他们分成一个词。比如上面的<strong>江大桥</strong></p><p><code>南京市长江大桥</code></p><p>南京市，长江大桥</p><p>南京，市长，江大桥</p><p>江大桥拆分出来，</p><p><strong>自定义扩展词库</strong></p><p>1、进入到ElasticSerach安装路径\plugins\elasticsearch-analysis-ik-6.8.0\config目录下, 新增自定义词典myext_dict.dic</p><p>输入 ：江大桥</p><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image09.png"></p><p>2、将我们自定义的扩展词典文件，配置到IKAnalyzer.cfg.xml文件中</p><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image10.png"></p><p>3、重启访问</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请求方式：POST</span><br><span class="line">请求url：http://127.0.0.1:9200/_analyze</span><br><span class="line">请求体：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_smart&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;南京市长江大桥&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;南京市&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;市长&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;token&quot;</span>: <span class="string">&quot;江大桥&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-3-安装ElasticSearch-head"><a href="#3-2-3-安装ElasticSearch-head" class="headerlink" title="3.2.3 安装ElasticSearch-head"></a>3.2.3 安装ElasticSearch-head</h4><p>ElasticSearch-head也是ElasticSearch的一个客户端，通过图形化界面对ElasticSearch进行相应的操作。</p><p>可在Chrome浏览器安装该插件，也可以下载相应的压缩包。</p><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image05.png"></p><h4 id="3-2-4-kinaba的安装"><a href="#3-2-4-kinaba的安装" class="headerlink" title="3.2.4 kinaba的安装"></a>3.2.4 kinaba的安装</h4><p>Kibana是ElasticSearch的数据可视化和实时分析的工具，利用Elasticsearch的聚合功能，生成各种图表，如柱形图，线状图，饼图等。</p><p>下载完后解压</p><p><strong>配置</strong></p><p>1、进入安装目录下的config目录的kibana.yml文件</p><p>修改elasticsearch服务器的地址：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">elasticsearch.url:</span> <span class="string">&quot;http://localhost:9200&quot;</span></span><br></pre></td></tr></table></figure><p>2、修改kibana配置支持中文：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure><p><strong>启动访问</strong></p><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image06.png"></p><p><strong>常使用的功能</strong></p><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image07.png"></p><p>可在这里通过一些命令进行相应的操作。</p><h2 id="四、核心概念"><a href="#四、核心概念" class="headerlink" title="四、核心概念"></a>四、核心概念</h2><p>Elasticsearch是面向文档(document oriented)的，这意味着它可以存储整个对象或文档(document)。然而它不仅仅是存储，还会索引(index)每个文档的内容使之可以被搜索。在Elasticsearch中，你可以对文档（而非成行成列的数据）进行索引、搜索、排序、过滤。Elasticsearch比传统关系型数据库如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">索引库(indexes)-------------&gt;数据库(Databases)</span><br><span class="line">类型(type)------------------&gt;数据表(Table)</span><br><span class="line">文档(Document)--------------&gt;行(Row)</span><br><span class="line">字段(Field)-----------------&gt;列(Columns)</span><br><span class="line">映射(mappings)--------------&gt;DDL创建数据库表的语句</span><br></pre></td></tr></table></figure><p>详细说明：</p><table><thead><tr><th align="left">概念</th><th>说明</th></tr></thead><tbody><tr><td align="left">索引库（indexes)</td><td>索引库包含一堆相关业务，结构相似的文档document数据，比如说建立一个商品product索引库，里面可能就存放了所有的商品数据。</td></tr><tr><td align="left">类型（type）</td><td>type是索引库中的一个逻辑数据分类，一个type下的document，都有相同的field，类似于数据库中的表。比如商品type，里面存放了所有的商品document数据。<strong>6.0版本以后一个index只能有1个type，6.0版本以前每个index里可以是一个或多个type。7.0以后，没有type这个概念了</strong></td></tr><tr><td align="left">文档（document）</td><td>文档是es中的存入索引库最小数据单元，一个document可以是一条客户数据，一条商品数据，一条订单数据，通常用JSON数据结构表示。document存在索引库下的type类型中。</td></tr><tr><td align="left">字段（field）</td><td>Field是Elasticsearch的最小单位。一个document里面有多个field，每个field就是一个数据字段</td></tr><tr><td align="left">映射配置（mappings）</td><td>对type文档结构的约束叫做<code>映射(mapping)</code>，用来定义document的每个字段的约束。如：字段的数据类型、是否分词、是否索引、是否存储等特性。type是模拟mysql中的table概念。表是有结构的，也就是表中每个字段都有约束信息；</td></tr></tbody></table><h2 id="五、基本操作"><a href="#五、基本操作" class="headerlink" title="五、基本操作"></a>五、基本操作</h2><p>官方说明文档地址： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a> </p><p>实际开发中，通过客户端对ElasticSearch进行操作有五种方式：</p><ul><li>第一类：发送http请求(RESTful风格)操作：9200端口<ul><li>使用Postman发送请求直接操作。</li><li>使用ElasticSearch-head-master图形化界面插件操作</li><li>使用Elastic官方数据可视化的平台Kibana进行操作</li></ul></li><li>第二类：通过Java代码操作：9300端口<ul><li>Elasticsearch提供的Java API 客户端进行操作。</li><li>Spring Data ElasticSearch 持久层框架进行操作。</li></ul></li></ul><p><img src="/2020/10/25/%E6%8A%80%E6%9C%AF%E6%9D%82%E8%B0%88/ElasticSearch/image11.png"></p><p>对ElasticSearch进行的每一个操作都是一次Http请求，通过Rest风格的请求来区分不同的请求。</p><p>以下的所有请求都是在kinaba的devtoots中进行操作的。</p><h3 id="5-1-索引库-index-操作"><a href="#5-1-索引库-index-操作" class="headerlink" title="5.1 索引库(index)操作"></a>5.1 索引库(index)操作</h3><h4 id="5-1-1-创建索引库"><a href="#5-1-1-创建索引库" class="headerlink" title="5.1.1 创建索引库"></a>5.1.1 创建索引库</h4><p>发送请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 请求方法：PUT，对应http请求:http:&#x2F;&#x2F;localhost:9200&#x2F;wuxie，注意请求类型为PUT</span><br><span class="line">PUT &#x2F;wuxie</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;shards_acknowledged&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;index&quot;</span> : <span class="string">&quot;wuxie&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>“acknowledged” : true, 代表操作成功<br>“shards_acknowledged” : true, 代表分片操作成功<br>“index” : “wuxie” 表示创建的索引库名称</p><p>注意：创建索引库的分片数默认5片，在7.0.0之后的ElasticSearch版本中，默认分片数变为1片；</p><h4 id="5-1-2-查询索引库"><a href="#5-1-2-查询索引库" class="headerlink" title="5.1.2 查询索引库"></a>5.1.2 查询索引库</h4><p>发送请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 请求方法GET</span><br><span class="line">GET &#x2F;wuxie</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;heima【索引库名】&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;aliases【别名】&quot;</span> : &#123; &#125;,</span><br><span class="line">    <span class="attr">&quot;mappings【映射】&quot;</span> : &#123; &#125;,</span><br><span class="line">    <span class="attr">&quot;settings【索引库设置】&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;index【索引】&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;creation_date【创建时间】&quot;</span> : <span class="string">&quot;1573610302775&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;number_of_shards【索引库分片数】&quot;</span> : <span class="string">&quot;5&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;number_of_replicas【索引库副本数】&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;uuid【唯一标识】&quot;</span> : <span class="string">&quot;6Ffe20CIT76KchAcvqE6NA&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;version【版本】&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;created&quot;</span> : <span class="string">&quot;6080099&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;provided_name【索引库名称】&quot;</span> : <span class="string">&quot;wuxie&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-1-3-删除索引库"><a href="#5-1-3-删除索引库" class="headerlink" title="5.1.3 删除索引库"></a>5.1.3 删除索引库</h4><p>发送请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 请求方法：DELETE</span><br><span class="line">DELETE &#x2F;wuxie</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-类型-type-和映射-mapping-操作"><a href="#5-2-类型-type-和映射-mapping-操作" class="headerlink" title="5.2 类型(type)和映射(mapping)操作"></a>5.2 类型(type)和映射(mapping)操作</h3><p>有了<code>索引库</code>，等于有了数据库中的<code>database</code>。接下来就需要索引库中的<code>类型</code>了，也就是数据库中的<code>表</code>。</p><p>创建数据库表需要设置字段约束，索引库也一样，在创建索引库的类型时，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做<code>映射(mapping)</code>。</p><h4 id="5-2-1-添加映射"><a href="#5-2-1-添加映射" class="headerlink" title="5.2.1 添加映射"></a>5.2.1 添加映射</h4><p>给wuxie这个索引库添加了一个名为<code>goods</code>的类型，并且在类型中设置了4个字段：</p><ul><li>title：商品标题</li><li>subtitle: 商品子标题</li><li>images：商品图片</li><li>price：商品价格</li></ul><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /wuxie/goods/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;subtitle&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;images&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;index&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;float&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;index&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> : <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引库名/_mapping/类型名称 或 索引库名/类型名称/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;字段名称&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;type【类型】&quot;</span>: <span class="string">&quot;类型&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;index【是否索引】&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;store【是否存储】&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">&quot;analyzer【分析器】&quot;</span>: <span class="string">&quot;分词器&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型名称：就是前面将的type的概念，类似于数据库中的表<br>字段名：任意填写，下面指定许多属性，例如：</p><ul><li><p>type：类型，Elasticsearch中支持的数据类型非常丰富，说几个关键的：</p><ol><li><p>String类型，又分两种：</p><ul><li>text：可分词</li><li>keyword：不可分词，数据会作为完整字段进行匹配</li></ul></li><li><p>Numerical：数值类型，分两类</p><ul><li>基本数据类型：long、interger、short、byte、double、float、half_float</li><li>浮点数的高精度类型：scaled_float</li></ul></li><li><p>Date：日期类型</p></li><li><p>Array：数组类型</p></li><li><p>Object：对象</p></li></ol></li><li><p>index：是否索引，默认为true，也就是说你不进行任何配置，所有字段都会被索引。</p><ul><li>true：字段会被索引，则可以用来进行搜索。默认值就是true</li><li>false：字段不会被索引，不能用来搜索</li></ul></li><li><p>store：是否将数据进行独立存储，默认为false</p><ul><li>原始的文本会存储在<code>_source</code>里面，默认情况下其他提取出来的字段都不是独立存储的，是从<code>_source</code>里面提取出来的。当然你也可以独立的存储某个字段，只要设置store:true即可，获取独立存储的字段要比从_source中解析快得多，但是也会占用更多的空间，所以要根据实际业务需求来设置，默认为false。</li></ul></li><li><p>analyzer：分词器，这里的<code>ik_max_word</code>即使用ik分词器</p></li></ul><h4 id="5-2-2-查看映射"><a href="#5-2-2-查看映射" class="headerlink" title="5.2.2 查看映射"></a>5.2.2 查看映射</h4><p>发送请求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /wuxie/goods/_mapping</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;wuxie&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="attr">&quot;goods&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;properties&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;image&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;index&quot;</span> : <span class="literal">false</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;fields&quot;</span> : &#123;</span><br><span class="line">              <span class="attr">&quot;keyword&quot;</span> : &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;ignore_above&quot;</span> : <span class="number">256</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;float&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;subtitle&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-3-一次创建索引库及配置映射-常用"><a href="#5-2-3-一次创建索引库及配置映射-常用" class="headerlink" title="5.2.3 一次创建索引库及配置映射(常用)"></a>5.2.3 一次创建索引库及配置映射(常用)</h4><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">PUT /wuxie</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;goods&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">          </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;subtitle&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;images&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;index&quot;</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;price&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;float&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;index&quot;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;shards_acknowledged&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;index&quot;</span> : <span class="string">&quot;heima1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求内容解释</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT /&#123;索引库名称&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;settings【设置】&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;mappings【映射】&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;&#123;类型名称&#125;&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;title&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type【类型】&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;index【是否索引】&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;store【是否存储】&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">&quot;analyzer【分析器】&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-文档操作"><a href="#5-3-文档操作" class="headerlink" title="5.3 文档操作"></a>5.3 文档操作</h3><p>文档，即索引库中某个类型下的数据，会根据规则创建索引，将来用来搜索。可以类比做数据库中的每一行数据。</p><p>如果不指定id，会随机生成一个字符串作为id。</p><h4 id="5-3-1-新增文档"><a href="#5-3-1-新增文档" class="headerlink" title="5.3.1 新增文档"></a>5.3.1 新增文档</h4><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 随机id</span><br><span class="line">POST /wuxie/goods</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;images&quot;</span>:<span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span>:<span class="number">2699.00</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 指定id</span><br><span class="line">POST /wuxie/goods/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;images&quot;</span>:<span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span>:<span class="number">2699.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;EwVLY24BL4R5dXuhZ--1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果解释</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index【索引库】&quot;</span> : <span class="string">&quot;heima&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type【类型】&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id【主键id】&quot;</span> : <span class="string">&quot;EwVLY24BL4R5dXuhZ--1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version【版本，每次对该文档操作都会自增1】&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;result【操作结果，可以是updated、deleted】&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards【分片】&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total【总数】&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful【成功】&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;failed【失败】&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到结果显示为：<code>created</code>，是创建成功了。</p><p>另外，需要注意的是，在响应结果中有个<code>_id</code>字段，这个就是这条文档数据的<code>唯一标示</code>，以后的增删改查都依赖这个id作为唯一标示。可以看到id的值为：EwVLY24BL4R5dXuhZ–1，这里我们新增时没有指定id，所以是ES帮我们随机生成的id。</p><h4 id="5-3-2-查看文档"><a href="#5-3-2-查看文档" class="headerlink" title="5.3.2 查看文档"></a>5.3.2 查看文档</h4><p>根据rest风格，新增是put，查询是get(post也可以用来做查询)，不过查询一般都需要条件，这里我们把刚刚生成数据的id带上。</p><p>发送请求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /wuxie/goods/EwVLY24BL4R5dXuhZ--1</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;_index【索引库】&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type【类型】&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id【主键id】&quot;</span> : <span class="string">&quot;EwVLY24BL4R5dXuhZ--1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version【版本】&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;found【查询结果】&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;_source【源文档信息】&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span> : <span class="number">2699.0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>_source</code>：源文档信息，所有的数据都在里面。</li><li><code>_id</code>：这条文档的唯一标示</li><li>found：查询结果，返回true代表查到，false代表没有</li></ul><h4 id="5-3-3-修改文档"><a href="#5-3-3-修改文档" class="headerlink" title="5.3.3 修改文档"></a>5.3.3 修改文档</h4><p>同新增请求相同，如果主键已存在则会将原有内容覆盖。</p><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /wxuie/goods/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;超米手机&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;images&quot;</span>:<span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;price&quot;</span>:<span class="number">3899.00</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wxuie&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;updated&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：更新后的result为updated，就代表修改成功。且每修改一次version自增1。</p><h4 id="5-3-4-删除文档"><a href="#5-3-4-删除文档" class="headerlink" title="5.3.4 删除文档"></a>5.3.4 删除文档</h4><p>删除一个文档也不会立即从磁盘上移除，它只是被标记成已删除。Elasticsearch将会在你之后添加更多索引的时候才会在后台进行删除内容的清理。</p><p>发送请求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /wuxie/goods/1</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> : <span class="number">3</span>,</span><br><span class="line">  <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;deleted&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到result结果是：deleted，数据被删除。如果删除不存在的问题，result：not_found</p><p><strong>根据条件删除</strong></p><p>发送请求：根据查询的条件删除，这里的查询会在后面讲述。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>:<span class="string">&quot;小米&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took【耗时】&quot;</span> : <span class="number">58</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;total【总数】&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;deleted【删除总数】&quot;</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;batches&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;version_conflicts&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;noops&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;retries&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;bulk&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;search&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;throttled_millis&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;requests_per_second&quot;</span> : <span class="number">-1.0</span>,</span><br><span class="line">  <span class="attr">&quot;throttled_until_millis&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;failures&quot;</span> : [ ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-批量操作"><a href="#5-4-批量操作" class="headerlink" title="5.4 批量操作"></a>5.4 批量操作</h3><p>Bulk 操作是将文档的增删改查一些列操作，通过一次请求全都做完。减少网络传输次数。相当于，将多个新增、修改、删除的请求写到一次请求当中。</p><p>注意：bulk的请求体与其他的请求体稍有不同！</p><p><strong>请求语法</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/goods/_bulk</span><br><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body &#125;\n</span><br><span class="line">&#123; action: &#123; metadata &#125;&#125;\n</span><br><span class="line">&#123; request body &#125;\n</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>语法解析：</strong></p><ul><li>每行一定要以换行符(\n)结尾，包括最后一行</li><li>action/metadata 部分，指定做什么操作<ul><li>action代表操作的动作，必须是如下的动作之一<ul><li>create：如果文档不存在，那么就创建</li><li>index：创建一个新的文档或者替换现有文档</li><li>update：部分更新文档</li><li>delete：删除一个文档，这种操作不带请求体</li></ul></li><li>metadata，是文档的元数据，包括索引(<code>_index</code>)，类型(<code>_type</code>)，id(<code>_id</code>)…等</li></ul></li><li>request body 请求体，正常的新增文档的请求体内容(注意，不要带换行符)</li></ul><p>隔离：每个操作互不影响。操作失败的行会返回其失败信息。</p><p>实际用法：bulk请求一次不要太大，否则积压到内存中，性能会下降。所以，一次请求几千个操作、大小控制在5M-15M之间正好。</p><p><strong>案例</strong></p><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/goods/_bulk</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,<span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;大米手机&quot;</span>,<span class="attr">&quot;images&quot;</span>:<span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,<span class="attr">&quot;price&quot;</span>:<span class="number">3288</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,<span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;小米手机&quot;</span>,<span class="attr">&quot;images&quot;</span>:<span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,<span class="attr">&quot;price&quot;</span>:<span class="number">2699</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,<span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;小米电视4A&quot;</span>,<span class="attr">&quot;images&quot;</span>:<span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,<span class="attr">&quot;price&quot;</span>:<span class="number">4288</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,<span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>: <span class="string">&quot;华为手机&quot;</span>,<span class="attr">&quot;images&quot;</span>: <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,<span class="attr">&quot;price&quot;</span>: <span class="number">5288</span>,<span class="attr">&quot;subtitle&quot;</span>: <span class="string">&quot;小米&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;index&quot;</span>:&#123;<span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,<span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">&quot;title&quot;</span>:<span class="string">&quot;apple手机&quot;</span>,<span class="attr">&quot;images&quot;</span>:<span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,<span class="attr">&quot;price&quot;</span>:<span class="number">5899.00</span>&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>请求体的内容不要换行</li><li>请注意 delete 动作不能有请求体</li><li>谨记最后一个换行符不要落下。</li></ul><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">41</span>,</span><br><span class="line">  <span class="attr">&quot;errors&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;items&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;FFTEhm4BO0vjk-su75eC&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;result&quot;</span> : <span class="string">&quot;created&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> : <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span> : <span class="number">201</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个子请求都是独立执行，因此某个子请求的失败不会对其他子请求的成功与否造成影响。 如果其中任何子请求失败，最顶层的 error 标志被设置为 true ，并且在相应的请求报告出错误明细。</p><p>status属性：代表响应状态码</p><h2 id="六、请求头查询"><a href="#六、请求头查询" class="headerlink" title="六、请求头查询"></a>六、请求头查询</h2><p>Elasticsearch提供了一个基于JSON的，在请求体内编写查询语句的查询方式。称之为请求体查询。  Elasticsearch 使用它以简单的 JSON接口来展现 Lucene 功能的绝大部分。这种查询语言相对于使用晦涩难懂的查询字符串的方式，更灵活、更精确、易读和易调试。</p><p>这种查询还有一种称呼：Query DSL (Query Domain Specific Language)，领域特定语言。</p><h3 id="6-1-基本查询"><a href="#6-1-基本查询" class="headerlink" title="6.1 基本查询"></a>6.1 基本查询</h3><h4 id="6-1-1-查询所有-match-al"><a href="#6-1-1-查询所有-match-al" class="headerlink" title="6.1.1 查询所有(match_al)"></a>6.1.1 查询所有(match_al)</h4><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">请求方法：POST</span><br><span class="line">请求地址：http://127.0.0.1:9200/索引库名/_search</span><br><span class="line"></span><br><span class="line">POST /&#123;索引库&#125;/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;查询类型&quot;</span>:&#123;</span><br><span class="line">            <span class="attr">&quot;查询条件&quot;</span>:<span class="string">&quot;查询条件值&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的query代表一个查询对象，里面可以有不同的查询属性</p><ul><li>查询类型：<ul><li>例如：<code>match_all(代表查询所有)</code>， <code>match</code>，<code>term</code> ， <code>range</code> 等等</li></ul></li><li>查询条件：查询条件会根据类型的不同，写法也有差异</li></ul><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took【查询花费时间，单位毫秒】&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out【是否超时】&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards【分片信息】&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total【总数】&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful【成功】&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped【忽略】&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed【失败】&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits【搜索命中结果】&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total【命中总数】&quot;</span> : <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;max_score【所有查询结果中，文档的最高得分】&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">&quot;hits【命中结果集合】&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index【索引库】&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type【类型】&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id【主键】&quot;</span> : <span class="string">&quot;ADWoZ24Bx8DA1HO-R9DD&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score【当前结果匹配得分】&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source【源文档信息】&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米电视4A&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">4288</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;_zWoZ24Bx8DA1HO-R8_D&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;_jWoZ24Bx8DA1HO-R8_D&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;大米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">3288</span></span><br><span class="line">&#125;&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="6-1-2-匹配查询-match"><a href="#6-1-2-匹配查询-match" class="headerlink" title="6.1.2 匹配查询(match)"></a>6.1.2 匹配查询(match)</h4><p><code>match</code>类型查询，会把查询条件进行分词，然后进行查询，多个词条之间是or的关系</p><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;小米手机&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.5753642</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;_zWoZ24Bx8DA1HO-R8_D&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;ADWoZ24Bx8DA1HO-R9DD&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米电视4A&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">4288</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;_jWoZ24Bx8DA1HO-R8_D&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;大米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">3288</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的案例中，不仅会查询到电视，而且与小米相关的都会查询到。某些情况下，我们需要更精确查找，我们希望这个关系变成<code>and</code>，可以这样做：</p><p>发送请求：</p><p>本例中，只有同时包含<code>小米</code>和<code>手机</code>的词条才会被搜索到。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;query【查询匹配的内容】&quot;</span>: <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;operator【查询的关键词之间的关系，默认是or，如小米手机被分为小米和手机，如果是or就会查询title包含小米或手机的文档】&quot;</span>: <span class="string">&quot;and&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">4</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.5753642</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;_zWoZ24Bx8DA1HO-R8_D&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-1-3-多字段匹配查询-multi-match"><a href="#6-1-3-多字段匹配查询-multi-match" class="headerlink" title="6.1.3 多字段匹配查询(multi_match)"></a>6.1.3 多字段匹配查询(multi_match)</h4><p><code>multi_match</code>与<code>match</code>类似，不同的是它可以在多个字段中查询。</p><p>发送请求：</p><p>本例中，我们在title字段和subtitle字段中查询<code>小米</code>这个词</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;query&quot;</span>: <span class="string">&quot;小米&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;fields&quot;</span>: [<span class="string">&quot;title&quot;</span>,<span class="string">&quot;subtitle&quot;</span>] #设置查询的多个字段</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;took&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span>: <span class="number">0.6099695</span>,</span><br><span class="line">        <span class="attr">&quot;hits&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;qfHnLG4BWrjRrOzL8Ywa&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;</span>: <span class="number">0.6099695</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;小米电视4A&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;images&quot;</span>: <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;price&quot;</span>: <span class="number">4288</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;qvHyLG4BWrjRrOzL9Yzn&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;</span>: <span class="number">0.2876821</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;华为手机&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;images&quot;</span>: <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;price&quot;</span>: <span class="number">5288</span>,</span><br><span class="line">                    <span class="attr">&quot;subtitle&quot;</span>: <span class="string">&quot;小米&quot;</span> #该文档的title并不包含小米关键词，而subtitle却有该关键词，所以也在查询结果中</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;qPHnLG4BWrjRrOzL3Yxl&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;</span>: <span class="number">0.2876821</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;images&quot;</span>: <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;price&quot;</span>: <span class="number">2699</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-1-4-关键词精确查询-term"><a href="#6-1-4-关键词精确查询-term" class="headerlink" title="6.1.4 关键词精确查询(term)"></a>6.1.4 关键词精确查询(term)</h4><p>term查询，精确的关键词匹配查询，不对象查询条件进行分词</p><p>发送请求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      &quot;title&quot;: &#123; # 设置映射时，这个字段是text，且&quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &quot;value&quot;: &quot;小米&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.6931472</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;CzXDZ24Bx8DA1HO-nNDZ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.6931472</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;DDXDZ24Bx8DA1HO-nNDZ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米电视4A&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">4288</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-1-5-多关键词精确查询-terms"><a href="#6-1-5-多关键词精确查询-terms" class="headerlink" title="6.1.5 多关键词精确查询(terms)"></a>6.1.5 多关键词精确查询(terms)</h4><p><code>terms</code> 查询和 term 查询一样，但它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件，类似于mysql的in</p><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查询价格为2699或4288的商品</span><br><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: [<span class="number">2699</span>,<span class="number">4288</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.6931472</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;CzXDZ24Bx8DA1HO-nNDZ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.6931472</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;DDXDZ24Bx8DA1HO-nNDZ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米电视4A&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">4288</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-结果过滤"><a href="#6-2-结果过滤" class="headerlink" title="6.2 结果过滤"></a>6.2 结果过滤</h3><p>默认情况下，elasticsearch在搜索的结果中，会把文档中保存在<code>_source</code>的所有字段都返回。如果我们只想获取其中的部分字段，我们可以添加<code>_source</code>的过滤。</p><h4 id="6-2-1-指定字段"><a href="#6-2-1-指定字段" class="headerlink" title="6.2.1 指定字段"></a>6.2.1 指定字段</h4><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 指定查询结果中，只显示title和price两个字段</span><br><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;title&quot;</span>,<span class="string">&quot;price&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: <span class="number">2699</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">8</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;fuvESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">4288</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米电视4A&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;fevESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">2699</span>,</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-2-过滤指定字段：includes和excludes"><a href="#6-2-2-过滤指定字段：includes和excludes" class="headerlink" title="6.2.2 过滤指定字段：includes和excludes"></a>6.2.2 过滤指定字段：includes和excludes</h4><p>我们也可以通过：</p><ul><li>includes：来指定想要显示的字段</li><li>excludes：来指定不想要显示的字段</li></ul><p>二者都是可选的。</p><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;excludes&quot;</span>:[<span class="string">&quot;title&quot;</span>,<span class="string">&quot;price&quot;</span>] # 查询结果不显示title和price</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: <span class="number">2699</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;fuvESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;fevESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-高级查询"><a href="#6-3-高级查询" class="headerlink" title="6.3 高级查询"></a>6.3 高级查询</h3><h4 id="6-3-1-布尔组合-bool"><a href="#6-3-1-布尔组合-bool" class="headerlink" title="6.3.1 布尔组合(bool)"></a>6.3.1 布尔组合(bool)</h4><p><code>bool</code>把各种其它查询通过<code>must</code>（必须 ）、<code>must_not</code>（必须不）、<code>should</code>（应该）的方式进行组合</p><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">post /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;bool&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;must&quot;</span>:     &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;小米&quot;</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">&quot;must_not&quot;</span>: &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;title&quot;</span>:  <span class="string">&quot;电视&quot;</span> &#125;&#125;,</span><br><span class="line">        <span class="attr">&quot;should&quot;</span>:   &#123; <span class="attr">&quot;match&quot;</span>: &#123; <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;手机&quot;</span> &#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;took&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="attr">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;successful&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">&quot;skipped&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;max_score&quot;</span>: <span class="number">0.5753642</span>,</span><br><span class="line">        <span class="attr">&quot;hits&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;qPHnLG4BWrjRrOzL3Yxl&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;_score&quot;</span>: <span class="number">0.5753642</span>,</span><br><span class="line">                <span class="attr">&quot;_source&quot;</span>: &#123;</span><br><span class="line">                    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;images&quot;</span>: <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;price&quot;</span>: <span class="number">2699</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-2-范围查询-range"><a href="#6-3-2-范围查询-range" class="headerlink" title="6.3.2 范围查询(range)"></a>6.3.2 范围查询(range)</h4><p><code>range</code> 查询找出那些落在指定区间内的数字或者时间。<code>range</code>查询允许以下字符：</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">gt == (greater than)</td><td align="center">大于&gt;</td></tr><tr><td align="center">gte == (greater than equal)</td><td align="center">大于等于&gt;=</td></tr><tr><td align="center">lt == (less than)</td><td align="center">小于&lt;</td></tr><tr><td align="center">lte == (less than equal)</td><td align="center">小于等于&lt;=</td></tr></tbody></table><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查询价格大于等于2699，且小于4000元的所有商品。</span><br><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: &#123;<span class="attr">&quot;gte&quot;</span>: <span class="number">2699</span>,<span class="attr">&quot;lt&quot;</span>: <span class="number">4000</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;CjXDZ24Bx8DA1HO-nNDZ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;大米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">3288</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;CzXDZ24Bx8DA1HO-nNDZ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">2699</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-3-模糊查询-fuzzy"><a href="#6-3-3-模糊查询-fuzzy" class="headerlink" title="6.3.3 模糊查询(fuzzy)"></a>6.3.3 模糊查询(fuzzy)</h4><p>fuzzy自动将拼写错误的搜索文本，进行纠正，纠正以后去尝试匹配索引中的数据。它允许用户搜索词条与实际词条出现偏差，但是偏差的编辑距离不得超过2：</p><p>修改偏差值：搜索关键词的偏差，默认就是2，我们可以通过fuzziness修改。</p><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fuzzy&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;applaa&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;fuzziness&quot;</span>: <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">26</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.6814182</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;gOvESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.6814182</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;apple手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">5899.0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-查询排序"><a href="#6-4-查询排序" class="headerlink" title="6.4 查询排序"></a>6.4 查询排序</h3><p><code>sort</code> 可以让我们按照不同的字段进行排序，并且通过<code>order</code>指定排序的方式。desc降序，asc升序。</p><p>发送请求</p><p>假定我们想要结合使用 price和 _score（得分） 进行查询，并且匹配的结果首先按照价格排序，然后按照相关性得分排序</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span>:&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">      &#123; <span class="attr">&quot;price&quot;</span>: &#123; <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span> &#125;&#125;,</span><br><span class="line">      &#123; <span class="attr">&quot;_score&quot;</span>: &#123; <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">11</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">8</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;fevESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">2699</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> : [</span><br><span class="line">          <span class="number">2699.0</span>,</span><br><span class="line">          <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;gevGSXUBkhVKNdm-jtYz&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;OPPO手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://www.baidu.com/1.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="string">&quot;3288.00&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> : [</span><br><span class="line">          <span class="number">3288.0</span>,</span><br><span class="line">          <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;fOvESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;大米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">3288</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> : [</span><br><span class="line">          <span class="number">3288.0</span>,</span><br><span class="line">          <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;guvGSXUBkhVKNdm-jtYz&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;VIVO手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://www.baidu.com/31.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="string">&quot;3288.00&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> : [</span><br><span class="line">          <span class="number">3288.0</span>,</span><br><span class="line">          <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;g-vGSXUBkhVKNdm-jtYz&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;一加手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://www.baidu.com/21.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="string">&quot;3288.00&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> : [</span><br><span class="line">          <span class="number">3288.0</span>,</span><br><span class="line">          <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;fuvESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米电视4A&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">4288</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> : [</span><br><span class="line">          <span class="number">4288.0</span>,</span><br><span class="line">          <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;f-vESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;华为手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">5288</span>,</span><br><span class="line">          <span class="attr">&quot;subtitle&quot;</span> : <span class="string">&quot;小米&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> : [</span><br><span class="line">          <span class="number">5288.0</span>,</span><br><span class="line">          <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;gOvESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;apple手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">5899.0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> : [</span><br><span class="line">          <span class="number">5899.0</span>,</span><br><span class="line">          <span class="number">1.0</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-5-高亮查询"><a href="#6-5-高亮查询" class="headerlink" title="6.5 高亮查询"></a>6.5 高亮查询</h3><p>什么是高亮显示：在进行关键字搜索时，搜索出的内容中的关键字会显示不同的颜色，称之为高亮。</p><p>ElasticSearch可以对查询内容中的关键字部分，进行标签和样式(高亮)的设置。</p><p>在使用match查询的同时，加上一个highlight属性：</p><ul><li>pre_tags：前置标签</li><li>post_tags：后置标签</li><li>fields：需要高亮的字段<ul><li>title：这里声明title字段需要高亮，后面可以为这个字段设置特有配置，也可以空</li></ul></li></ul><p><strong>发送请求</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 高亮 查询</span><br><span class="line">POST /wuxie/goods/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;小米&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span>: <span class="string">&quot;&lt;font sytle=&#x27;color:red;&#x27;&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span>: <span class="string">&quot;&lt;/font&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;title&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>响应结果</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">49</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">0.8142733</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;fuvESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.8142733</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米电视4A&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">4288</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;highlight&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;&lt;font sytle=&#x27;color:red;&#x27;&gt;小米&lt;/font&gt;电视4A&quot;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;fevESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">0.2876821</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;小米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">2699</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;highlight&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;&lt;font sytle=&#x27;color:red;&#x27;&gt;小米&lt;/font&gt;手机&quot;</span> # 此时返回的关键词使用hightlight被tags包裹了</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-分页查询"><a href="#6-6-分页查询" class="headerlink" title="6.6 分页查询"></a>6.6 分页查询</h3><p>发送请求</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /wuxie/goods/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>size：每页显示多少条 </li><li>from：当前页的起始索引，int from = (当前页 - 1) * 每页条数</li></ul><p>响应结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span> : <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> : <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> : <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span> : <span class="number">8</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;gevGSXUBkhVKNdm-jtYz&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;OPPO手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://www.baidu.com/1.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="string">&quot;3288.00&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> : <span class="string">&quot;wuxie&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> : <span class="string">&quot;goods&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> : <span class="string">&quot;fOvESXUBkhVKNdm-E9bF&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> : <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;title&quot;</span> : <span class="string">&quot;大米手机&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;images&quot;</span> : <span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;price&quot;</span> : <span class="number">3288</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、高级Rest客户端"><a href="#七、高级Rest客户端" class="headerlink" title="七、高级Rest客户端"></a>七、高级Rest客户端</h2><h3 id="7-1-环境搭建"><a href="#7-1-环境搭建" class="headerlink" title="7.1 环境搭建"></a>7.1 环境搭建</h3><p>相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--elasticsearch的高级别rest客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--elasticsearch的rest客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--elasticsearch的核心jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将RestHighLevelClient对象注入Spring容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;elasticsearch&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticSearchConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化RestHighLevelClient，将该对象注入IOC容器</span></span><br><span class="line">    <span class="meta">@Bean(destroyMethod = &quot;close&quot;)</span><span class="comment">//销毁时调用close方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//RestClient客户端构建器对象</span></span><br><span class="line">        RestClientBuilder restClientBuilder = RestClient.builder(<span class="keyword">new</span> HttpHost(host, port, <span class="string">&quot;http&quot;</span>));</span><br><span class="line">        <span class="comment">//操作es的高级rest客户端对象</span></span><br><span class="line">        RestHighLevelClient restHighLevelClient = <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br><span class="line">        <span class="keyword">return</span> restHighLevelClient;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//getter ,setter,toString..省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置主机和端口号</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># es服务地址</span></span><br><span class="line"><span class="string">elasticsearch.host=127.0.0.1</span></span><br><span class="line"><span class="comment"># es服务端口</span></span><br><span class="line"><span class="string">elasticsearch.port=9200</span></span><br></pre></td></tr></table></figure><h3 id="7-2-操作索引库"><a href="#7-2-操作索引库" class="headerlink" title="7.2 操作索引库"></a>7.2 操作索引库</h3><h4 id="7-2-1-创建索引库"><a href="#7-2-1-创建索引库" class="headerlink" title="7.2.1 创建索引库"></a>7.2.1 创建索引库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象，创建索引的请求</span></span><br><span class="line">    CreateIndexRequest indexRequest = <span class="keyword">new</span> CreateIndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取的是索引的客户端对象，可以对索引进行新增、删除、查询、配置映射等操作</span></span><br><span class="line">    IndicesClient indicesClient = client.indices();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.客户端发送请求，获取响应对象；</span></span><br><span class="line">    <span class="comment">// 第一个参数是请求对象，第二个参数是当前请求对象的配置（包括请求头、响应内容大小及异常的回调方法）</span></span><br><span class="line">    CreateIndexResponse response = indicesClient.create(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//3.显示响应结果信息</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;index:&quot;</span>+response.index());</span><br><span class="line">    System.out.println(<span class="string">&quot;acknowledged:&quot;</span>+response.isAcknowledged());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.关闭客户端</span></span><br><span class="line">    client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送请求中，传入请求对象的同时还设置了一个RequestOptions对象的静态成员变量DEFAULT。其含义是，配置当前请求选项为默认值。</p><p>其中RequestOptions对象的作用是用来配置请求，主要配置项目有请求头，缓冲区大小(默认100M)，异常处理器(warningsHandler)。默认情况下，缓冲区大小100MB，请求头及异常处理器为空。</p><h4 id="7-2-2-查看索引库"><a href="#7-2-2-查看索引库" class="headerlink" title="7.2.2 查看索引库"></a>7.2.2 查看索引库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建请求对象，查询索引的请求</span></span><br><span class="line">    GetIndexRequest request = <span class="keyword">new</span> GetIndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取操作索引的对象</span></span><br><span class="line">    IndicesClient indicesClient = client.indices();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据请求对象，执行索引的操作</span></span><br><span class="line">    GetIndexResponse response = indicesClient.get(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看响应信息</span></span><br><span class="line">    System.out.println(response.getAliases());</span><br><span class="line">    System.out.println(response.getMappings());</span><br><span class="line">    System.out.println(response.getSettings());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭客户端，由于配置了bean在销毁时调用close方法，所以可省略</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-3-删除索引库"><a href="#7-2-3-删除索引库" class="headerlink" title="7.2.3 删除索引库"></a>7.2.3 删除索引库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DeleteIndexRequest request = <span class="keyword">new</span> DeleteIndexRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    IndicesClient indices = client.indices();</span><br><span class="line">    AcknowledgedResponse response = indices.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.isAcknowledged());<span class="comment">//返回删除结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-操作映射"><a href="#7-3-操作映射" class="headerlink" title="7.3 操作映射"></a>7.3 操作映射</h3><h4 id="7-3-1-创建映射"><a href="#7-3-1-创建映射" class="headerlink" title="7.3.1 创建映射"></a>7.3.1 创建映射</h4><p>RestHighLevelClient配置映射，与kibana略有区别。在客户端中配置映射，不支持设置类型type。不设置type，并不代表没有，而是默认的type为<code>_doc</code>。</p><p>第一种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建映射信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putMapping</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建请求对象：索引、类型</span></span><br><span class="line">    <span class="comment">//索引库的名称传入构造函数</span></span><br><span class="line">    <span class="comment">//类型默认值，在6.8.0版本中是不支持设置类型的，默认类型是_doc</span></span><br><span class="line">    PutMappingRequest mappingRequest = <span class="keyword">new</span> PutMappingRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建请求体</span></span><br><span class="line">    XContentBuilder jsonBuilder = XContentFactory.jsonBuilder();</span><br><span class="line">    jsonBuilder.startObject()</span><br><span class="line">        .startObject(<span class="string">&quot;properties&quot;</span>)</span><br><span class="line">        .startObject(<span class="string">&quot;title&quot;</span>)</span><br><span class="line">        .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;text&quot;</span>).field(<span class="string">&quot;analyzer&quot;</span>,<span class="string">&quot;ik_max_word&quot;</span>)</span><br><span class="line">        .endObject()</span><br><span class="line">        .startObject(<span class="string">&quot;subtitle&quot;</span>)</span><br><span class="line">        .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;text&quot;</span>).field(<span class="string">&quot;analyzer&quot;</span>,<span class="string">&quot;ik_max_word&quot;</span>)</span><br><span class="line">        .endObject()</span><br><span class="line">        .startObject(<span class="string">&quot;category&quot;</span>)</span><br><span class="line">        .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">        .endObject()</span><br><span class="line">        .startObject(<span class="string">&quot;brand&quot;</span>)</span><br><span class="line">        .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;keyword&quot;</span>)</span><br><span class="line">        .endObject()</span><br><span class="line">        .startObject(<span class="string">&quot;images&quot;</span>)</span><br><span class="line">        .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;keyword&quot;</span>).field(<span class="string">&quot;index&quot;</span>,<span class="keyword">false</span>)</span><br><span class="line">        .endObject()</span><br><span class="line">        .startObject(<span class="string">&quot;price&quot;</span>)</span><br><span class="line">        .field(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;float&quot;</span>)</span><br><span class="line">        .endObject()</span><br><span class="line">        .endObject()</span><br><span class="line">        .endObject();</span><br><span class="line"></span><br><span class="line">    mappingRequest.source(jsonBuilder);<span class="comment">//将请求体封装到请求中</span></span><br><span class="line"></span><br><span class="line">    AcknowledgedResponse response = client.indices().putMapping(mappingRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(response.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *目标：配置映射。第二种方式，使用JSON字符串</span></span><br><span class="line"><span class="comment"> * 1.创建请求对象：配置映射</span></span><br><span class="line"><span class="comment"> *    设置索引库name</span></span><br><span class="line"><span class="comment"> *    设置配置映射请求体</span></span><br><span class="line"><span class="comment"> * 2.客户端发送请求，获取响应对象</span></span><br><span class="line"><span class="comment"> * 3.打印响应结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putMappingMethodTwo</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象：配置映射</span></span><br><span class="line">    PutMappingRequest request = <span class="keyword">new</span> PutMappingRequest(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="comment">//设置请求体，source(&quot;请求体json字符串&quot;，&quot;请求体的数据类型&quot;);</span></span><br><span class="line">    request.source(<span class="string">&quot;&#123;\&quot;properties\&quot;:&#123;\&quot;title\&quot;:&#123;\&quot;type\&quot;:\&quot;text\&quot;,\&quot;analyzer\&quot;:\&quot;ik_max_word\&quot;&#125;,\&quot;subtitle\&quot;:&#123;\&quot;type\&quot;:\&quot;text\&quot;,\&quot;analyzer\&quot;:\&quot;ik_max_word\&quot;&#125;,\&quot;category\&quot;:&#123;\&quot;type\&quot;:\&quot;keyword\&quot;&#125;,\&quot;brand\&quot;:&#123;\&quot;type\&quot;:\&quot;keyword\&quot;&#125;,\&quot;price\&quot;:&#123;\&quot;type\&quot;:\&quot;float\&quot;&#125;,\&quot;images\&quot;:&#123;\&quot;type\&quot;:\&quot;keyword\&quot;,\&quot;index\&quot;:false&#125;&#125;&#125;&quot;</span>, XContentType.JSON);</span><br><span class="line">    <span class="comment">//2.客户端发送请求，获取响应对象</span></span><br><span class="line">    AcknowledgedResponse response = client.indices().putMapping(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//3.打印响应结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;acknowledged::&quot;</span>+response.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-3-2-查看映射"><a href="#7-3-2-查看映射" class="headerlink" title="7.3.2 查看映射"></a>7.3.2 查看映射</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看映射信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMapping</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    GetMappingsRequest request = <span class="keyword">new</span> GetMappingsRequest();</span><br><span class="line">    <span class="comment">//设置索引库name</span></span><br><span class="line">    request.indices(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    GetMappingsResponse response = client.indices().getMapping(request, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(response.mappings().get(<span class="string">&quot;test&quot;</span>).sourceAsMap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-文档操作"><a href="#7-4-文档操作" class="headerlink" title="7.4 文档操作"></a>7.4 文档操作</h3><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span><span class="comment">//构建者模式创建Goods对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;<span class="comment">//商品的唯一标识</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String subtitle;<span class="comment">//子标题</span></span><br><span class="line">    <span class="keyword">private</span> String category;<span class="comment">//分类</span></span><br><span class="line">    <span class="keyword">private</span> String brand;<span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">private</span> Double price;<span class="comment">//价格</span></span><br><span class="line">    <span class="keyword">private</span> String images;<span class="comment">//图片地址</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-1-新增文档"><a href="#7-4-1-新增文档" class="headerlink" title="7.4.1 新增文档"></a>7.4.1 新增文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建索引库对象(IndexRequest)，封装索引、映射及主键id信息</span></span><br><span class="line">    <span class="comment">//String id = UUID.randomUUID().toString();</span></span><br><span class="line">    IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest().index(<span class="string">&quot;test&quot;</span>).type(<span class="string">&quot;_doc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建请求体，三种方式</span></span><br><span class="line">    <span class="comment">//1、使用字符串</span></span><br><span class="line">    <span class="comment">//2、通过对象构造JSON字符串</span></span><br><span class="line">    Goods goods = Goods.builder()</span><br><span class="line">        .id(<span class="number">1L</span>)</span><br><span class="line">        .images(<span class="string">&quot;http://www.baidu.com/1.jpg&quot;</span>)</span><br><span class="line">        .price(<span class="number">3666.00</span>)</span><br><span class="line">        .title(<span class="string">&quot;小米手机&quot;</span>)</span><br><span class="line">        .category(<span class="string">&quot;手机&quot;</span>)</span><br><span class="line">        .brand(<span class="string">&quot;小米&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、在source中写入key-value参数</span></span><br><span class="line">    <span class="comment">//indexRequest.source(XContentType.JSON,&quot;title&quot;,&quot;小米手机&quot;,&quot;brand&quot;,&quot;小米&quot;);</span></span><br><span class="line"></span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String requestBody = objectMapper.writeValueAsString(goods);</span><br><span class="line"></span><br><span class="line">    indexRequest.source(requestBody, XContentType.JSON);</span><br><span class="line"></span><br><span class="line">    IndexResponse response = client.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.打印响应结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;_index：：&quot;</span>+response.getIndex());</span><br><span class="line">    System.out.println(<span class="string">&quot;_type：：&quot;</span>+response.getType());</span><br><span class="line">    System.out.println(<span class="string">&quot;_id：：&quot;</span>+response.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;result：：&quot;</span>+response.getResult());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-2-修改文档"><a href="#7-4-2-修改文档" class="headerlink" title="7.4.2 修改文档"></a>7.4.2 修改文档</h4><p>根据id修改文档内容，与新增请求相同，如果存在该id，则修改该id的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//修改文档必须传入id值，此id是唯一标识,是ElasticSearch随机生成的，不同于映射中的id</span></span><br><span class="line">    UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest().index(<span class="string">&quot;test&quot;</span>).type(<span class="string">&quot;_doc&quot;</span>).id(<span class="string">&quot;r4NFWHUB6yUL1DAm1kGm&quot;</span>);</span><br><span class="line"></span><br><span class="line">    updateRequest.doc(XContentType.JSON,<span class="string">&quot;id&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;title&quot;</span>,<span class="string">&quot;华为手机&quot;</span>,<span class="string">&quot;brand&quot;</span>,<span class="string">&quot;华为&quot;</span>);</span><br><span class="line"></span><br><span class="line">    UpdateResponse response = client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.打印响应结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;_index：：&quot;</span>+response.getIndex());</span><br><span class="line">    System.out.println(<span class="string">&quot;_type：：&quot;</span>+response.getType());</span><br><span class="line">    System.out.println(<span class="string">&quot;_id：：&quot;</span>+response.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;result：：&quot;</span>+response.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-3-查询文档"><a href="#7-4-3-查询文档" class="headerlink" title="7.4.3 查询文档"></a>7.4.3 查询文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    GetRequest getRequest = <span class="keyword">new</span> GetRequest().index(<span class="string">&quot;test&quot;</span>).type(<span class="string">&quot;_doc&quot;</span>).id(<span class="string">&quot;r4NFWHUB6yUL1DAm1kGm&quot;</span>);</span><br><span class="line"></span><br><span class="line">    GetResponse response = client.get(getRequest,RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.打印响应结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;_index：：&quot;</span>+response.getIndex());</span><br><span class="line">    System.out.println(<span class="string">&quot;_type：：&quot;</span>+response.getType());</span><br><span class="line">    System.out.println(<span class="string">&quot;_id：：&quot;</span>+response.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;_source：：&quot;</span>+response.getSourceAsString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-4-删除文档"><a href="#7-4-4-删除文档" class="headerlink" title="7.4.4 删除文档"></a>7.4.4 删除文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest().index(<span class="string">&quot;test&quot;</span>).type(<span class="string">&quot;_doc&quot;</span>).id(<span class="string">&quot;sINVWHUB6yUL1DAmFkF4&quot;</span>);</span><br><span class="line"></span><br><span class="line">    DeleteResponse response = client.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.打印响应结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;_index：：&quot;</span>+response.getIndex());</span><br><span class="line">    System.out.println(<span class="string">&quot;_type：：&quot;</span>+response.getType());</span><br><span class="line">    System.out.println(<span class="string">&quot;_id：：&quot;</span>+response.getId());</span><br><span class="line">    System.out.println(<span class="string">&quot;_result：：&quot;</span>+response.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-5-文档的批量操作"><a href="#7-4-5-文档的批量操作" class="headerlink" title="7.4.5 文档的批量操作"></a>7.4.5 文档的批量操作</h4><p>批量新增文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量添加文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBulkDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line"></span><br><span class="line">    IndexRequest request1 = <span class="keyword">new</span> IndexRequest()</span><br><span class="line">        .index(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        .type(<span class="string">&quot;_doc&quot;</span>)</span><br><span class="line">        .id(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">        .source(XContentType.JSON, <span class="string">&quot;brand&quot;</span>, <span class="string">&quot;小米&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米手机&quot;</span>);</span><br><span class="line">    IndexRequest request2 = <span class="keyword">new</span> IndexRequest()</span><br><span class="line">        .index(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        .type(<span class="string">&quot;_doc&quot;</span>)</span><br><span class="line">        .id(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">        .source(XContentType.JSON, <span class="string">&quot;brand&quot;</span>, <span class="string">&quot;华为&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;华为&quot;</span>);</span><br><span class="line">    IndexRequest request3 = <span class="keyword">new</span> IndexRequest()</span><br><span class="line">        .index(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">        .type(<span class="string">&quot;_doc&quot;</span>)</span><br><span class="line">        .id(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">        .source(XContentType.JSON, <span class="string">&quot;brand&quot;</span>, <span class="string">&quot;一加&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;一加手机&quot;</span>);</span><br><span class="line"></span><br><span class="line">    bulkRequest.add(request1);</span><br><span class="line">    bulkRequest.add(request2);</span><br><span class="line">    bulkRequest.add(request3);</span><br><span class="line"></span><br><span class="line">    BulkResponse response = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;took::&quot;</span>+response.getTook());</span><br><span class="line">    System.out.println(<span class="string">&quot;Items::&quot;</span>+response.getItems());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量删除文档</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//批量删除文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBulkDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line"></span><br><span class="line">    bulkRequest.add(<span class="keyword">new</span> DeleteRequest().index(<span class="string">&quot;test&quot;</span>).type(<span class="string">&quot;_doc&quot;</span>).id(<span class="string">&quot;1&quot;</span>));</span><br><span class="line">    bulkRequest.add(<span class="keyword">new</span> DeleteRequest().index(<span class="string">&quot;test&quot;</span>).type(<span class="string">&quot;_doc&quot;</span>).id(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">    bulkRequest.add(<span class="keyword">new</span> DeleteRequest().index(<span class="string">&quot;test&quot;</span>).type(<span class="string">&quot;_doc&quot;</span>).id(<span class="string">&quot;3&quot;</span>));</span><br><span class="line"></span><br><span class="line">    BulkResponse response = client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;took::&quot;</span>+response.getTook());</span><br><span class="line">    System.out.println(<span class="string">&quot;Items::&quot;</span>+response.getItems());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="7-5-基本查询"><a href="#7-5-基本查询" class="headerlink" title="7.5 基本查询"></a>7.5 基本查询</h3><h4 id="7-5-1-匹配查询-matchAll"><a href="#7-5-1-匹配查询-matchAll" class="headerlink" title="7.5.1 匹配查询(matchAll)"></a>7.5.1 匹配查询(matchAll)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建请求对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest().indices(<span class="string">&quot;wuxie&quot;</span>).types(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建查询请求体构建器</span></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//QueryBuilders类包含了大部分的请求体查询静态方法，且方法名包含查询语句的关键字</span></span><br><span class="line">    builder.query(QueryBuilders.matchAllQuery());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置请求体</span></span><br><span class="line">    request.source(builder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.客户端发送请求，获取响应对象</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    SearchHits hits = response.getHits();</span><br><span class="line">    System.out.println(<span class="string">&quot;took::&quot;</span>+response.getTook());</span><br><span class="line">    System.out.println(<span class="string">&quot;time_out::&quot;</span>+response.isTimedOut());</span><br><span class="line">    System.out.println(<span class="string">&quot;total::&quot;</span>+hits.getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;max_score::&quot;</span>+hits.getMaxScore());</span><br><span class="line">    System.out.println(<span class="string">&quot;&lt;----hits:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        String sourceAsString = hit.getSourceAsString();</span><br><span class="line">        System.out.println(sourceAsString);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-2-匹配查询-match"><a href="#7-5-2-匹配查询-match" class="headerlink" title="7.5.2 匹配查询(match)"></a>7.5.2 匹配查询(match)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">matchQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象：匹配查询</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">    request.types(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">    request.indices(<span class="string">&quot;wuxie&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建查询请求体构建器</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//匹配查询，设置分词后关键词的查询关系，默认是or</span></span><br><span class="line">    MatchQueryBuilder matchQueryBuilder = QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米手机&quot;</span>)</span><br><span class="line">            .operator(Operator.AND);</span><br><span class="line">    sourceBuilder.query(matchQueryBuilder);</span><br><span class="line">    <span class="comment">//设置请求体</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//3.客户端发送请求，获取响应对象</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    printResult(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结果信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printResult</span><span class="params">(SearchResponse response)</span> </span>&#123;</span><br><span class="line">    SearchHits hits = response.getHits();</span><br><span class="line">    System.out.println(<span class="string">&quot;took::&quot;</span>+response.getTook());</span><br><span class="line">    System.out.println(<span class="string">&quot;time_out::&quot;</span>+response.isTimedOut());</span><br><span class="line">    System.out.println(<span class="string">&quot;total::&quot;</span>+hits.getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;max_score::&quot;</span>+hits.getMaxScore());</span><br><span class="line">    System.out.println(<span class="string">&quot;&lt;----hits:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        String sourceAsString = hit.getSourceAsString();</span><br><span class="line">        System.out.println(sourceAsString);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-3-匹配查询-multi-match"><a href="#7-5-3-匹配查询-multi-match" class="headerlink" title="7.5.3 匹配查询(multi_match)"></a>7.5.3 匹配查询(multi_match)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mulitMatchQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">    request.types(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">    request.indices(<span class="string">&quot;wuxie&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建查询请求体构建器</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//设置查询方式：多字段匹配查询，第一个参数是条件，以后的参数都是字段</span></span><br><span class="line">    MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(<span class="string">&quot;小米&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;subtitle&quot;</span>);</span><br><span class="line">    sourceBuilder.query(multiMatchQueryBuilder);</span><br><span class="line">    <span class="comment">//设置请求体</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//3.客户端发送请求，获取响应对象</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    printResult(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-4-关键词精确匹配查询-term"><a href="#7-5-4-关键词精确匹配查询-term" class="headerlink" title="7.5.4 关键词精确匹配查询(term)"></a>7.5.4 关键词精确匹配查询(term)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">    request.types(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">    request.indices(<span class="string">&quot;wuxie&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建查询请求体构建器</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//设置查询方式：关键词精确查询</span></span><br><span class="line">    sourceBuilder.query(QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米&quot;</span>));</span><br><span class="line">    <span class="comment">//设置请求体</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//3.客户端发送请求，获取响应对象</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    printResult(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-5-5-多关键词精确匹配查询-terms"><a href="#7-5-5-多关键词精确匹配查询-terms" class="headerlink" title="7.5.5 多关键词精确匹配查询(terms)"></a>7.5.5 多关键词精确匹配查询(terms)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termsQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">    request.types(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">    request.indices(<span class="string">&quot;wuxie&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建查询请求体构建器</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//设置查询方式：多关键词精确查询</span></span><br><span class="line">    sourceBuilder.query( QueryBuilders.termsQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;手机&quot;</span>, <span class="string">&quot;小米&quot;</span>));</span><br><span class="line">    <span class="comment">//设置请求体</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//3.客户端发送请求，获取响应对象</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    printResult(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-结果过滤、排序和分页"><a href="#7-6-结果过滤、排序和分页" class="headerlink" title="7.6 结果过滤、排序和分页"></a>7.6 结果过滤、排序和分页</h3><p>设置过滤、排序和分页实在SourceBuilder中构建的，而上面的查询条件是在query方法中通过QueryBuilders的方法中构建的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">includesSources</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">     request.types(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">    request.indices(<span class="string">&quot;wuxie&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建查询请求体构建器</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//设置查询方式</span></span><br><span class="line">    sourceBuilder.query(QueryBuilders.matchAllQuery());</span><br><span class="line">    <span class="comment">//设置过滤条件，包含和排除</span></span><br><span class="line">    String[] includes = &#123;<span class="string">&quot;title&quot;</span>,<span class="string">&quot;price&quot;</span>,<span class="string">&quot;images&quot;</span>&#125;;</span><br><span class="line">    String[] excludes = &#123;<span class="string">&quot;images&quot;</span>&#125;;</span><br><span class="line">    sourceBuilder.fetchSource(includes,excludes);</span><br><span class="line">    <span class="comment">//设置排序</span></span><br><span class="line">    FieldSortBuilder sortBuilder = SortBuilders.fieldSort(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">    <span class="comment">//设置排序降序</span></span><br><span class="line">    sortBuilder.order(SortOrder.DESC);</span><br><span class="line">    sourceBuilder.sort(sortBuilder);</span><br><span class="line">    <span class="comment">//设置分页</span></span><br><span class="line">    sourceBuilder.from(<span class="number">0</span>);<span class="comment">//当前页起始索引</span></span><br><span class="line">    sourceBuilder.size(<span class="number">5</span>);<span class="comment">//每页显示多少条</span></span><br><span class="line">    <span class="comment">//设置请求体</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//3.客户端发送请求，获取响应对象</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    printResult(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-7-高级查询"><a href="#7-7-高级查询" class="headerlink" title="7.7 高级查询"></a>7.7 高级查询</h3><h4 id="7-7-1-布尔查询-bool"><a href="#7-7-1-布尔查询-bool" class="headerlink" title="7.7.1 布尔查询(bool)"></a>7.7.1 布尔查询(bool)</h4><p>注意布尔查询在请求体构建中使用的是BoolQueryBuilder对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boolQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">    request.types(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">    request.indices(<span class="string">&quot;wuxie&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建查询请求体构建器</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//构建查询方式：布尔查询</span></span><br><span class="line">    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">//必须包含小米</span></span><br><span class="line">    boolQueryBuilder.must(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;小米&quot;</span>));</span><br><span class="line">    <span class="comment">//必须不含电视</span></span><br><span class="line">    boolQueryBuilder.mustNot(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;电视&quot;</span>));</span><br><span class="line">    <span class="comment">//应该含有手机</span></span><br><span class="line">    boolQueryBuilder.should(QueryBuilders.matchQuery(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;手机&quot;</span>));</span><br><span class="line">    <span class="comment">//设置查询方式</span></span><br><span class="line">    sourceBuilder.query(boolQueryBuilder);</span><br><span class="line">    <span class="comment">//设置请求体</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//3.客户端发送请求，获取响应对象</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    printResult(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-7-2-范围查询-range"><a href="#7-7-2-范围查询-range" class="headerlink" title="7.7.2 范围查询(range)"></a>7.7.2 范围查询(range)</h4><p>此时使用的请求体构建器是RangeQueryBuilder对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rangeQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">    request.types(<span class="string">&quot;goods&quot;</span>);</span><br><span class="line">    request.indices(<span class="string">&quot;wuxie&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建查询请求体构建器</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//构建查询方式：范围查询</span></span><br><span class="line">    RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">    <span class="comment">//大于2千</span></span><br><span class="line">    rangeQueryBuilder.gt(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//小于4千</span></span><br><span class="line">    rangeQueryBuilder.lt(<span class="number">4000</span>);</span><br><span class="line">    <span class="comment">//设置查询方式</span></span><br><span class="line">    sourceBuilder.query(rangeQueryBuilder);</span><br><span class="line">    <span class="comment">//设置请求体</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//3.客户端发送请求，获取响应对象</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    printResult(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-7-3-模糊查询-fuzzy"><a href="#7-7-3-模糊查询-fuzzy" class="headerlink" title="7.7.3 模糊查询(fuzzy)"></a>7.7.3 模糊查询(fuzzy)</h4><p>此时使用的请求体构建器是SearchSourceBuilder对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fuzzyQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest().types(<span class="string">&quot;goods&quot;</span>).indices(<span class="string">&quot;wuxie&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建查询请求体构建器</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//构建查询方式：模糊查询</span></span><br><span class="line">    FuzzyQueryBuilder fuzzyQueryBuilder = QueryBuilders.fuzzyQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;appla&quot;</span>);</span><br><span class="line">    <span class="comment">//设置偏差值</span></span><br><span class="line">    fuzzyQueryBuilder.fuzziness(Fuzziness.ONE);</span><br><span class="line">    <span class="comment">//设置查询方式</span></span><br><span class="line">    sourceBuilder.query(fuzzyQueryBuilder);</span><br><span class="line">    <span class="comment">//设置请求体</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//3.客户端发送请求，获取响应对象</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    printResult(response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-7-4-高亮查询-Highlighter"><a href="#7-7-4-高亮查询-Highlighter" class="headerlink" title="7.7.4 高亮查询(Highlighter)"></a>7.7.4 高亮查询(Highlighter)</h4><p>此时使用的请求体构建器是HighlightBuilder对象，并使用QueryBuilders进行条件查询，查询结果字段中的关键词高亮。</p><p>此时设置请求体构建器的方法是highlighter()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">highLighterQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建请求对象</span></span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest().types(<span class="string">&quot;goods&quot;</span>).indices(<span class="string">&quot;wuxie&quot;</span>);</span><br><span class="line">    <span class="comment">//2.创建查询请求体构建器</span></span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">//构建查询方式：高亮查询</span></span><br><span class="line">    <span class="comment">//设置查询方式</span></span><br><span class="line">    sourceBuilder.query(QueryBuilders.termsQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米&quot;</span>););</span><br><span class="line">    <span class="comment">//构建高亮字段</span></span><br><span class="line">    HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">    highlightBuilder.preTags(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;&quot;</span>);<span class="comment">//设置标签前缀</span></span><br><span class="line">    highlightBuilder.postTags(<span class="string">&quot;&lt;/font&gt;&quot;</span>);<span class="comment">//设置标签后缀</span></span><br><span class="line">    highlightBuilder.field(<span class="string">&quot;title&quot;</span>);<span class="comment">//设置高亮字段</span></span><br><span class="line">    <span class="comment">//设置高亮构建对象</span></span><br><span class="line">    sourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">    <span class="comment">//设置请求体</span></span><br><span class="line">    request.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//3.客户端发送请求，获取响应对象</span></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.打印响应结果</span></span><br><span class="line">    SearchHits hits = response.getHits();</span><br><span class="line">    System.out.println(<span class="string">&quot;took::&quot;</span>+response.getTook());</span><br><span class="line">    System.out.println(<span class="string">&quot;time_out::&quot;</span>+response.isTimedOut());</span><br><span class="line">    System.out.println(<span class="string">&quot;total::&quot;</span>+hits.getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;max_score::&quot;</span>+hits.getMaxScore());</span><br><span class="line">    System.out.println(<span class="string">&quot;hits::::&gt;&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        String sourceAsString = hit.getSourceAsString();</span><br><span class="line">        System.out.println(sourceAsString);</span><br><span class="line">        <span class="comment">//打印高亮结果</span></span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">        System.out.println(highlightFields);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;&lt;&lt;::::&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、Spring-Data-ElasticSearch"><a href="#八、Spring-Data-ElasticSearch" class="headerlink" title="八、Spring Data ElasticSearch"></a>八、Spring Data ElasticSearch</h2><h3 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1 简介"></a>8.1 简介</h3><p>Spring Data是一个用于==简化持久层数据访问==的开源框架。其<strong>主要目标是使得对数据的访问变得方便快捷</strong>。 Spring Data可以极大的简化数据操作的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。包括CRUD外，还包括如分页、排序等一些常用的功能，几乎可以节省持久层代码80%以上的编码工作量。</p><p>Spring Data ElasticSearch 基于 spring data API 简化 elasticSearch操作，将原始操作elasticSearch的客户端API 进行封装 。Spring Data为Elasticsearch项目提供集成搜索引擎。Spring Data Elasticsearch POJO的关键功能区域为中心的模型与Elastichsearch交互文档和轻松地编写一个存储库数据访问层。</p><blockquote><p> 使用时一定要注意版本问题，ElasticSearch 6.x与ElasticSearch 7.x的区别还是很大的</p><p>而且Spring Data ElasticSearch的高版本是支持ElasticSearch 7.x的。</p><p>本文Spring Data ElasticSearch 使用的版本是2.1.9</p></blockquote><h3 id="8-2-环境搭建"><a href="#8-2-环境搭建" class="headerlink" title="8.2 环境搭建"></a>8.2 环境搭建</h3><h4 id="8-2-1-依赖"><a href="#8-2-1-依赖" class="headerlink" title="8.2.1 依赖"></a>8.2.1 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-2-2-创建实体类"><a href="#8-2-2-创建实体类" class="headerlink" title="8.2.2 创建实体类"></a>8.2.2 创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Good</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;<span class="comment">//商品的唯一标识</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String category;<span class="comment">//分类</span></span><br><span class="line">    <span class="keyword">private</span> String brand;<span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">private</span> Double price;<span class="comment">//价格</span></span><br><span class="line">    <span class="keyword">private</span> String images;<span class="comment">//图片地址</span></span><br><span class="line"><span class="comment">//getter，setter，toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-3-编写配置文件"><a href="#8-2-3-编写配置文件" class="headerlink" title="8.2.3 编写配置文件"></a>8.2.3 编写配置文件</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置集群名称</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-name</span>=<span class="string">elasticsearch</span></span><br><span class="line"><span class="comment"># 配置es的服务地址</span></span><br><span class="line"><span class="meta">spring.data.elasticsearch.cluster-nodes</span>=<span class="string">127.0.0.1:9300</span></span><br></pre></td></tr></table></figure><h3 id="8-3-常用操作"><a href="#8-3-常用操作" class="headerlink" title="8.3 常用操作"></a>8.3 常用操作</h3><p>几个用到的注解：</p><ul><li>@Document：声明索引库配置<ul><li>indexName：索引库名称</li><li>type：类型名称，默认是“docs”</li><li>shards：分片数量，默认5</li><li>replicas：副本数量，默认1</li></ul></li><li>@Id：声明实体类的id</li><li>@Field：声明字段属性<ul><li>type：字段的数据类型 </li><li>analyzer：指定分词器类型</li><li>index：是否创建索引 默认为true</li><li>store:是否存储 默认为false</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Document</span>() 注解作用：定义一个索引库，一个类型</span></span><br><span class="line"><span class="comment"> * indexName属性：指定索引库的名称</span></span><br><span class="line"><span class="comment"> * type属性：指定类型名称</span></span><br><span class="line"><span class="comment"> * shards属性：指定分片数</span></span><br><span class="line"><span class="comment"> * replicas属性：指定复制副本数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;data&quot;,type = &quot;goods&quot;,shards = 5,replicas = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line">    <span class="comment">//必须有id,这里的id是全局唯一的标识,等同于es中的“_id”</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * type: 字段数据类型</span></span><br><span class="line"><span class="comment">     * analyzer: 分词器类型</span></span><br><span class="line"><span class="comment">     * index: 是否索引(默认值：true)</span></span><br><span class="line"><span class="comment">     * store: 是否存储(默认值：false)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text,analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//标题</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String category;<span class="comment">//分类</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword)</span></span><br><span class="line">    <span class="keyword">private</span> String brand;<span class="comment">//品牌</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Double)</span></span><br><span class="line">    <span class="keyword">private</span> Double price;<span class="comment">//价格</span></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Keyword,index = false)</span></span><br><span class="line">    <span class="keyword">private</span> String images;<span class="comment">//图片地址</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-1-操作索引库"><a href="#8-3-1-操作索引库" class="headerlink" title="8.3.1 操作索引库"></a>8.3.1 操作索引库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span><span class="comment">//此版本需要加入该注解导入Spring容器</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexOperation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建索引</span></span><br><span class="line">        <span class="keyword">boolean</span> data = elasticsearchTemplate.createIndex(Goods.class);</span><br><span class="line">        System.out.println(data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置映射</span></span><br><span class="line">        <span class="keyword">boolean</span> result = elasticsearchTemplate.putMapping(Goods.class);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//删除索引</span></span><br><span class="line">        <span class="keyword">boolean</span> deleteIndex = elasticsearchTemplate.deleteIndex(Goods.class);</span><br><span class="line">        System.out.println(deleteIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取映射信息</span></span><br><span class="line">        Map mapping = elasticsearchTemplate.getMapping(Goods.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(mapping.get(<span class="string">&quot;properties&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-2-文档的增删改查"><a href="#8-3-2-文档的增删改查" class="headerlink" title="8.3.2 文档的增删改查"></a>8.3.2 文档的增删改查</h4><p>创建dao层类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  继承持久层接口的ElasticSearch的模板接口</span></span><br><span class="line"><span class="comment"> *  ElasticsearchRepository&lt;映射对应的类名,主键类型&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Goods</span>,<span class="title">Long</span>&gt; </span>&#123;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增文档</span></span><br><span class="line"><span class="function">Goods <span class="title">save</span><span class="params">(Goods var1)</span></span>;</span><br><span class="line"><span class="comment">//批量新增文档</span></span><br><span class="line"><span class="function">Iterable&lt;Goods&gt; <span class="title">saveAll</span><span class="params">(Iterable&lt;Goods&gt; var1)</span></span>;</span><br><span class="line"><span class="comment">//根据id查找文档</span></span><br><span class="line"><span class="function">Optional&lt;Goods&gt; <span class="title">findById</span><span class="params">(Long var1)</span></span>;</span><br><span class="line"><span class="comment">//判断某个文档是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">existsById</span><span class="params">(Long var1)</span></span>;</span><br><span class="line"><span class="comment">//查询所有文档</span></span><br><span class="line"><span class="function">Iterable&lt;Goods&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//根据id查询文档</span></span><br><span class="line"><span class="function">Iterable&lt;Goods&gt; <span class="title">findAllById</span><span class="params">(Iterable&lt;Long&gt; var1)</span></span>;</span><br><span class="line"><span class="comment">//文档数量</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//根据id删除文档</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Long var1)</span></span>;</span><br><span class="line"><span class="comment">//删除某个文档，可以根据其他属性，不一定是id</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Goods var1)</span></span>;</span><br><span class="line"><span class="comment">//批量删除文档</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">(Iterable&lt;Goods&gt; var1)</span></span>;</span><br><span class="line"><span class="comment">//删除索引文档</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringdataEsGoodCRUD</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入Good业务层实现类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodDao goodDao;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Good good = <span class="keyword">new</span> Good();</span><br><span class="line">        good.setId(<span class="number">1l</span>);</span><br><span class="line">        good.setTitle(<span class="string">&quot;小米手机&quot;</span>);</span><br><span class="line">        good.setCategory(<span class="string">&quot;手机&quot;</span>);</span><br><span class="line">        good.setBrand(<span class="string">&quot;小米&quot;</span>);</span><br><span class="line">        good.setPrice(<span class="number">19999.0</span>);</span><br><span class="line">        good.setImages(<span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>);</span><br><span class="line">        goodDao.save(good);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Good good = <span class="keyword">new</span> Good();</span><br><span class="line">        good.setId(<span class="number">1l</span>);</span><br><span class="line">        good.setTitle(<span class="string">&quot;小米手机&quot;</span>);</span><br><span class="line">        good.setCategory(<span class="string">&quot;手机&quot;</span>);</span><br><span class="line">        good.setBrand(<span class="string">&quot;小米&quot;</span>);</span><br><span class="line">        good.setPrice(<span class="number">9999.0</span>);</span><br><span class="line">        good.setImages(<span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>);</span><br><span class="line">        goodDao.save(good);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Good good = <span class="keyword">new</span> Good();</span><br><span class="line">        good.setId(<span class="number">1l</span>);</span><br><span class="line">        goodDao.delete(good);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据id查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Good good = goodDao.findById(<span class="number">2l</span>).get();</span><br><span class="line">        System.out.println(good);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Iterable&lt;Good&gt; goods = goodDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Good good : goods) &#123;</span><br><span class="line">            System.out.println(good);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//批量新增</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Good&gt; goodList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Good good = <span class="keyword">new</span> Good();</span><br><span class="line">            good.setId((<span class="keyword">long</span>) i);</span><br><span class="line">            good.setTitle(<span class="string">&quot;[&quot;</span>+i+<span class="string">&quot;]小米手机&quot;</span>);</span><br><span class="line">            good.setCategory(<span class="string">&quot;手机&quot;</span>);</span><br><span class="line">            good.setBrand(<span class="string">&quot;小米&quot;</span>);</span><br><span class="line">            good.setPrice(<span class="number">19999.0</span>+i);</span><br><span class="line">            good.setImages(<span class="string">&quot;http://image.leyou.com/12479122.jpg&quot;</span>);</span><br><span class="line">            goodList.add(good);</span><br><span class="line">        &#125;</span><br><span class="line">        goodDao.saveAll(goodList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByPageable</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置排序(排序方式，正序还是倒序，排序的id)</span></span><br><span class="line">        Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC,<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> currentPage=<span class="number">2</span>;<span class="comment">//当前页</span></span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">100</span>;<span class="comment">//每页显示多少条</span></span><br><span class="line">        <span class="comment">//设置查询分页</span></span><br><span class="line">        PageRequest pageRequest = PageRequest.of(currentPage, pageSize,sort);</span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line">        Page&lt;Good&gt; goodPage = goodDao.findAll(pageRequest);</span><br><span class="line">        <span class="keyword">for</span> (Good good : goodPage.getContent()) &#123;</span><br><span class="line">            System.out.println(good);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-3-Search查询"><a href="#8-3-3-Search查询" class="headerlink" title="8.3.3 Search查询"></a>8.3.3 Search查询</h4><p>ElasticSearch的search方法中QueryBuilders，就是查询对象构建对象QueryBuilders。QueryBuilders具备的能力，search方法都具备。所以大致查询方式类似。</p><p>都是主要QueryBuilders构建想要的查询，然后通过GoodsDao类的search方法查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringdataEsSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入Goods业务层实现类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsDao goodsDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * term查询</span></span><br><span class="line"><span class="comment">     * search(termQueryBuilder) 调用搜索方法，参数查询构建器对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米&quot;</span>);</span><br><span class="line">        Iterable&lt;Goods&gt; goods = goodsDao.search(termQueryBuilder);</span><br><span class="line">        <span class="keyword">for</span> (Goods g : goods) &#123;</span><br><span class="line">            System.out.println(g);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * term查询加分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">termQueryByPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currentPage= <span class="number">0</span> ;</span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//设置查询分页</span></span><br><span class="line">        PageRequest pageRequest = PageRequest.of(currentPage, pageSize);</span><br><span class="line">        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;小米&quot;</span>);</span><br><span class="line">        Iterable&lt;Goods&gt; goods = goodsDao.search(termQueryBuilder,pageRequest);</span><br><span class="line">        <span class="keyword">for</span> (Good g : goods) &#123;</span><br><span class="line">            System.out.println(g);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-3-4-自定义查询"><a href="#8-3-4-自定义查询" class="headerlink" title="8.3.4 自定义查询"></a>8.3.4 自定义查询</h4><p>GoodsRepository提供了非常强大的自定义查询功能；只要遵循SpringData提供的语法，我们可以任意定义方法声明；</p><p>查询语法：findBy+字段名+Keyword+字段名+….</p><table><thead><tr><th>Keyword</th><th>Sample</th><th>Elasticsearch Query String</th></tr></thead><tbody><tr><td><code>And</code></td><td><code>findByNameAndPrice</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td></tr><tr><td><code>Or</code></td><td><code>findByNameOrPrice</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td></tr><tr><td><code>Is</code></td><td><code>findByName</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Not</code></td><td><code>findByNameNot</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Between</code></td><td><code>findByPriceBetween</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Before</code></td><td><code>findByPriceBefore</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>After</code></td><td><code>findByPriceAfter</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Like</code></td><td><code>findByNameLike</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>StartingWith</code></td><td><code>findByNameStartingWith</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>EndingWith</code></td><td>findByNameEndingWith</td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>In</code></td><td><code>findByNameIn(Collection&lt;String&gt;names)</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>NotIn</code></td><td><code>findByNameNotIn(Collection&lt;String&gt;names)</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>OrderBy</code></td><td><code>findByNameOrderByNameDesc</code></td><td><code>&#123;&quot;sort&quot; : [&#123; &quot;name&quot; : &#123;&quot;order&quot; : &quot;desc&quot;&#125; &#125;],&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;</code></td></tr></tbody></table><p>dao层接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  ElasticsearchRepository 持久层操作ElasticSearch的模板接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Goods</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据title和价格查询，and的关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Goods&gt; <span class="title">findAllByTitleAndPrice</span><span class="params">(String title,Double price)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据商品价格范围查询</span></span><br><span class="line"><span class="comment">     * 最低价格lowPrice</span></span><br><span class="line"><span class="comment">     * 最高价格highPrice</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;Goods&gt; <span class="title">findByPriceBetween</span><span class="params">(Double lowPrice,Double highPrice)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义方法名称查询测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringdataEsCustomMethodQuery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入Goods业务层实现类</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsDao goodsDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据标题及价格查询</span></span><br><span class="line"><span class="comment">     * 要求价格等于20023且标题的内容包含小米关键词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllByTitleAndPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String title = <span class="string">&quot;小米&quot;</span>;</span><br><span class="line">        Double price = <span class="number">20023.0</span>;</span><br><span class="line">        List&lt;Goods&gt; goods = goodDao.findAllByTitleAndPrice(title, price);</span><br><span class="line">        <span class="keyword">for</span> (Goods g : goods) &#123;</span><br><span class="line">            System.out.println(g);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据价格范围查询</span></span><br><span class="line"><span class="comment">     * 要求商品价格再3000，到20000之间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPriceBetween</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> lowPrice = <span class="number">3000.0</span>;<span class="comment">//最低价</span></span><br><span class="line">        <span class="keyword">double</span> highPrice = <span class="number">20000.0</span>;<span class="comment">//最高价</span></span><br><span class="line">        List&lt;Goods&gt; goods = goodDao.findByPriceBetween(lowPrice, highPrice);</span><br><span class="line">        <span class="keyword">for</span> (Goods g : goods) &#123;</span><br><span class="line">            Systemout.println(g);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、结束语"><a href="#九、结束语" class="headerlink" title="九、结束语"></a>九、结束语</h2><ul><li>本篇博客使用ElasticSearch的版本是6.8，包括客户端对应的版本都是基于6.x的；</li><li>本篇博客只是对于ElasticSearch的简单使用，并未涉及到太过复杂的内容；</li></ul><p>详细官方文档地址：<a href="https://www.elastic.co/guide/index.html">https://www.elastic.co/guide/index.html</a></p>]]></content>
    
    
    <summary type="html">Elaticsearch的学习笔记整理；记录了通过kibana客户端对ElasticSearch的基本操作和查询，以及通过RestHighLevelClient和Spring Data ElasticSearch客户端对ElasticSearch的操作。</summary>
    
    
    
    <category term="NoSQL" scheme="https://amazingdl.github.io/categories/NoSQL/"/>
    
    
    <category term="搜索引擎" scheme="https://amazingdl.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>Java SE之类与对象</title>
    <link href="https://amazingdl.github.io/2020/10/14/Java%E5%9F%BA%E7%A1%80/Java%20SE%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <id>https://amazingdl.github.io/2020/10/14/Java%E5%9F%BA%E7%A1%80/Java%20SE%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-10-13T16:00:00.000Z</published>
    <updated>2020-10-27T00:03:54.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、面向对象程序设计概念"><a href="#一、面向对象程序设计概念" class="headerlink" title="一、面向对象程序设计概念"></a>一、面向对象程序设计概念</h2><p>一切都是对象</p><p>从面向对象程序设计讲到Java中的面向对象思想</p><p>什么是面向过程设计</p><p>什么是面向对象设计</p><p>什么是类</p><p>什么是对象</p><p>Java面向对象思想中加入了接口</p><p>面向对象程序设计三大特性：封装、继承和多态</p><h2 id="二、自定义类"><a href="#二、自定义类" class="headerlink" title="二、自定义类"></a>二、自定义类</h2><p>使用Java创建一个自己的类</p><h2 id="三、类的封装"><a href="#三、类的封装" class="headerlink" title="三、类的封装"></a>三、类的封装</h2><p>通过阐述类的属性、方法、构造器、内部类、代码块等结构来说明一个类的构成</p><p>static</p><p>this</p><p>类的封装性</p><h2 id="四、接口与抽象类"><a href="#四、接口与抽象类" class="headerlink" title="四、接口与抽象类"></a>四、接口与抽象类</h2><p>接口：多实现，只有抽象方法和静态属性的</p><p>抽象类：单继承</p><h2 id="六、继承与多态"><a href="#六、继承与多态" class="headerlink" title="六、继承与多态"></a>六、继承与多态</h2><p>所有的父类Object</p><p>super关键字</p><p>重写</p><p>继承与实现等内容</p><h2 id="七、其他"><a href="#七、其他" class="headerlink" title="七、其他"></a>七、其他</h2><p>包括包装类、权限修饰符、API的使用等</p><h2 id="八、结束语"><a href="#八、结束语" class="headerlink" title="八、结束语"></a>八、结束语</h2>]]></content>
    
    
    <summary type="html">当人们尝试描述这个世界的时候，他们会把所有的事物进行归类，具有相同属性的归为一类，从而更好的认识这个世界；当计算机想要认识这个世界的时候，它也用了相同的方法。</summary>
    
    
    
    <category term="Java" scheme="https://amazingdl.github.io/categories/Java/"/>
    
    
    <category term="Java SE" scheme="https://amazingdl.github.io/tags/Java-SE/"/>
    
    <category term="面向对象" scheme="https://amazingdl.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java SE之基本语法</title>
    <link href="https://amazingdl.github.io/2020/09/01/Java%E5%9F%BA%E7%A1%80/Java%20SE%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://amazingdl.github.io/2020/09/01/Java%E5%9F%BA%E7%A1%80/Java%20SE%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2020-09-01T06:27:46.000Z</published>
    <updated>2020-10-26T23:53:26.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>​        同其他编程语言一样，Java也有自己的数据类型、运算符、流程控制等基本的语法；通过简单的判断和循环就能够完成复杂的算法，从而解决各种各样的问题。</p><p>​        即使各种编程语言的思想大致相同，但每种编程语言的部分细节却又不尽相同，所以基本的语法和细节还是值得注意和警惕的。</p><p>​        就如同其他编程语言一样，即使Java是面向对象的一门编程语言，Java也需要基本的数据类型、运算符和流程控制等基础的语法，因此，本篇博客就是总结和回顾一些我在学习Java时的一些基础语法知识，是对以前知识的回顾、总结，并希望通过本篇文章进一步加深我对Java的理解和对编程的理解。</p><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><p>​        Java的数据类型包括基本数据类型和引用数据类型，其中基本数据类型包括四类八种，分别是byte、short、int、long、float、double、char和boolean。</p><blockquote><p>整数</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">占用存储空间</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">1字节</td><td align="center">-128~127</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center">-32 768 - 32 767</td></tr><tr><td align="center">int</td><td align="center">4字节</td><td align="center">-2 147 483 648 - 2 147 483 647</td></tr><tr><td align="center">long</td><td align="center">8字节</td><td align="center">-9 223 372 036 854 775 808 - 9 223 372 036 854 775 807</td></tr></tbody></table><p>注意：</p><ol><li>长整型数值有一个后缀L或 l；</li><li>即二进制是以0b/0B开头；八进制是以数字0开头；十六进制是以0X/0x开头，此时的a-f不区分大小写。</li></ol><blockquote><p>浮点数</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">占用存储空间</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4字节</td><td align="center">大约± 3.402 823 47E+38F (有效位数为 6 ~ 7 位）</td></tr><tr><td align="center">double</td><td align="center">8字节</td><td align="center">大约 ± 1.797 693 134 862 315 70E+308 (有效位数为 15 位）</td></tr></tbody></table><p>注意：</p><ol><li>float 类型的数值有一个后缀F或 f (例如，3.14F。) 没有后缀F 的浮点数值（如 3.14 ) 默认为double 类型。</li><li>double表示这种类型的数值精度是float类型的两倍（有人称之为双精度数值)。绝大部分应用程序都采用double类型。</li><li>浮点数值不适用于无法接受舍入误差的金融计算中。 例如，命令 System.out.println( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是人们想象的0.9。</li></ol><blockquote><p>字符</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">占用存储空间</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">2字节</td></tr></tbody></table><p><strong>Unicode</strong></p><p>不同的地区有不同的编码机制；于是就产生了问题：一个是对于任意给定的代码值，在不同的编码方案下有可能对应不同的字母；二是采用大字符集的语言其编码长度有可能不同。</p><p>常见的编码机制：美国的 ASCII、 西欧语言中的ISO 8859-1 俄罗斯的 KOI-8、 中国的 GB 18030 和 BIG-5。</p><p>然而，两个字节的代码宽度足以对世界上各种语言的所有字符进行编码， 并有足够的空间留给未来的扩展。</p><p>在设计 Java 时决定采用 16 位的 Unicode 字符集，这样会比使用 8 位字符集的程序设计语言有很大的改进。</p><p><code>在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单兀。我们强烈建议不要在程序中使用 char 类型，除非确实需要处理 UTF-16 代码单元。最好将字符串作为抽象数据类型处理。</code></p><p><strong>常见的字符转义序列</strong></p><table><thead><tr><th align="center">转义序列</th><th align="center">名称</th><th align="center">unicode值</th></tr></thead><tbody><tr><td align="center">\b</td><td align="center">退格</td><td align="center">\u0008</td></tr><tr><td align="center">\t</td><td align="center">制表</td><td align="center">\u0009</td></tr><tr><td align="center">\n</td><td align="center">换行</td><td align="center">\u000a</td></tr><tr><td align="center">\r</td><td align="center">回车</td><td align="center">\u000d</td></tr><tr><td align="center">\ “</td><td align="center">双引号</td><td align="center">\u0022</td></tr><tr><td align="center">\ ‘</td><td align="center">单引号</td><td align="center">\u0027</td></tr><tr><td align="center">\ \</td><td align="center">反斜杠</td><td align="center">\u005c</td></tr></tbody></table><p><strong>常用字符与ASCII代码对照表</strong></p><table><thead><tr><th align="center">ASCII码</th><th align="center">键盘</th><th align="center">ASCII 码</th><th align="center">键盘</th><th align="center">ASCII 码</th><th align="center">键盘</th><th align="center">ASCII 码</th><th align="center">键盘</th></tr></thead><tbody><tr><td align="center">27</td><td align="center">ESC</td><td align="center">32</td><td align="center">SPACE</td><td align="center">33</td><td align="center">!</td><td align="center">34</td><td align="center">“</td></tr><tr><td align="center">35</td><td align="center">#</td><td align="center">36</td><td align="center">$</td><td align="center">37</td><td align="center">%</td><td align="center">38</td><td align="center">&amp;</td></tr><tr><td align="center">39</td><td align="center">‘</td><td align="center">40</td><td align="center">(</td><td align="center">41</td><td align="center">)</td><td align="center">42</td><td align="center">*</td></tr><tr><td align="center">43</td><td align="center">+</td><td align="center">44</td><td align="center">‘</td><td align="center">45</td><td align="center">-</td><td align="center">46</td><td align="center">.</td></tr><tr><td align="center">47</td><td align="center">/</td><td align="center">48</td><td align="center">0</td><td align="center">49</td><td align="center">1</td><td align="center">50</td><td align="center">2</td></tr><tr><td align="center">51</td><td align="center">3</td><td align="center">52</td><td align="center">4</td><td align="center">53</td><td align="center">5</td><td align="center">54</td><td align="center">6</td></tr><tr><td align="center">55</td><td align="center">7</td><td align="center">56</td><td align="center">8</td><td align="center">57</td><td align="center">9</td><td align="center">58</td><td align="center">:</td></tr><tr><td align="center">59</td><td align="center">;</td><td align="center">60</td><td align="center">&lt;</td><td align="center">61</td><td align="center">=</td><td align="center">62</td><td align="center">&gt;</td></tr><tr><td align="center">63</td><td align="center">?</td><td align="center">64</td><td align="center">@</td><td align="center">65</td><td align="center">A</td><td align="center">66</td><td align="center">B</td></tr><tr><td align="center">67</td><td align="center">C</td><td align="center">68</td><td align="center">D</td><td align="center">69</td><td align="center">E</td><td align="center">70</td><td align="center">F</td></tr><tr><td align="center">71</td><td align="center">G</td><td align="center">72</td><td align="center">H</td><td align="center">73</td><td align="center">I</td><td align="center">74</td><td align="center">J</td></tr><tr><td align="center">75</td><td align="center">K</td><td align="center">76</td><td align="center">L</td><td align="center">77</td><td align="center">M</td><td align="center">78</td><td align="center">N</td></tr><tr><td align="center">79</td><td align="center">O</td><td align="center">80</td><td align="center">P</td><td align="center">81</td><td align="center">Q</td><td align="center">82</td><td align="center">R</td></tr><tr><td align="center">83</td><td align="center">S</td><td align="center">84</td><td align="center">T</td><td align="center">85</td><td align="center">U</td><td align="center">86</td><td align="center">V</td></tr><tr><td align="center">87</td><td align="center">W</td><td align="center">88</td><td align="center">X</td><td align="center">89</td><td align="center">Y</td><td align="center">90</td><td align="center">Z</td></tr><tr><td align="center">91</td><td align="center">[</td><td align="center">92</td><td align="center">\</td><td align="center">93</td><td align="center">]</td><td align="center">94</td><td align="center">^</td></tr><tr><td align="center">95</td><td align="center">_</td><td align="center">96</td><td align="center">`</td><td align="center">97</td><td align="center">a</td><td align="center">98</td><td align="center">b</td></tr><tr><td align="center">99</td><td align="center">c</td><td align="center">100</td><td align="center">d</td><td align="center">101</td><td align="center">e</td><td align="center">102</td><td align="center">f</td></tr><tr><td align="center">103</td><td align="center">g</td><td align="center">104</td><td align="center">h</td><td align="center">105</td><td align="center">i</td><td align="center">106</td><td align="center">j</td></tr><tr><td align="center">107</td><td align="center">k</td><td align="center">108</td><td align="center">l</td><td align="center">109</td><td align="center">m</td><td align="center">110</td><td align="center">n</td></tr><tr><td align="center">111</td><td align="center">o</td><td align="center">112</td><td align="center">p</td><td align="center">113</td><td align="center">q</td><td align="center">114</td><td align="center">r</td></tr><tr><td align="center">115</td><td align="center">s</td><td align="center">116</td><td align="center">t</td><td align="center">117</td><td align="center">u</td><td align="center">118</td><td align="center">v</td></tr><tr><td align="center">119</td><td align="center">w</td><td align="center">120</td><td align="center">x</td><td align="center">121</td><td align="center">y</td><td align="center">122</td><td align="center">z</td></tr><tr><td align="center">123</td><td align="center">{</td><td align="center">124</td><td align="center">|</td><td align="center">125</td><td align="center">}</td><td align="center">126</td><td align="center">~</td></tr></tbody></table><blockquote><p> 布尔型</p></blockquote><p>boolean (布尔）类型有两个值：false 和 true, 用来判定逻辑条件 整型值和布尔值之间不能进行相互转换。</p><h2 id="三、注释、关键字与变量"><a href="#三、注释、关键字与变量" class="headerlink" title="三、注释、关键字与变量"></a>三、注释、关键字与变量</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h3><p>单行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>文档注释</p><p>该注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现该程序的说明文档，类似于JDK说明文档；</p><p>通过命令可生成该文档：javadoc  -d  文档名  -author  -version  类名.java；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文档注释</span></span><br><span class="line"><span class="comment"> * javadoc是用于提取注释的工具，输出的是一个HTML文件；</span></span><br><span class="line"><span class="comment"> * 文档标签和其嵌入HTML</span></span><br><span class="line"><span class="comment"> * 独立文档标签是一些以@字符开头的命令，且要置于注释行的最前面；</span></span><br><span class="line"><span class="comment"> * 行内文档标签可以出现在注释的任何地方，也是一@字符开头，但是要扩展花括号内。</span></span><br><span class="line"><span class="comment"> * javadoc只能为public和protected成员进行文档注释。</span></span><br><span class="line"><span class="comment"> * 嵌入HTML</span></span><br><span class="line"><span class="comment"> * &lt;h1&gt;标题&lt;/h1&gt;</span></span><br><span class="line"><span class="comment"> * &lt;ol&gt;</span></span><br><span class="line"><span class="comment"> *   &lt;li&gt;Item one&lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ol&gt;</span></span><br><span class="line"><span class="comment"> * 独立文档注释</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> java.swing.JFrame</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 版本</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 作者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 最早使用的版本</span></span><br><span class="line"><span class="comment"> * 行内文档注释</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.util.Date&#125; </span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@docRoot</span> &#125; 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法上</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> 参数名  方法说明</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回值描述</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> 对方法的异常进行说明</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-关键字和标识符"><a href="#2-关键字和标识符" class="headerlink" title="2. 关键字和标识符"></a>2. 关键字和标识符</h3><p>特点：关键字中所有的字母都是小写；</p><p>保留字：goto和const，即Java目前尚未使用，但以后版本可能使用；</p><p>标识符：对变量、方法和类等元素命名时的字节序列。</p><blockquote><p>命名规则</p></blockquote><ol><li>可使用26个英文字母的大小写，0-9，_和$组成；</li><li>数字不可以开头；</li><li>不可以使用关键字和保留字，但可以包含关键字和保留字；</li><li>Java中严格区分大小写，长度无限制；</li><li>不能包含空格。</li></ol><blockquote><p>命名规范</p></blockquote><ol><li>包名：多单词组成时，所有字母都都小写；</li><li>类名、接口名：多单词组成时，所有单词的首字母大写；</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写；</li><li>常量名：所有字母都大写，多个单词时每个单词用下划线连接。</li></ol><h3 id="3-变量与常量"><a href="#3-变量与常量" class="headerlink" title="3. 变量与常量"></a>3. 变量与常量</h3><p>此时说明的都是局部变量或局部常量，即在一个方法内或一段代码块内声明的变量或者常量，与后面的类属性无法。</p><blockquote><p>变量</p></blockquote><p>在 Java 中，每个变量都有一个类型（ type)。在声明变量时，变量的类型位于变量名之前。</p><p><strong>注意</strong>：声明一个变量之后，必须用赋值语句对变量进行显式初始化， 千万不要使用未初始化的变量。</p><blockquote><p>常量</p></blockquote><p>在 Java 中， 利用关键字 final 指示常量。</p><p>关键字 final 表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上，常量名使用全大写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> CM_PER_INCH = <span class="number">2.54</span>;</span><br></pre></td></tr></table></figure><h2 id="四、运算符"><a href="#四、运算符" class="headerlink" title="四、运算符"></a>四、运算符</h2><blockquote><p>基本运算符</p></blockquote><p>在 Jav 中，使用算术运算符 +、-、 *、/ 表示加、减、 乘、除运算。 </p><p>当参与 / 运算的两个操作数都是整数时， 表示整数除法；否则， 表示浮点除法。 </p><p>整数的求余操作（有时称为取模) 用 ％ 表示，只有整数类型变量能够进行取余运算。</p><p>通常表达式中出现的最大的数据类型决定了表达式最终结果的数据类型；即如果将一个float值与一个double值相乘，结果就是double。</p><p>可以在赋值中使用二元运算符，这是一种很方便的简写形式。例如， X += 4;等价于：x = x + 4; (一般地， 要把运算符放在 = 号左边，如 *= 或 ％=)。</p><blockquote><p>强制类型转换</p></blockquote><p>经常需要将一种数值类型转换为另一种数值类型。但有些会造成信息丢失。</p><p>从占用存储空间小的向占用存储空间大的转换不会丢失数据类型，反之则会丢失数据类型。</p><p>特殊的</p><ol><li>从int转换为float可能会丢失数据类型；</li><li>从long转换为double可能会丢失数据类型；</li><li>从long转换为float可能会丢失数据类型；</li><li>从int转换位double不会丢失数据类型。</li></ol><p><strong>运算符中的类型转换</strong></p><ol><li>如果两个操作数中有一个是 double 类型， 另一个操作数就会转换为 double 类型。 </li><li>否则，如果其中一个操作数是 float 类型，另一个操作数将会转换为 float 类型。 </li><li>否则， 如果其中一个操作数是 long 类型， 另一个操作数将会转换为 long 类型。 </li><li>否则， 两个操作数都将被转换为 int 类型。</li><li>在char、byte和short中，对这些类型的任何一个进行算术运算，都会获得一个int类型，必须将其显示的类型转换会原来的类型，以将值赋给原本的类型；</li></ol><blockquote><p> 逻辑运算符</p></blockquote><p>==(等于)、!=(不等于) &lt; (小于) 、&gt; (大于)、&lt;=(小于等于）和 &gt;= (大于等于）运算符都是逻辑元素符，其运算的结果都是布尔型。</p><p>&amp;&amp; 和 &amp;(与)：只要有一个操作数为false，结果就为false。</p><p>|| 和 |(或)：只要有一个操作数为true，结果就为true。</p><p>! (非)：对操作为去反，如果操作数为true，表达式结果为false，反之同理。</p><p><strong>三元运算符</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件表达式? 结果<span class="number">1</span> : 结果<span class="number">2</span></span><br></pre></td></tr></table></figure><p>根据条件表达式返回结果；如果条件表达式结果为true，则返回结果1，否则返回结果2。</p><p><strong>&amp;&amp; 与&amp;、||与|的区别</strong></p><p>&amp; 称为逻辑与运算符，&amp;&amp; 称为短路与运算符，也可叫逻辑与运算符。</p><p>​    对于&amp;：无论任何情况，&amp;两边的操作数或表达式都会参与计算。</p><p>​    对于&amp;&amp;：当&amp;&amp;左边的操作数为false或左边表达式结果为false时，&amp;&amp;右边的操作数或表达式将不参与计算，此时最终结果都为false。</p><p>​    综上所述，如果逻辑与运算的第一个操作数是false或第一个表达式的结果为false时，对于第二个操作数或表达式是</p><p>​    否进行运算，对最终的结果没有影响，结果肯定是false。推介平时多使用&amp;&amp;，因为它效率更高些。</p><p>&amp;还可以用作位运算符。当&amp;两边操作数或两边表达式的结果不是boolean类型时，&amp;用于按位与运算符的操作。</p><blockquote><p>位运算符</p></blockquote><table><thead><tr><th align="center">运算符</th><th align="center">运算</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">&lt;&lt;</td><td align="center">左移</td><td align="center">3&lt;&lt;2 =&gt;3 * 2 * 2=12</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">右移</td><td align="center">3&gt;&gt;1=&gt;3/2=1；结果为int类型，所以为1。</td></tr><tr><td align="center">&gt;&gt;&gt;</td><td align="center">无符号右移</td><td align="center">3&gt;&gt;&gt;1=&gt;3/2=1</td></tr><tr><td align="center">&amp;</td><td align="center">与运算</td><td align="center">6&amp;3=2</td></tr><tr><td align="center">|</td><td align="center">或运算</td><td align="center">6|3=7</td></tr><tr><td align="center">^</td><td align="center">异或运算</td><td align="center">6^3=5</td></tr><tr><td align="center">~</td><td align="center">取反运算</td><td align="center">~6=-7</td></tr></tbody></table><p>注意：</p><ol><li>如果堆char、byte、short类型的数字进行移位处理，那么在移位进行之前，他们会被转换为int类型，并且得到的结果也是一个int类型。</li><li>对于&amp;、|如果两个操作数或表达式是布尔类型，则进行的是逻辑运算，且如果两个操作数都是表达式都需要进行计算，无论是否影响整个表达式的最终结果。</li><li>所有的位运算都是基于二进制的，比如^运算符，如果对于6和3两个整数，其二进制分别为1010和0011，则异或的结果就是1001，也就是5。</li></ol><blockquote><p>自增与自减</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n++; <span class="comment">// n自增1</span></span><br><span class="line">n--; <span class="comment">// n自减1</span></span><br></pre></td></tr></table></figure><p>实际上， 这些运算符有两种形式；上面介绍的是运算符放在操作数后面的“ 后缀” 形式。</p><p>还有一种“ 前缀” 形式：++n。后缀和前缀形式都会使变量值加 1 或减 1。但用在表达式中时，二者就有区别了。前缀形式会先完成加 1; 而后缀形式会使用变量原来的值。</p><blockquote><p>括号与运算符级别</p></blockquote><p>如果不使用圆括号， 就按照给出的运算符优先级次序进行计算。</p><table><thead><tr><th align="center">优先级</th><th align="center">描述</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">括号</td><td align="center">() []</td></tr><tr><td align="center">2</td><td align="center">正负号</td><td align="center">+ -</td></tr><tr><td align="center">3</td><td align="center">自增自减，非</td><td align="center">++  – !</td></tr><tr><td align="center">4</td><td align="center">乘除，取余</td><td align="center">*  /  %</td></tr><tr><td align="center">5</td><td align="center">加减</td><td align="center">+  -</td></tr><tr><td align="center">6</td><td align="center">移位运算</td><td align="center">&lt;&lt;  &gt;&gt;  &gt;&gt;&gt;</td></tr><tr><td align="center">7</td><td align="center">大小关系</td><td align="center">&gt;  &gt;=  &lt; &lt;=</td></tr><tr><td align="center">8</td><td align="center">相等关系</td><td align="center">==  !=</td></tr><tr><td align="center">9</td><td align="center">按位与</td><td align="center">&amp;</td></tr><tr><td align="center">10</td><td align="center">按位异或</td><td align="center">^</td></tr><tr><td align="center">11</td><td align="center">按位或</td><td align="center">|</td></tr><tr><td align="center">12</td><td align="center">逻辑与</td><td align="center">&amp;&amp;</td></tr><tr><td align="center">13</td><td align="center">逻辑或</td><td align="center">||</td></tr><tr><td align="center">14</td><td align="center">条件运算</td><td align="center">?:</td></tr><tr><td align="center">15</td><td align="center">赋值运算</td><td align="center">= += -= *= /= %=</td></tr><tr><td align="center">16</td><td align="center">位赋值运算</td><td align="center">&amp;= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td></tr></tbody></table><h2 id="五、控制流程"><a href="#五、控制流程" class="headerlink" title="五、控制流程"></a>五、控制流程</h2><h3 id="1-条件语句"><a href="#1-条件语句" class="headerlink" title="1.  条件语句"></a>1.  条件语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(condition) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与绝大多数程序设计语言一样， Java 常常希望在某个条件为真时执行多条语句。</p><p>注意：在上述中，condition可以是表达式或变量，如果是变量则必须是boolean类型，如果是表达式，表达式结果也必须是boolean类型。后面的循环语句的判断条件也是这种要求。</p><h3 id="2-循环语句"><a href="#2-循环语句" class="headerlink" title="2. 循环语句"></a>2. 循环语句</h3><blockquote><p>while</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>满足条件进入循环，直到不满足条件退出循环。</p><blockquote><p>do…while</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">while</span>(condition)</span><br></pre></td></tr></table></figure><p>满足条件，继续循环继续，否则退出循环，此种循环结构执行执行一次循环体。</p><blockquote><p>for</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行步骤：先执行int i = 0且只执行一次；然后执行i&lt;10，结果为true时进入循环体；循环体执行完毕执行i++；</p><h3 id="3-switch语句"><a href="#3-switch语句" class="headerlink" title="3. switch语句"></a>3. switch语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(n)&#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">1</span>:执行语句;<span class="keyword">break</span>; </span><br><span class="line">   <span class="keyword">case</span> <span class="number">2</span>:....</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>case 标签可以是： </p><ol><li>类型为 char、byte、 short 或 int 的常量表达式。 </li><li>枚举常量。 </li><li>从 Java SE 7开始， case 标签还可以是字符串字面量。</li></ol><p>说明：</p><ol><li>当n与某个case匹配是，执行该条件语句。</li><li>case的执行语句执行完毕后，如果没有break，则会继续执行下一个case，直到break，或者switch语句执行完毕。</li><li>当所有的case都不匹配时，汇之星default部分。</li></ol><h3 id="4-break和continue"><a href="#4-break和continue" class="headerlink" title="4. break和continue"></a>4. break和continue</h3><p>尽管 Java 的设计者将 goto 作为保留字，但实际上并没有打算在语言中使用它。</p><p>Java语言中增加了一条带标签的 break，用于中断流程控制。</p><p>例如：在无限循环中，当if条件满足时则退出循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) </span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带标签的break；</p><p>在多重循环中，可通过为循环体设置标签，然后满足一定条件时，直接退出执行的循环体；比如下面当if条件成立，就执行退出外循环了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">outter: </span><br><span class="line"><span class="keyword">while</span> ()  <span class="comment">//外循环</span></span><br><span class="line">    <span class="keyword">for</span> ()&#123; <span class="comment">//内循环；</span></span><br><span class="line">    <span class="keyword">if</span> (condition)</span><br><span class="line">      <span class="keyword">break</span> outter; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个 continue 语句。与 break 语句一样， 它将中断正常的控制流程。continue语句将控制转移到最内层循环的首部。</p><p>即退出本次循环，继续进行下一次循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">while</span> (sum &lt; goal ) &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;Enter a number: &quot;</span>); </span><br><span class="line">    n = in.nextlnt();</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="comment">//如果输入的只为0，退出本次循环，继续进行下一次循环。</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    sum += n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、数组"><a href="#六、数组" class="headerlink" title="六、数组"></a>六、数组</h2><p><strong>概述</strong></p><p>数组是一种数据结构， 用来存储同一类型值的集合。通过一个整型下标可以访问数组中的每一个值。</p><p>在声明数组变量时， 需要指出数组类型 （ 数据元素类型紧跟 []) 和数组变量的名字。</p><p>数组的长度是固定的。</p><p>数组标识符其实只是一个引用，指向在堆中创建的一个真实对象，这个对象用以保存指向其他对象的引用。</p><p><strong>声明数组</strong>：</p><ul><li>一位数组的声明方式；int[]  arr=new  int[]{}，int[]   arr=new  int[10]；其中方括号也可放在变量名后面；</li><li>还可以这样声明int[] arr={1,3, }，这种初始化方式只能使用在数组定义之处；</li><li>二维数组的声明；int[] arr[]=new int [ 3 ] [ ]；外层元素的初始值为null，内层元素的值不 能调用，否则报错；</li><li>注意数组的变量名直接赋值，是把数组的首地址赋给了另一个数组，当另一个数组发生改变时，这个数组也会发生改变。</li><li>使用花括号初始化数组，初始化列表的最后一个逗号是可选的；即new int{1,23,4,}也是可以的；</li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span> &#125;;</span><br></pre></td></tr></table></figure><p><strong>多维数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[size] [size];<span class="comment">//声明二维数组，默认值是0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] array = &#123; &#123;<span class="number">16</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">13</span>&#125;， &#123;<span class="number">5</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">8</span>&#125;, (<span class="number">9</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>&#125;, &#123;<span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">1</span>&#125; &#125;;<span class="comment">//声明二维数组</span></span><br></pre></td></tr></table></figure><p>说明：二维数组与一维数组并没有太多的不同，可以把二维数据理解为存放若干个一维数组的一维数组。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] c = &#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[][] array = &#123;a,b,c&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;array[i].length;j++) &#123;</span><br><span class="line">        System.out.print(array[i][j]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多维的数组思想类似，不过基本上用不到。</p><h2 id="七、结束语"><a href="#七、结束语" class="headerlink" title="七、结束语"></a>七、结束语</h2><p>本篇文章主要是对Java基础语法的一个小总结，可能不是很全面，但也是自己学习Java的总结。</p><p><strong>参考书籍</strong></p><p>Java核心技术：<a href="https://book.douban.com/subject/26880667/">https://book.douban.com/subject/26880667/</a></p>]]></content>
    
    
    <summary type="html">Java基本语法的总结和回顾，从数据类型、运算符到流程控制相关的知识点汇众，既是总结，亦是回顾。</summary>
    
    
    
    <category term="Java" scheme="https://amazingdl.github.io/categories/Java/"/>
    
    
    <category term="Java SE" scheme="https://amazingdl.github.io/tags/Java-SE/"/>
    
  </entry>
  
</feed>
