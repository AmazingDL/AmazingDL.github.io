{"meta":{"title":"无邪の博客","subtitle":"","description":"个人博客，记录学习和生活","author":"AmazingDL","url":"https://amazingdl.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-10-01T02:41:21.174Z","updated":"2020-10-01T02:41:21.174Z","comments":false,"path":"categories/index.html","permalink":"https://amazingdl.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-10-13T00:15:02.867Z","updated":"2020-10-01T02:41:21.175Z","comments":false,"path":"repository/index.html","permalink":"https://amazingdl.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-10-01T02:41:21.176Z","updated":"2020-10-01T02:41:21.176Z","comments":false,"path":"tags/index.html","permalink":"https://amazingdl.github.io/tags/index.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2020-10-13T00:15:11.954Z","updated":"2020-10-01T02:41:21.172Z","comments":false,"path":"/404.html","permalink":"https://amazingdl.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-10-01T02:41:21.173Z","updated":"2020-10-01T02:41:21.173Z","comments":false,"path":"about/index.html","permalink":"https://amazingdl.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2020-10-01T02:41:21.174Z","updated":"2020-10-01T02:41:21.174Z","comments":false,"path":"books/index.html","permalink":"https://amazingdl.github.io/books/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-10-01T02:41:21.175Z","updated":"2020-10-01T02:41:21.175Z","comments":true,"path":"links/index.html","permalink":"https://amazingdl.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"Java SE之类与对象","slug":"Java SE之类与对象","date":"2020-10-13T16:00:00.000Z","updated":"2020-10-14T13:14:31.463Z","comments":true,"path":"2020/10/14/Java SE之类与对象/","link":"","permalink":"https://amazingdl.github.io/2020/10/14/Java%20SE%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/","excerpt":"当人们尝试描述这个世界的时候，他们会把所有的事物进行归类，具有相同属性的归为一类，从而更好的认识这个世界；当计算机想要认识这个世界的时候，它也用了相同的方法。","text":"一、面向对象程序设计概念从面向对象程序设计讲到Java中的面向对象思想 二、自定义类使用Java创建一个自己的类 三、类的构成通过阐述类的属性、方法、构造器、内部类、代码块等结构来说明一个类的构成 四、类的三大特性之封装性类的封装性 五、接口与抽象类六、类的三大特性之继承性所有的父类Object 继承与实现等内容 七、类的三大特性之多态性八、其他包括包装类、权限修饰符的说明 九、结束语","categories":[{"name":"Java基础","slug":"Java基础","permalink":"https://amazingdl.github.io/categories/Java%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Java SE","slug":"Java-SE","permalink":"https://amazingdl.github.io/tags/Java-SE/"},{"name":"编程","slug":"编程","permalink":"https://amazingdl.github.io/tags/%E7%BC%96%E7%A8%8B/"},{"name":"面向对象","slug":"面向对象","permalink":"https://amazingdl.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}]},{"title":"Java SE之基本语法","slug":"Java SE之基本语法","date":"2020-09-01T06:27:46.000Z","updated":"2020-10-14T13:14:18.245Z","comments":true,"path":"2020/09/01/Java SE之基本语法/","link":"","permalink":"https://amazingdl.github.io/2020/09/01/Java%20SE%E4%B9%8B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/","excerpt":"Java基本语法的总结和回顾，从数据类型、运算符到流程控制相关的知识点汇众，既是总结，亦是回顾。","text":"一、前言​ 同其他编程语言一样，Java也有自己的数据类型、运算符、流程控制等基本的语法；通过简单的判断和循环就能够完成复杂的算法，从而解决各种各样的问题。 ​ 即使各种编程语言的思想大致相同，但每种编程语言的部分细节却又不尽相同，所以基本的语法和细节还是值得注意和警惕的。 ​ 就如同其他编程语言一样，即使Java是面向对象的一门编程语言，Java也需要基本的数据类型、运算符和流程控制等基础的语法，因此，本篇博客就是总结和回顾一些我在学习Java时的一些基础语法知识，是对以前知识的回顾、总结，并希望通过本篇文章进一步加深我对Java的理解和对编程的理解。 二、数据类型​ Java的数据类型包括基本数据类型和引用数据类型，其中基本数据类型包括四类八种，分别是byte、short、int、long、float、double、char和boolean。 整数 类型 占用存储空间 范围 byte 1字节 -128~127 short 2字节 -32 768 - 32 767 int 4字节 -2 147 483 648 - 2 147 483 647 long 8字节 -9 223 372 036 854 775 808 - 9 223 372 036 854 775 807 注意： 长整型数值有一个后缀L或 l； 即二进制是以0b/0B开头；八进制是以数字0开头；十六进制是以0X/0x开头，此时的a-f不区分大小写。 浮点数 类型 占用存储空间 范围 float 4字节 大约± 3.402 823 47E+38F (有效位数为 6 ~ 7 位） double 8字节 大约 ± 1.797 693 134 862 315 70E+308 (有效位数为 15 位） 注意： float 类型的数值有一个后缀F或 f (例如，3.14F。) 没有后缀F 的浮点数值（如 3.14 ) 默认为double 类型。 double表示这种类型的数值精度是float类型的两倍（有人称之为双精度数值)。绝大部分应用程序都采用double类型。 浮点数值不适用于无法接受舍入误差的金融计算中。 例如，命令 System.out.println( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是人们想象的0.9。 字符 类型 占用存储空间 char 2字节 Unicode 不同的地区有不同的编码机制；于是就产生了问题：一个是对于任意给定的代码值，在不同的编码方案下有可能对应不同的字母；二是采用大字符集的语言其编码长度有可能不同。 常见的编码机制：美国的 ASCII、 西欧语言中的ISO 8859-1 俄罗斯的 KOI-8、 中国的 GB 18030 和 BIG-5。 然而，两个字节的代码宽度足以对世界上各种语言的所有字符进行编码， 并有足够的空间留给未来的扩展。 在设计 Java 时决定采用 16 位的 Unicode 字符集，这样会比使用 8 位字符集的程序设计语言有很大的改进。 在 Java 中，char 类型描述了 UTF-16 编码中的一个代码单兀。我们强烈建议不要在程序中使用 char 类型，除非确实需要处理 UTF-16 代码单元。最好将字符串作为抽象数据类型处理。 常见的字符转义序列 转义序列 名称 unicode值 \\b 退格 \\u0008 \\t 制表 \\u0009 \\n 换行 \\u000a \\r 回车 \\u000d \\ “ 双引号 \\u0022 \\ ‘ 单引号 \\u0027 \\ \\ 反斜杠 \\u005c 常用字符与ASCII代码对照表 ASCII码 键盘 ASCII 码 键盘 ASCII 码 键盘 ASCII 码 键盘 27 ESC 32 SPACE 33 ! 34 “ 35 # 36 $ 37 % 38 &amp; 39 ‘ 40 ( 41 ) 42 * 43 + 44 ‘ 45 - 46 . 47 / 48 0 49 1 50 2 51 3 52 4 53 5 54 6 55 7 56 8 57 9 58 : 59 ; 60 &lt; 61 = 62 &gt; 63 ? 64 @ 65 A 66 B 67 C 68 D 69 E 70 F 71 G 72 H 73 I 74 J 75 K 76 L 77 M 78 N 79 O 80 P 81 Q 82 R 83 S 84 T 85 U 86 V 87 W 88 X 89 Y 90 Z 91 [ 92 \\ 93 ] 94 ^ 95 _ 96 ` 97 a 98 b 99 c 100 d 101 e 102 f 103 g 104 h 105 i 106 j 107 k 108 l 109 m 110 n 111 o 112 p 113 q 114 r 115 s 116 t 117 u 118 v 119 w 120 x 121 y 122 z 123 { 124 | 125 } 126 ~ 布尔型 boolean (布尔）类型有两个值：false 和 true, 用来判定逻辑条件 整型值和布尔值之间不能进行相互转换。 三、注释、关键字与变量1. 注释单行注释 1// 单行注释 多行注释 123/* 多行注释*/ 文档注释 该注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现该程序的说明文档，类似于JDK说明文档； 通过命令可生成该文档：javadoc -d 文档名 -author -version 类名.java； 12345678910111213141516171819202122232425262728293031323334/** * 文档注释 * javadoc是用于提取注释的工具，输出的是一个HTML文件； * 文档标签和其嵌入HTML * 独立文档标签是一些以@字符开头的命令，且要置于注释行的最前面； * 行内文档标签可以出现在注释的任何地方，也是一@字符开头，但是要扩展花括号内。 * javadoc只能为public和protected成员进行文档注释。 * 嵌入HTML * &lt;h1&gt;标题&lt;/h1&gt; * &lt;ol&gt; * &lt;li&gt;Item one&lt;/li&gt; * &lt;/ol&gt; * 独立文档注释 * @see java.swing.JFrame * @version 版本 * @author 作者 * @since 最早使用的版本 * 行内文档注释 * &#123;@link java.util.Date&#125; * &#123;@docRoot &#125; 该标签产生到文档根目录的相对路径，用于文档树页面的显示超链接 */public class Test&#123; //方法上 /** * @param 参数名 方法说明 * @return 返回值描述 * @throws 对方法的异常进行说明 */ public void test()&#123; &#125;&#125; 2. 关键字和标识符特点：关键字中所有的字母都是小写； 保留字：goto和const，即Java目前尚未使用，但以后版本可能使用； 标识符：对变量、方法和类等元素命名时的字节序列。 命名规则 可使用26个英文字母的大小写，0-9，_和$组成； 数字不可以开头； 不可以使用关键字和保留字，但可以包含关键字和保留字； Java中严格区分大小写，长度无限制； 不能包含空格。 命名规范 包名：多单词组成时，所有字母都都小写； 类名、接口名：多单词组成时，所有单词的首字母大写； 变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写； 常量名：所有字母都大写，多个单词时每个单词用下划线连接。 3. 变量与常量此时说明的都是局部变量或局部常量，即在一个方法内或一段代码块内声明的变量或者常量，与后面的类属性无法。 变量 在 Java 中，每个变量都有一个类型（ type)。在声明变量时，变量的类型位于变量名之前。 注意：声明一个变量之后，必须用赋值语句对变量进行显式初始化， 千万不要使用未初始化的变量。 常量 在 Java 中， 利用关键字 final 指示常量。 关键字 final 表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上，常量名使用全大写。 1final double CM_PER_INCH = 2.54; 四、运算符 基本运算符 在 Jav 中，使用算术运算符 +、-、 *、/ 表示加、减、 乘、除运算。 当参与 / 运算的两个操作数都是整数时， 表示整数除法；否则， 表示浮点除法。 整数的求余操作（有时称为取模) 用 ％ 表示，只有整数类型变量能够进行取余运算。 通常表达式中出现的最大的数据类型决定了表达式最终结果的数据类型；即如果将一个float值与一个double值相乘，结果就是double。 可以在赋值中使用二元运算符，这是一种很方便的简写形式。例如， X += 4;等价于：x = x + 4; (一般地， 要把运算符放在 = 号左边，如 *= 或 ％=)。 强制类型转换 经常需要将一种数值类型转换为另一种数值类型。但有些会造成信息丢失。 从占用存储空间小的向占用存储空间大的转换不会丢失数据类型，反之则会丢失数据类型。 特殊的 从int转换为float可能会丢失数据类型； 从long转换为double可能会丢失数据类型； 从long转换为float可能会丢失数据类型； 从int转换位double不会丢失数据类型。 运算符中的类型转换 如果两个操作数中有一个是 double 类型， 另一个操作数就会转换为 double 类型。 否则，如果其中一个操作数是 float 类型，另一个操作数将会转换为 float 类型。 否则， 如果其中一个操作数是 long 类型， 另一个操作数将会转换为 long 类型。 否则， 两个操作数都将被转换为 int 类型。 在char、byte和short中，对这些类型的任何一个进行算术运算，都会获得一个int类型，必须将其显示的类型转换会原来的类型，以将值赋给原本的类型； 逻辑运算符 ==(等于)、!=(不等于) &lt; (小于) 、&gt; (大于)、&lt;=(小于等于）和 &gt;= (大于等于）运算符都是逻辑元素符，其运算的结果都是布尔型。 &amp;&amp; 和 &amp;(与)：只要有一个操作数为false，结果就为false。 || 和 |(或)：只要有一个操作数为true，结果就为true。 ! (非)：对操作为去反，如果操作数为true，表达式结果为false，反之同理。 三元运算符 1条件表达式? 结果1 : 结果2 根据条件表达式返回结果；如果条件表达式结果为true，则返回结果1，否则返回结果2。 &amp;&amp; 与&amp;、||与|的区别 &amp; 称为逻辑与运算符，&amp;&amp; 称为短路与运算符，也可叫逻辑与运算符。 ​ 对于&amp;：无论任何情况，&amp;两边的操作数或表达式都会参与计算。 ​ 对于&amp;&amp;：当&amp;&amp;左边的操作数为false或左边表达式结果为false时，&amp;&amp;右边的操作数或表达式将不参与计算，此时最终结果都为false。 ​ 综上所述，如果逻辑与运算的第一个操作数是false或第一个表达式的结果为false时，对于第二个操作数或表达式是 ​ 否进行运算，对最终的结果没有影响，结果肯定是false。推介平时多使用&amp;&amp;，因为它效率更高些。 &amp;还可以用作位运算符。当&amp;两边操作数或两边表达式的结果不是boolean类型时，&amp;用于按位与运算符的操作。 位运算符 运算符 运算 示例 &lt;&lt; 左移 3&lt;&lt;2 =&gt;3 * 2 * 2=12 &gt;&gt; 右移 3&gt;&gt;1=&gt;3/2=1；结果为int类型，所以为1。 &gt;&gt;&gt; 无符号右移 3&gt;&gt;&gt;1=&gt;3/2=1 &amp; 与运算 6&amp;3=2 | 或运算 6|3=7 ^ 异或运算 6^3=5 ~ 取反运算 ~6=-7 注意： 如果堆char、byte、short类型的数字进行移位处理，那么在移位进行之前，他们会被转换为int类型，并且得到的结果也是一个int类型。 对于&amp;、|如果两个操作数或表达式是布尔类型，则进行的是逻辑运算，且如果两个操作数都是表达式都需要进行计算，无论是否影响整个表达式的最终结果。 所有的位运算都是基于二进制的，比如^运算符，如果对于6和3两个整数，其二进制分别为1010和0011，则异或的结果就是1001，也就是5。 自增与自减 12n++; // n自增1n--; // n自减1 实际上， 这些运算符有两种形式；上面介绍的是运算符放在操作数后面的“ 后缀” 形式。 还有一种“ 前缀” 形式：++n。后缀和前缀形式都会使变量值加 1 或减 1。但用在表达式中时，二者就有区别了。前缀形式会先完成加 1; 而后缀形式会使用变量原来的值。 括号与运算符级别 如果不使用圆括号， 就按照给出的运算符优先级次序进行计算。 优先级 描述 运算符 1 括号 () [] 2 正负号 + - 3 自增自减，非 ++ – ! 4 乘除，取余 * / % 5 加减 + - 6 移位运算 &lt;&lt; &gt;&gt; &gt;&gt;&gt; 7 大小关系 &gt; &gt;= &lt; &lt;= 8 相等关系 == != 9 按位与 &amp; 10 按位异或 ^ 11 按位或 | 12 逻辑与 &amp;&amp; 13 逻辑或 || 14 条件运算 ?: 15 赋值运算 = += -= *= /= %= 16 位赋值运算 &amp;= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= 五、控制流程1. 条件语句1234567if(condition)&#123; &#125; else if(condition) &#123; &#125; else &#123; &#125; 与绝大多数程序设计语言一样， Java 常常希望在某个条件为真时执行多条语句。 注意：在上述中，condition可以是表达式或变量，如果是变量则必须是boolean类型，如果是表达式，表达式结果也必须是boolean类型。后面的循环语句的判断条件也是这种要求。 2. 循环语句 while 123while(condition)&#123; &#125; 满足条件进入循环，直到不满足条件退出循环。 do…while 123do&#123; &#125; while(condition) 满足条件，继续循环继续，否则退出循环，此种循环结构执行执行一次循环体。 for 123for(int i = 0;i&lt;10;i++)&#123; &#125; 执行步骤：先执行int i = 0且只执行一次；然后执行i&lt;10，结果为true时进入循环体；循环体执行完毕执行i++； 3. switch语句123456switch(n)&#123; case 1:执行语句;break; case 2:.... default:执行语句;break;&#125; case 标签可以是： 类型为 char、byte、 short 或 int 的常量表达式。 枚举常量。 从 Java SE 7开始， case 标签还可以是字符串字面量。 说明： 当n与某个case匹配是，执行该条件语句。 case的执行语句执行完毕后，如果没有break，则会继续执行下一个case，直到break，或者switch语句执行完毕。 当所有的case都不匹配时，汇之星default部分。 4. break和continue尽管 Java 的设计者将 goto 作为保留字，但实际上并没有打算在语言中使用它。 Java语言中增加了一条带标签的 break，用于中断流程控制。 例如：在无限循环中，当if条件满足时则退出循环。 1234while (true) &#123; if (condition) break;&#125; 带标签的break； 在多重循环中，可通过为循环体设置标签，然后满足一定条件时，直接退出执行的循环体；比如下面当if条件成立，就执行退出外循环了 123456outter: while () //外循环 for ()&#123; //内循环； if (condition) break outter; &#125; 还有一个 continue 语句。与 break 语句一样， 它将中断正常的控制流程。continue语句将控制转移到最内层循环的首部。 即退出本次循环，继续进行下一次循环。 12345678Scanner in = new Scanner(System.in);while (sum &lt; goal ) &#123; System.out.print(&quot;Enter a number: &quot;); n = in.nextlnt(); if (n &lt; 0) //如果输入的只为0，退出本次循环，继续进行下一次循环。 continue; sum += n;&#125; 六、数组概述 数组是一种数据结构， 用来存储同一类型值的集合。通过一个整型下标可以访问数组中的每一个值。 在声明数组变量时， 需要指出数组类型 （ 数据元素类型紧跟 []) 和数组变量的名字。 数组的长度是固定的。 数组标识符其实只是一个引用，指向在堆中创建的一个真实对象，这个对象用以保存指向其他对象的引用。 声明数组： 一位数组的声明方式；int[] arr=new int[]{}，int[] arr=new int[10]；其中方括号也可放在变量名后面； 还可以这样声明int[] arr={1,3, }，这种初始化方式只能使用在数组定义之处； 二维数组的声明；int[] arr[]=new int [ 3 ] [ ]；外层元素的初始值为null，内层元素的值不 能调用，否则报错； 注意数组的变量名直接赋值，是把数组的首地址赋给了另一个数组，当另一个数组发生改变时，这个数组也会发生改变。 使用花括号初始化数组，初始化列表的最后一个逗号是可选的；即new int{1,23,4,}也是可以的； 案例： 1int[] array = &#123; 2, 3, 5, 7, 11, 13 &#125;; 多维数组 123int[][] array = new int[size] [size];//声明二维数组，默认值是0int[][] array = &#123; &#123;16, 3, 2, 13&#125;， &#123;5, 10, 11, 8&#125;, (9, 6, 7, 12&#125;, &#123;4, 15, 14, 1&#125; &#125;;//声明二维数组 说明：二维数组与一维数组并没有太多的不同，可以把二维数据理解为存放若干个一维数组的一维数组。 例如： 123456789101112int[] a = &#123;1,2,3&#125;;int[] b = &#123;4,5,6&#125;;int[] c = &#123;7,8,9&#125;;int[][] array = &#123;a,b,c&#125;;for(int i=0;i&lt;array.length;i++) &#123; for(int j = 0;j&lt;array[i].length;j++) &#123; System.out.print(array[i][j]+&quot;\\t&quot;); &#125; System.out.println();&#125; 更多维的数组思想类似，不过基本上用不到。 七、结束语本篇文章主要是对Java基础语法的一个小总结，可能不是很全面，但也是自己学习Java的总结。 参考书籍 Java核心技术：https://book.douban.com/subject/26880667/","categories":[{"name":"Java基础","slug":"Java基础","permalink":"https://amazingdl.github.io/categories/Java%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Java SE","slug":"Java-SE","permalink":"https://amazingdl.github.io/tags/Java-SE/"},{"name":"编程","slug":"编程","permalink":"https://amazingdl.github.io/tags/%E7%BC%96%E7%A8%8B/"}]}],"categories":[{"name":"Java基础","slug":"Java基础","permalink":"https://amazingdl.github.io/categories/Java%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"Java SE","slug":"Java-SE","permalink":"https://amazingdl.github.io/tags/Java-SE/"},{"name":"编程","slug":"编程","permalink":"https://amazingdl.github.io/tags/%E7%BC%96%E7%A8%8B/"},{"name":"面向对象","slug":"面向对象","permalink":"https://amazingdl.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"}]}